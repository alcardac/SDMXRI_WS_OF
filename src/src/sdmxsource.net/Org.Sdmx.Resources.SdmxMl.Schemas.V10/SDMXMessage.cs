//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Org.Sdmx.Resources.SdmxMl.Schemas.V10.common {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact;
    
    
    /// <summary>
    /// <para>
    /// TextType provides for a set of language-specific alternates to be provided for any human-readable construct in the instance.
    /// </para>
    /// </summary>
    public partial class TextType : XTypedElement, IXMetaData {
        
         public static explicit operator TextType(XElement xe) { return XTypedServices.ToXTypedElement<TextType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// TextType provides for a set of language-specific alternates to be provided for any human-readable construct in the instance.
        /// </para>
        /// </summary>
        public TextType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lang {
            get {
                XAttribute x = this.Attribute(XName.Get("lang", "http://www.w3.org/XML/1998/namespace"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lang", "http://www.w3.org/XML/1998/namespace"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TextType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// AnnotationType provides for non-documentation notes and annotations to be embedded in data and structure messages. It provides optional fields for providing a title, a type description, a URI, and the text of the annotation.
    /// </para>
    /// <para>
    /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
    /// </para>
    /// </summary>
    public partial class AnnotationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TextType> AnnotationTextField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AnnotationType(XElement xe) { return XTypedServices.ToXTypedElement<AnnotationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnnotationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AnnotationTitle", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common")), new NamedContentModelEntity(XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common")), new NamedContentModelEntity(XName.Get("AnnotationURL", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common")), new NamedContentModelEntity(XName.Get("AnnotationText", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common")));
        }
        
        /// <summary>
        /// <para>
        /// AnnotationType provides for non-documentation notes and annotations to be embedded in data and structure messages. It provides optional fields for providing a title, a type description, a URI, and the text of the annotation.
        /// </para>
        /// <para>
        /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
        /// </para>
        /// </summary>
        public AnnotationType() {
        }
        
        /// <summary>
        /// <para>
        /// AnnotationTitle provides a title for the annotation.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
        /// </para>
        /// </summary>
        public string AnnotationTitle {
            get {
                XElement x = this.GetElement(XName.Get("AnnotationTitle", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AnnotationTitle", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// AnnotationType is used to distinguish between annotations designed to support various uses. The types are not enumerated, as these can be specified by the user or creator of the annotations. The definitions and use of annotation types should be documented by their creator.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
        /// </para>
        /// </summary>
        public string AnnotationType1 {
            get {
                XElement x = this.GetElement(XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// This is a URI - typically a URL - which points to an external resource which may contain or supplement the annotation. If a specific behavior is desired, an annotation type should be defined which specifies the use of this field more exactly.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
        /// </para>
        /// </summary>
        public System.Uri AnnotationURL {
            get {
                XElement x = this.GetElement(XName.Get("AnnotationURL", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("AnnotationURL", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// This is a language-specific string which holds the text oif the annotation.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
        /// </para>
        /// </summary>
        public IList<TextType> AnnotationText {
            get {
                if ((this.AnnotationTextField == null)) {
                    this.AnnotationTextField = new XTypedList<TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("AnnotationText", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"));
                }
                return this.AnnotationTextField;
            }
            set {
                if ((value == null)) {
                    this.AnnotationTextField = null;
                }
                else {
                    if ((this.AnnotationTextField == null)) {
                        this.AnnotationTextField = XTypedList<TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AnnotationText", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"));
                    }
                    else {
                        XTypedServices.SetList<TextType>(this.AnnotationTextField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnnotationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AnnotationTitle", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), typeof(string));
            localElementDictionary.Add(XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), typeof(string));
            localElementDictionary.Add(XName.Get("AnnotationURL", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AnnotationText", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), typeof(TextType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// AnnotationsType provides for a list of annotations to be attached to data and structure messages.
    /// </para>
    /// <para>
    /// Regular expression: (Annotation+)
    /// </para>
    /// </summary>
    public partial class AnnotationsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AnnotationType> AnnotationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AnnotationsType(XElement xe) { return XTypedServices.ToXTypedElement<AnnotationsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnnotationsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Annotation", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common")));
        }
        
        /// <summary>
        /// <para>
        /// AnnotationsType provides for a list of annotations to be attached to data and structure messages.
        /// </para>
        /// <para>
        /// Regular expression: (Annotation+)
        /// </para>
        /// </summary>
        public AnnotationsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Annotation+)
        /// </para>
        /// </summary>
        public IList<AnnotationType> Annotation {
            get {
                if ((this.AnnotationField == null)) {
                    this.AnnotationField = new XTypedList<AnnotationType>(this, LinqToXsdTypeManager.Instance, XName.Get("Annotation", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"));
                }
                return this.AnnotationField;
            }
            set {
                if ((value == null)) {
                    this.AnnotationField = null;
                }
                else {
                    if ((this.AnnotationField == null)) {
                        this.AnnotationField = XTypedList<AnnotationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Annotation", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"));
                    }
                    else {
                        XTypedServices.SetList<AnnotationType>(this.AnnotationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AnnotationsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnnotationsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Annotation", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), typeof(AnnotationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TIME_PERIOD is not completely expressable in XML Schema's date type: instead we use the union of dateTime, date, gYearMonth, and gYear. The default name for the concept is TIME_PERIOD. Semi-annual and quarterly periods would be described in terms of their beginning month, weekly periods in terms of their Monday: e.g. the second quarter of 2002 as 2002-04, since it starts with April.
    /// </para>
    /// </summary>
    public sealed class TimePeriodType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYearMonth), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear), null)});
        
        private TimePeriodType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// ActionType provides a list of actions, describing the intention of the data transmission from the sender's side. Each action applies to the entire dataset for which it is given.
    /// </para>
    /// </summary>
    public sealed class ActionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Update",
                        "Delete"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ActionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This type is used for datatyping the contents of uncoded attributes. It places no restrictions on characters used, but carries the semantic of the key-family designer in a fashion similar to that of the corresponding SDMX_EDI message.
    /// </para>
    /// </summary>
    public sealed class AlphaType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private AlphaType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This type is used for datatyping the contents of uncoded attributes. It places no restrictions on characters used, but carries the semantic of the key-family designer in a fashion similar to that of the corresponding SDMX_EDI message.
    /// </para>
    /// </summary>
    public sealed class AlphaNumericType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private AlphaNumericType() {
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.common;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.message;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.query;
    
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class DataSetType : XTypedElement, IXMetaData {
        
         public static explicit operator DataSetType(XElement xe) {  return (DataSetType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public DataSetType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class GroupType : XTypedElement, IXMetaData {
        
         public static explicit operator GroupType(XElement xe) {  return (GroupType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class SeriesType : XTypedElement, IXMetaData {
        
         public static explicit operator SeriesType(XElement xe) {  return (SeriesType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public SeriesType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class ObsType : XTypedElement, IXMetaData {
        
         public static explicit operator ObsType(XElement xe) {  return (ObsType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public ObsType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class DataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DataSetType ContentField;
        
         public static explicit operator DataSet(XElement xe) { return XTypedServices.ToXTypedElement<DataSet, DataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public DataSet() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public DataSet(DataSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public DataSetType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataSet Load(string xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Parse(string xml) {
            return XTypedServices.Parse<DataSet, DataSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DataSet(((DataSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DataSetType ContentField) {
            this.ContentField = ((DataSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Group : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GroupType ContentField;
        
         public static explicit operator Group(XElement xe) { return XTypedServices.ToXTypedElement<Group, GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Group() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Group(GroupType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public GroupType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Group Load(string xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Parse(string xml) {
            return XTypedServices.Parse<Group, GroupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Group(((GroupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GroupType ContentField) {
            this.ContentField = ((GroupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Series : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SeriesType ContentField;
        
         public static explicit operator Series(XElement xe) { return XTypedServices.ToXTypedElement<Series, SeriesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Series() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Series(SeriesType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public SeriesType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Series Load(string xmlFile) {
            return XTypedServices.Load<Series, SeriesType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Series Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Series, SeriesType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Series Parse(string xml) {
            return XTypedServices.Parse<Series, SeriesType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Series(((SeriesType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SeriesType ContentField) {
            this.ContentField = ((SeriesType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Obs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObsType ContentField;
        
         public static explicit operator Obs(XElement xe) { return XTypedServices.ToXTypedElement<Obs, ObsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Obs() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Obs(ObsType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ObsType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Obs Load(string xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Parse(string xml) {
            return XTypedServices.Parse<Obs, ObsType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Obs(((ObsType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ObsType ContentField) {
            this.ContentField = ((ObsType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("TextType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            typeDictionary.Add(XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationType));
            typeDictionary.Add(XName.Get("AnnotationsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
            typeDictionary.Add(XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSetType));
            typeDictionary.Add(XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.GroupType));
            typeDictionary.Add(XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.SeriesType));
            typeDictionary.Add(XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.ObsType));
            typeDictionary.Add(XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSetType));
            typeDictionary.Add(XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.GroupType));
            typeDictionary.Add(XName.Get("SectionType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.SectionType));
            typeDictionary.Add(XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.ObsType));
            typeDictionary.Add(XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSetType));
            typeDictionary.Add(XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.GroupType));
            typeDictionary.Add(XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.SeriesType));
            typeDictionary.Add(XName.Get("SeriesKeyType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.SeriesKeyType));
            typeDictionary.Add(XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.ObsType));
            typeDictionary.Add(XName.Get("ValuesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.ValuesType));
            typeDictionary.Add(XName.Get("ValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.ValueType));
            typeDictionary.Add(XName.Get("ObsValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.ObsValueType));
            typeDictionary.Add(XName.Get("MessageType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageType));
            typeDictionary.Add(XName.Get("StructureType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.StructureType));
            typeDictionary.Add(XName.Get("GenericDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.GenericDataType));
            typeDictionary.Add(XName.Get("UtilityDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.UtilityDataType));
            typeDictionary.Add(XName.Get("CompactDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CompactDataType));
            typeDictionary.Add(XName.Get("CrossSectionalDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CrossSectionalDataType));
            typeDictionary.Add(XName.Get("QueryMessageType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.QueryMessageType));
            typeDictionary.Add(XName.Get("MessageGroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageGroupType));
            typeDictionary.Add(XName.Get("HeaderType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.HeaderType));
            typeDictionary.Add(XName.Get("PartyType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.PartyType));
            typeDictionary.Add(XName.Get("ContactType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.ContactType));
            typeDictionary.Add(XName.Get("AgenciesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.AgenciesType));
            typeDictionary.Add(XName.Get("AgencyType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.AgencyType));
            typeDictionary.Add(XName.Get("ContactType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.ContactType));
            typeDictionary.Add(XName.Get("CodeListsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.CodeListsType));
            typeDictionary.Add(XName.Get("CodeListType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.CodeListType));
            typeDictionary.Add(XName.Get("CodeType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.CodeType));
            typeDictionary.Add(XName.Get("ConceptsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.ConceptsType));
            typeDictionary.Add(XName.Get("ConceptType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.ConceptType));
            typeDictionary.Add(XName.Get("KeyFamiliesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.KeyFamiliesType));
            typeDictionary.Add(XName.Get("KeyFamilyType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.KeyFamilyType));
            typeDictionary.Add(XName.Get("ComponentsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.ComponentsType));
            typeDictionary.Add(XName.Get("DimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.DimensionType));
            typeDictionary.Add(XName.Get("TimeDimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.TimeDimensionType));
            typeDictionary.Add(XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.GroupType));
            typeDictionary.Add(XName.Get("AttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.AttributeType));
            typeDictionary.Add(XName.Get("TextFormatType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.TextFormatType));
            typeDictionary.Add(XName.Get("PrimaryMeasureType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.PrimaryMeasureType));
            typeDictionary.Add(XName.Get("CrossSectionalMeasureType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.CrossSectionalMeasureType));
            typeDictionary.Add(XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSetType));
            typeDictionary.Add(XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.GroupType));
            typeDictionary.Add(XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.SeriesType));
            typeDictionary.Add(XName.Get("KeyType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.KeyType));
            typeDictionary.Add(XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.ObsType));
            typeDictionary.Add(XName.Get("QueryType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.QueryType));
            typeDictionary.Add(XName.Get("DataWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.DataWhereType));
            typeDictionary.Add(XName.Get("AndType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.AndType));
            typeDictionary.Add(XName.Get("OrType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.OrType));
            typeDictionary.Add(XName.Get("DimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.DimensionType));
            typeDictionary.Add(XName.Get("AttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.AttributeType));
            typeDictionary.Add(XName.Get("CodelistType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.CodelistType));
            typeDictionary.Add(XName.Get("CategoryType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.CategoryType));
            typeDictionary.Add(XName.Get("KeyFamilyWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.KeyFamilyWhereType));
            typeDictionary.Add(XName.Get("CodelistWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.CodelistWhereType));
            typeDictionary.Add(XName.Get("ConceptWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.ConceptWhereType));
            typeDictionary.Add(XName.Get("AgencyWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.AgencyWhereType));
            typeDictionary.Add(XName.Get("TimeType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.TimeType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet));
            elementDictionary.Add(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Group));
            elementDictionary.Add(XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Series));
            elementDictionary.Add(XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Obs));
            elementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet));
            elementDictionary.Add(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Group));
            elementDictionary.Add(XName.Get("Section", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Section));
            elementDictionary.Add(XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Obs));
            elementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet));
            elementDictionary.Add(XName.Get("Structure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.Structure));
            elementDictionary.Add(XName.Get("GenericData", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.GenericData));
            elementDictionary.Add(XName.Get("UtilityData", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.UtilityData));
            elementDictionary.Add(XName.Get("CompactData", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CompactData));
            elementDictionary.Add(XName.Get("CrossSectionalData", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CrossSectionalData));
            elementDictionary.Add(XName.Get("QueryMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.QueryMessage));
            elementDictionary.Add(XName.Get("MessageGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageGroup));
            elementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.Header));
            elementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet));
            elementDictionary.Add(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Group));
            elementDictionary.Add(XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Series));
            elementDictionary.Add(XName.Get("Key", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Key));
            elementDictionary.Add(XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Obs));
            elementDictionary.Add(XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.Query));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSetType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Group), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.GroupType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Series), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.SeriesType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Obs), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.ObsType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSetType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Group), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.GroupType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Section), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.SectionType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Obs), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.ObsType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSetType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.Structure), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.StructureType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.GenericData), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.GenericDataType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.UtilityData), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.UtilityDataType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CompactData), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CompactDataType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CrossSectionalData), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CrossSectionalDataType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.QueryMessage), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.QueryMessageType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageGroup), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageGroupType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.Header), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.HeaderType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSetType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Group), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.GroupType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Series), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.SeriesType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Key), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.KeyType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Obs), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.ObsType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.Query), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.QueryType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public DataSet DataSet {  get {return rootObject as DataSet; } }

    public Group Group {  get {return rootObject as Group; } }

    public Series Series {  get {return rootObject as Series; } }

    public Obs Obs {  get {return rootObject as Obs; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Series root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet DataSet {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Group Group {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Group; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Series Series {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Series; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Obs Obs {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Obs; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet DataSet1 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Group Group1 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Group; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Section Section {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Section; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Obs Obs1 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Obs; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet DataSet2 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.Structure Structure {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.Structure; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.GenericData GenericData {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.GenericData; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.UtilityData UtilityData {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.UtilityData; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CompactData CompactData {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CompactData; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CrossSectionalData CrossSectionalData {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CrossSectionalData; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.QueryMessage QueryMessage {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.QueryMessage; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageGroup MessageGroup {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageGroup; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.Header Header {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.Header; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet DataSet3 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Group Group2 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Group; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Series Series1 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Series; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Key Key {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Key; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Obs Obs2 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Obs; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.Query Query {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.Query; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Series root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Section root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.Structure root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.GenericData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.UtilityData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CompactData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.CrossSectionalData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.QueryMessage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.Header root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Series root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Key root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.Query root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact;
    
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class DataSetType : XTypedElement, IXMetaData {
        
         public static explicit operator DataSetType(XElement xe) {  return (DataSetType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public DataSetType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. The time attribute holds the value for the time dimension concept as specified in the key family. If time is not used as a concept in the key family, then no value need be provided.
    /// </para>
    /// </summary>
    public abstract partial class GroupType : XTypedElement, IXMetaData {
        
         public static explicit operator GroupType(XElement xe) {  return (GroupType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. The time attribute holds the value for the time dimension concept as specified in the key family. If time is not used as a concept in the key family, then no value need be provided.
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object time {
            get {
                XAttribute x = this.Attribute(XName.Get("time", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "time", this, XName.Get("time", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SectionType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class SectionType : XTypedElement, IXMetaData {
        
         public static explicit operator SectionType(XElement xe) {  return (SectionType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SectionType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public SectionType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SectionType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. It is capable of expressing the value and attributes of any single available cross-sectional measure (when extended).
    /// </para>
    /// </summary>
    public abstract partial class ObsType : XTypedElement, IXMetaData {
        
         public static explicit operator ObsType(XElement xe) {  return (ObsType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. It is capable of expressing the value and attributes of any single available cross-sectional measure (when extended).
        /// </para>
        /// </summary>
        public ObsType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class DataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DataSetType ContentField;
        
         public static explicit operator DataSet(XElement xe) { return XTypedServices.ToXTypedElement<DataSet, DataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public DataSet() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public DataSet(DataSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public DataSetType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataSet Load(string xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Parse(string xml) {
            return XTypedServices.Parse<DataSet, DataSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DataSet(((DataSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DataSetType ContentField) {
            this.ContentField = ((DataSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. The time attribute holds the value for the time dimension concept as specified in the key family. If time is not used as a concept in the key family, then no value need be provided.
    /// </para>
    /// </summary>
    public partial class Group : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GroupType ContentField;
        
         public static explicit operator Group(XElement xe) { return XTypedServices.ToXTypedElement<Group, GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. The time attribute holds the value for the time dimension concept as specified in the key family. If time is not used as a concept in the key family, then no value need be provided.
        /// </para>
        /// </summary>
        public Group() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. The time attribute holds the value for the time dimension concept as specified in the key family. If time is not used as a concept in the key family, then no value need be provided.
        /// </para>
        /// </summary>
        public Group(GroupType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public GroupType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object time {
            get {
                return this.ContentField.time;
            }
            set {
                this.ContentField.time = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Group Load(string xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Parse(string xml) {
            return XTypedServices.Parse<Group, GroupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Group(((GroupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GroupType ContentField) {
            this.ContentField = ((GroupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SectionType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Section : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SectionType ContentField;
        
         public static explicit operator Section(XElement xe) { return XTypedServices.ToXTypedElement<Section, SectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SectionType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Section() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// SectionType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Section(SectionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public SectionType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Section", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Section Load(string xmlFile) {
            return XTypedServices.Load<Section, SectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Section Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Section, SectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Section Parse(string xml) {
            return XTypedServices.Parse<Section, SectionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Section(((SectionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SectionType ContentField) {
            this.ContentField = ((SectionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. It is capable of expressing the value and attributes of any single available cross-sectional measure (when extended).
    /// </para>
    /// </summary>
    public partial class Obs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObsType ContentField;
        
         public static explicit operator Obs(XElement xe) { return XTypedServices.ToXTypedElement<Obs, ObsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. It is capable of expressing the value and attributes of any single available cross-sectional measure (when extended).
        /// </para>
        /// </summary>
        public Obs() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. It is capable of expressing the value and attributes of any single available cross-sectional measure (when extended).
        /// </para>
        /// </summary>
        public Obs(ObsType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ObsType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Obs Load(string xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Parse(string xml) {
            return XTypedServices.Parse<Obs, ObsType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Obs(((ObsType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ObsType ContentField) {
            this.ContentField = ((ObsType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public DataSet DataSet {  get {return rootObject as DataSet; } }

    public Group Group {  get {return rootObject as Group; } }

    public Section Section {  get {return rootObject as Section; } }

    public Obs Obs {  get {return rootObject as Obs; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Section root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact;
    
    
    /// <summary>
    /// <para>
    /// DataSetType defines the structure of a data set. This consists of a key family reference which contains the ID of the key family, and the attribute values attached at the data set level. A DataSet may be used to transmit documentation (that is, only attribute values), data, or a combination of both. If providing only documentation, you need not send the complete set of attributes. If transmitting only data, the Group may be omitted if desired. Uniqueness constraints are defined for the attributes of the data set. If dataset-level attributes are sent in a delete message, then any valid attribute value will indicate that the current attribute value should be deleted. The keyFamilyURI attribute is provided to allow a URI (typically a URL) to be provided, pointing to an SDMX-ML Structure message describing the key family.
    ///	
    /// </para>
    /// <para>
    /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
    /// </para>
    /// </summary>
    public partial class DataSetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroupType> GroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SeriesType> SeriesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator DataSetType(XElement xe) { return XTypedServices.ToXTypedElement<DataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataSetType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// DataSetType defines the structure of a data set. This consists of a key family reference which contains the ID of the key family, and the attribute values attached at the data set level. A DataSet may be used to transmit documentation (that is, only attribute values), data, or a combination of both. If providing only documentation, you need not send the complete set of attributes. If transmitting only data, the Group may be omitted if desired. Uniqueness constraints are defined for the attributes of the data set. If dataset-level attributes are sent in a delete message, then any valid attribute value will indicate that the current attribute value should be deleted. The keyFamilyURI attribute is provided to allow a URI (typically a URL) to be provided, pointing to an SDMX-ML Structure message describing the key family.
        ///	
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public DataSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public string KeyFamilyRef {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType Attributes {
            get {
                XElement x = this.GetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((ValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public IList<GroupType> Group {
            get {
                if ((this.GroupField == null)) {
                    this.GroupField = new XTypedList<GroupType>(this, LinqToXsdTypeManager.Instance, XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                }
                return this.GroupField;
            }
            set {
                if ((value == null)) {
                    this.GroupField = null;
                }
                else {
                    if ((this.GroupField == null)) {
                        this.GroupField = XTypedList<GroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<GroupType>(this.GroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public IList<SeriesType> Series {
            get {
                if ((this.SeriesField == null)) {
                    this.SeriesField = new XTypedList<SeriesType>(this, LinqToXsdTypeManager.Instance, XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                }
                return this.SeriesField;
            }
            set {
                if ((value == null)) {
                    this.SeriesField = null;
                }
                else {
                    if ((this.SeriesField == null)) {
                        this.SeriesField = XTypedList<SeriesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<SeriesType>(this.SeriesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri keyFamilyURI {
            get {
                XAttribute x = this.Attribute(XName.Get("keyFamilyURI", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("keyFamilyURI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataSetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(string));
            localElementDictionary.Add(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(ValuesType));
            localElementDictionary.Add(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(GroupType));
            localElementDictionary.Add(XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(SeriesType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The key values at the group level may be stated explicitly, and all which are not wildcarded listed in GroupKey - they must also all be given a value at the series level. It is not necessary to specify the group key, however, as this may be inferred from the values repeated at the series level. If only documentation (group-level attributes) are being transmitted, however, the GroupKey cannot be omitted. The type attribute contains the name of the declared group in the key family. If any group-level attributes are specified in a delete message, then any valid value supplied for the attribute indicates that the current attribute value should be deleted for the specified attribute.
    ///	
    /// </para>
    /// <para>
    /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
    /// </para>
    /// </summary>
    public partial class GroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SeriesType> SeriesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GroupType(XElement xe) { return XTypedServices.ToXTypedElement<GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GroupKey", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")), new NamedContentModelEntity(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")), new NamedContentModelEntity(XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")));
        }
        
        /// <summary>
        /// <para>
        /// The key values at the group level may be stated explicitly, and all which are not wildcarded listed in GroupKey - they must also all be given a value at the series level. It is not necessary to specify the group key, however, as this may be inferred from the values repeated at the series level. If only documentation (group-level attributes) are being transmitted, however, the GroupKey cannot be omitted. The type attribute contains the name of the declared group in the key family. If any group-level attributes are specified in a delete message, then any valid value supplied for the attribute indicates that the current attribute value should be deleted for the specified attribute.
        ///	
        /// </para>
        /// <para>
        /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType GroupKey {
            get {
                XElement x = this.GetElement(XName.Get("GroupKey", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((ValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("GroupKey", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType Attributes {
            get {
                XElement x = this.GetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((ValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
        /// </para>
        /// </summary>
        public IList<SeriesType> Series {
            get {
                if ((this.SeriesField == null)) {
                    this.SeriesField = new XTypedList<SeriesType>(this, LinqToXsdTypeManager.Instance, XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                }
                return this.SeriesField;
            }
            set {
                if ((value == null)) {
                    this.SeriesField = null;
                }
                else {
                    if ((this.SeriesField == null)) {
                        this.SeriesField = XTypedList<SeriesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<SeriesType>(this.SeriesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("GroupKey", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(ValuesType));
            localElementDictionary.Add(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(ValuesType));
            localElementDictionary.Add(XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(SeriesType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesType specifies the structure of a series. This includes all of the key values, values for all the attributes, and the set of observations making up the series content. Messages may transmit only attributes, only data, or both. Regardless, the series key is always required. Key values appear at the Series level in an ordered sequence which corresponds to the key sequence in the key family. A series in a delete message need not supply more than the key, indicating that the entire series identified by that key should be deleted. If series attributes are sent in a delete message, any valid value specified for an attribute indicates that the attribute should be deleted.
    ///	
    /// </para>
    /// <para>
    /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
    /// </para>
    /// </summary>
    public partial class SeriesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ObsType> ObsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SeriesType(XElement xe) { return XTypedServices.ToXTypedElement<SeriesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SeriesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SeriesKey", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")), new NamedContentModelEntity(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")), new NamedContentModelEntity(XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")));
        }
        
        /// <summary>
        /// <para>
        /// SeriesType specifies the structure of a series. This includes all of the key values, values for all the attributes, and the set of observations making up the series content. Messages may transmit only attributes, only data, or both. Regardless, the series key is always required. Key values appear at the Series level in an ordered sequence which corresponds to the key sequence in the key family. A series in a delete message need not supply more than the key, indicating that the entire series identified by that key should be deleted. If series attributes are sent in a delete message, any valid value specified for an attribute indicates that the attribute should be deleted.
        ///	
        /// </para>
        /// <para>
        /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
        /// </para>
        /// </summary>
        public SeriesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
        /// </para>
        /// </summary>
        public SeriesKeyType SeriesKey {
            get {
                XElement x = this.GetElement(XName.Get("SeriesKey", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((SeriesKeyType)(x));
            }
            set {
                this.SetElement(XName.Get("SeriesKey", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType Attributes {
            get {
                XElement x = this.GetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((ValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ObsType> Obs {
            get {
                if ((this.ObsField == null)) {
                    this.ObsField = new XTypedList<ObsType>(this, LinqToXsdTypeManager.Instance, XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                }
                return this.ObsField;
            }
            set {
                if ((value == null)) {
                    this.ObsField = null;
                }
                else {
                    if ((this.ObsField == null)) {
                        this.ObsField = XTypedList<ObsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<ObsType>(this.ObsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SeriesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SeriesKey", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(SeriesKeyType));
            localElementDictionary.Add(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(ValuesType));
            localElementDictionary.Add(XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(ObsType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesKeyType defines the contents of a series key. Each non-time dimension must have a value supplied for it, in the order in which the dimensions are specified in the key family. 
    /// </para>
    /// <para>
    /// Regular expression: (Value+)
    /// </para>
    /// </summary>
    public partial class SeriesKeyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueType> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SeriesKeyType(XElement xe) { return XTypedServices.ToXTypedElement<SeriesKeyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SeriesKeyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")));
        }
        
        /// <summary>
        /// <para>
        /// SeriesKeyType defines the contents of a series key. Each non-time dimension must have a value supplied for it, in the order in which the dimensions are specified in the key family. 
        /// </para>
        /// <para>
        /// Regular expression: (Value+)
        /// </para>
        /// </summary>
        public SeriesKeyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Value+)
        /// </para>
        /// </summary>
        public IList<ValueType> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<ValueType>(this, LinqToXsdTypeManager.Instance, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<ValueType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<ValueType>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SeriesKeyType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SeriesKeyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(ValueType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType defines the structure of an observation. This includes a time and observation value, as well as values for each of the attributes assigned at the observation level by the key family. In a delete message, only the time need be given, indicating that the observation identified by the key and time should be deleted. For an update message, both time and observation value are required. If any attributes appear in a delete message, any valid value supplied for an attribute indicates that the current value should be deleted.		
    ///	
    /// </para>
    /// <para>
    /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
    /// </para>
    /// </summary>
    public partial class ObsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ObsType(XElement xe) { return XTypedServices.ToXTypedElement<ObsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")), new NamedContentModelEntity(XName.Get("ObsValue", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")), new NamedContentModelEntity(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")));
        }
        
        /// <summary>
        /// <para>
        /// ObsType defines the structure of an observation. This includes a time and observation value, as well as values for each of the attributes assigned at the observation level by the key family. In a delete message, only the time need be given, indicating that the observation identified by the key and time should be deleted. For an update message, both time and observation value are required. If any attributes appear in a delete message, any valid value supplied for an attribute indicates that the current value should be deleted.		
        ///	
        /// </para>
        /// <para>
        /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
        /// </para>
        /// </summary>
        public ObsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
        /// </para>
        /// </summary>
        public object Time {
            get {
                XElement x = this.GetElement(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value, "Time", global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
        /// </para>
        /// </summary>
        public ObsValueType ObsValue {
            get {
                XElement x = this.GetElement(XName.Get("ObsValue", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((ObsValueType)(x));
            }
            set {
                this.SetElement(XName.Get("ObsValue", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType Attributes {
            get {
                XElement x = this.GetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((ValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(object));
            localElementDictionary.Add(XName.Get("ObsValue", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(ObsValueType));
            localElementDictionary.Add(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(ValuesType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Value+)
    /// </para>
    /// </summary>
    public partial class ValuesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueType> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ValuesType(XElement xe) { return XTypedServices.ToXTypedElement<ValuesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ValuesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Value+)
        /// </para>
        /// </summary>
        public ValuesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Value+)
        /// </para>
        /// </summary>
        public IList<ValueType> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<ValueType>(this, LinqToXsdTypeManager.Instance, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<ValueType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<ValueType>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ValuesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValuesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(ValueType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ValueType is used to assign a single value to a concept, as for attribute values and key values. It has no element content.	
    ///	
    /// </para>
    /// </summary>
    public partial class ValueType : XTypedElement, IXMetaData {
        
         public static explicit operator ValueType(XElement xe) { return XTypedServices.ToXTypedElement<ValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ValueType is used to assign a single value to a concept, as for attribute values and key values. It has no element content.	
        ///	
        /// </para>
        /// </summary>
        public ValueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string concept {
            get {
                XAttribute x = this.Attribute(XName.Get("concept", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("concept", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string value {
            get {
                XAttribute x = this.Attribute(XName.Get("value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValueType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsValueType describes the information set for an observation value. This is associated with the primary measure concept declared in the key family.
    ///	
    /// </para>
    /// </summary>
    public partial class ObsValueType : XTypedElement, IXMetaData {
        
         public static explicit operator ObsValueType(XElement xe) { return XTypedServices.ToXTypedElement<ObsValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsValueType describes the information set for an observation value. This is associated with the primary measure concept declared in the key family.
        ///	
        /// </para>
        /// </summary>
        public ObsValueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<double> value {
            get {
                XAttribute x = this.Attribute(XName.Get("value", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ObsValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObsValueType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataSetType defines the structure of a data set. This consists of a key family reference which contains the ID of the key family, and the attribute values attached at the data set level. A DataSet may be used to transmit documentation (that is, only attribute values), data, or a combination of both. If providing only documentation, you need not send the complete set of attributes. If transmitting only data, the Group may be omitted if desired. Uniqueness constraints are defined for the attributes of the data set. If dataset-level attributes are sent in a delete message, then any valid attribute value will indicate that the current attribute value should be deleted. The keyFamilyURI attribute is provided to allow a URI (typically a URL) to be provided, pointing to an SDMX-ML Structure message describing the key family.
    ///	
    /// </para>
    /// </summary>
    public partial class DataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DataSetType ContentField;
        
         public static explicit operator DataSet(XElement xe) { return XTypedServices.ToXTypedElement<DataSet, DataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType defines the structure of a data set. This consists of a key family reference which contains the ID of the key family, and the attribute values attached at the data set level. A DataSet may be used to transmit documentation (that is, only attribute values), data, or a combination of both. If providing only documentation, you need not send the complete set of attributes. If transmitting only data, the Group may be omitted if desired. Uniqueness constraints are defined for the attributes of the data set. If dataset-level attributes are sent in a delete message, then any valid attribute value will indicate that the current attribute value should be deleted. The keyFamilyURI attribute is provided to allow a URI (typically a URL) to be provided, pointing to an SDMX-ML Structure message describing the key family.
        ///	
        /// </para>
        /// </summary>
        public DataSet() {
            SetInnerType(new DataSetType());
        }
        
        /// <summary>
        /// <para>
        /// DataSetType defines the structure of a data set. This consists of a key family reference which contains the ID of the key family, and the attribute values attached at the data set level. A DataSet may be used to transmit documentation (that is, only attribute values), data, or a combination of both. If providing only documentation, you need not send the complete set of attributes. If transmitting only data, the Group may be omitted if desired. Uniqueness constraints are defined for the attributes of the data set. If dataset-level attributes are sent in a delete message, then any valid attribute value will indicate that the current attribute value should be deleted. The keyFamilyURI attribute is provided to allow a URI (typically a URL) to be provided, pointing to an SDMX-ML Structure message describing the key family.
        ///	
        /// </para>
        /// </summary>
        public DataSet(DataSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public DataSetType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public string KeyFamilyRef {
            get {
                return this.ContentField.KeyFamilyRef;
            }
            set {
                this.ContentField.KeyFamilyRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType Attributes {
            get {
                return this.ContentField.Attributes;
            }
            set {
                this.ContentField.Attributes = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public IList<GroupType> Group {
            get {
                return this.ContentField.Group;
            }
            set {
                this.ContentField.Group = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public IList<SeriesType> Series {
            get {
                return this.ContentField.Series;
            }
            set {
                this.ContentField.Series = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                return this.ContentField.Annotations;
            }
            set {
                this.ContentField.Annotations = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri keyFamilyURI {
            get {
                return this.ContentField.keyFamilyURI;
            }
            set {
                this.ContentField.keyFamilyURI = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataSet Load(string xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Parse(string xml) {
            return XTypedServices.Parse<DataSet, DataSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DataSet(((DataSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DataSetType ContentField) {
            this.ContentField = ((DataSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public DataSet DataSet {  get {return rootObject as DataSet; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V10.message {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact;
    
    
    /// <summary>
    /// <para>
    /// The Message is an abstract type which is used by all of the messages, to allow inheritance of common features. It also provides uniqueness constraints for the header fields.
    /// </para>
    /// <para>
    /// Regular expression: (Header)
    /// </para>
    /// </summary>
    public abstract partial class MessageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MessageType(XElement xe) {  return (MessageType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MessageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// The Message is an abstract type which is used by all of the messages, to allow inheritance of common features. It also provides uniqueness constraints for the header fields.
        /// </para>
        /// <para>
        /// Regular expression: (Header)
        /// </para>
        /// </summary>
        public MessageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header)
        /// </para>
        /// </summary>
        public HeaderType Header {
            get {
                XElement x = this.GetElement(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return ((HeaderType)(x));
            }
            set {
                this.SetElement(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(HeaderType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// StructureType defines the contents of a structure message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, Agencies?, CodeLists?, Concepts?, KeyFamilies?)
    /// </para>
    /// </summary>
    public partial class StructureType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StructureType(XElement xe) { return XTypedServices.ToXTypedElement<StructureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Agencies", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// StructureType defines the contents of a structure message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, Agencies?, CodeLists?, Concepts?, KeyFamilies?)
        /// </para>
        /// </summary>
        public StructureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, Agencies?, CodeLists?, Concepts?, KeyFamilies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.AgenciesType Agencies {
            get {
                XElement x = this.GetElement(XName.Get("Agencies", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.AgenciesType)(x));
            }
            set {
                this.SetElement(XName.Get("Agencies", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, Agencies?, CodeLists?, Concepts?, KeyFamilies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.CodeListsType CodeLists {
            get {
                XElement x = this.GetElement(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.CodeListsType)(x));
            }
            set {
                this.SetElement(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, Agencies?, CodeLists?, Concepts?, KeyFamilies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.ConceptsType Concepts {
            get {
                XElement x = this.GetElement(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.ConceptsType)(x));
            }
            set {
                this.SetElement(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, Agencies?, CodeLists?, Concepts?, KeyFamilies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.KeyFamiliesType KeyFamilies {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.KeyFamiliesType)(x));
            }
            set {
                this.SetElement(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructureType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("Agencies", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.AgenciesType));
            localElementDictionary.Add(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.CodeListsType));
            localElementDictionary.Add(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.ConceptsType));
            localElementDictionary.Add(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.KeyFamiliesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// GenericDataType defines the contents of a GenericData message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, DataSet)
    /// </para>
    /// </summary>
    public partial class GenericDataType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GenericDataType(XElement xe) { return XTypedServices.ToXTypedElement<GenericDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GenericDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// GenericDataType defines the contents of a GenericData message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public GenericDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSetType DataSet {
            get {
                XElement x = this.GetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSetType)(x));
            }
            set {
                this.SetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GenericDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GenericDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSetType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// UtilityDataType defines the contents of a UtilityData message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, DataSet)
    /// </para>
    /// </summary>
    public partial class UtilityDataType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UtilityDataType(XElement xe) { return XTypedServices.ToXTypedElement<UtilityDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UtilityDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility")));
        }
        
        /// <summary>
        /// <para>
        /// UtilityDataType defines the contents of a UtilityData message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public UtilityDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet DataSet {
            get {
                XElement x = this.GetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet)(x));
            }
            set {
                this.SetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UtilityDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UtilityDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CompactDataType defines the contents of a CompactData message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, DataSet)
    /// </para>
    /// </summary>
    public partial class CompactDataType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CompactDataType(XElement xe) { return XTypedServices.ToXTypedElement<CompactDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CompactDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact")));
        }
        
        /// <summary>
        /// <para>
        /// CompactDataType defines the contents of a CompactData message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public CompactDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet DataSet {
            get {
                XElement x = this.GetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet)(x));
            }
            set {
                this.SetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CompactDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CompactDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CrossSectionalDataType defines the contents of a CrossSectionalData message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, DataSet)
    /// </para>
    /// </summary>
    public partial class CrossSectionalDataType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CrossSectionalDataType(XElement xe) { return XTypedServices.ToXTypedElement<CrossSectionalDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CrossSectionalDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross")));
        }
        
        /// <summary>
        /// <para>
        /// CrossSectionalDataType defines the contents of a CrossSectionalData message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public CrossSectionalDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet DataSet {
            get {
                XElement x = this.GetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet)(x));
            }
            set {
                this.SetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CrossSectionalDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrossSectionalDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// QueryMessageType defines the contents of a QueryMessage.
    /// </para>
    /// <para>
    /// Regular expression: (Header, Query)
    /// </para>
    /// </summary>
    public partial class QueryMessageType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QueryMessageType(XElement xe) { return XTypedServices.ToXTypedElement<QueryMessageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryMessageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// QueryMessageType defines the contents of a QueryMessage.
        /// </para>
        /// <para>
        /// Regular expression: (Header, Query)
        /// </para>
        /// </summary>
        public QueryMessageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, Query)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.QueryType Query {
            get {
                XElement x = this.GetElement(XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.QueryType)(x));
            }
            set {
                this.SetElement(XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryMessageType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryMessageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.QueryType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MessageGroupType defines the contents of a MessageGroup message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+))
    /// </para>
    /// </summary>
    public partial class MessageGroupType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet> DataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet> DataSet1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet> DataSet2Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet> DataSet3Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator MessageGroupType(XElement xe) { return XTypedServices.ToXTypedElement<MessageGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MessageGroupType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// MessageGroupType defines the contents of a MessageGroup message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+))
        /// </para>
        /// </summary>
        public MessageGroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet> DataSet {
            get {
                if ((this.DataSetField == null)) {
                    this.DataSetField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet>(this, LinqToXsdTypeManager.Instance, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                }
                return this.DataSetField;
            }
            set {
                if ((value == null)) {
                    this.DataSetField = null;
                }
                else {
                    if ((this.DataSetField == null)) {
                        this.DataSetField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet>(this.DataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet> DataSet1 {
            get {
                if ((this.DataSet1Field == null)) {
                    this.DataSet1Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet>(this, LinqToXsdTypeManager.Instance, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"));
                }
                return this.DataSet1Field;
            }
            set {
                if ((value == null)) {
                    this.DataSet1Field = null;
                }
                else {
                    if ((this.DataSet1Field == null)) {
                        this.DataSet1Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet>(this.DataSet1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet> DataSet2 {
            get {
                if ((this.DataSet2Field == null)) {
                    this.DataSet2Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet>(this, LinqToXsdTypeManager.Instance, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"));
                }
                return this.DataSet2Field;
            }
            set {
                if ((value == null)) {
                    this.DataSet2Field = null;
                }
                else {
                    if ((this.DataSet2Field == null)) {
                        this.DataSet2Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet>(this.DataSet2Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet> DataSet3 {
            get {
                if ((this.DataSet3Field == null)) {
                    this.DataSet3Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet>(this, LinqToXsdTypeManager.Instance, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"));
                }
                return this.DataSet3Field;
            }
            set {
                if ((value == null)) {
                    this.DataSet3Field = null;
                }
                else {
                    if ((this.DataSet3Field == null)) {
                        this.DataSet3Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet>(this.DataSet3Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageGroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MessageGroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/generic"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/compact"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/cross"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// HeaderType defines the header fields used for all messages. ID identifies a data flow definition, which, when combined with time, uniquely identifies the data set. Test indicates whather the message is for test purposes or not. Truncated is used in data messages which are responding to Query messages, and is set to true only if the response has been truncated to meet size limits suggested by the defaultLimit attribute in the Query mesage.  Name provides a name for the transmission. Prepared is the date prepared. Sender is information about the sender, and Receiver is information about the receiver. Agency provides the code identifier/abbreviation for the maintenance agency of a data set. Data set id provides an identifier for a contained data set. Action code provides a code for determining whether the enclosed message is an Update or Delete message (not to be used with the UtilityData message). KeyFamilyRef is used to reference a key family for a contained data set, using its id. (This information is required at the DataSet level for some messages, but is provided here as a convenience for those messages which do not require it.) KeyFamilyAgency specifies the agency of the key family using its coded id.  Fields which refer to a contained data set need not be used if the message contains a query or structural information - these messages provide specific fields for holding this information. The ones here are not to be used as defaults. Extracted is a time-stamp from the system rendering the data; ReportingBegin and ReportingEnd provide the time period covered by the message (in the case of data). Source provides human-readable information about the source of the data.
    /// </para>
    /// <para>
    /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
    /// </para>
    /// </summary>
    public partial class HeaderType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyType> ReceiverField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> SourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HeaderType(XElement xe) { return XTypedServices.ToXTypedElement<HeaderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HeaderType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Test", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Truncated", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Prepared", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Sender", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Receiver", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("KeyFamilyAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("DataSetAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("DataSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("DataSetAction", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Extracted", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("ReportingBegin", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("ReportingEnd", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Source", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// HeaderType defines the header fields used for all messages. ID identifies a data flow definition, which, when combined with time, uniquely identifies the data set. Test indicates whather the message is for test purposes or not. Truncated is used in data messages which are responding to Query messages, and is set to true only if the response has been truncated to meet size limits suggested by the defaultLimit attribute in the Query mesage.  Name provides a name for the transmission. Prepared is the date prepared. Sender is information about the sender, and Receiver is information about the receiver. Agency provides the code identifier/abbreviation for the maintenance agency of a data set. Data set id provides an identifier for a contained data set. Action code provides a code for determining whether the enclosed message is an Update or Delete message (not to be used with the UtilityData message). KeyFamilyRef is used to reference a key family for a contained data set, using its id. (This information is required at the DataSet level for some messages, but is provided here as a convenience for those messages which do not require it.) KeyFamilyAgency specifies the agency of the key family using its coded id.  Fields which refer to a contained data set need not be used if the message contains a query or structural information - these messages provide specific fields for holding this information. The ones here are not to be used as defaults. Extracted is a time-stamp from the system rendering the data; ReportingBegin and ReportingEnd provide the time period covered by the message (in the case of data). Source provides human-readable information about the source of the data.
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public HeaderType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public bool Test {
            get {
                XElement x = this.GetElement(XName.Get("Test", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("Test", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> Truncated {
            get {
                XElement x = this.GetElement(XName.Get("Truncated", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("Truncated", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object Prepared {
            get {
                XElement x = this.GetElement(XName.Get("Prepared", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.HeaderTimeType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("Prepared", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, "Prepared", global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.HeaderTimeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public PartyType Sender {
            get {
                XElement x = this.GetElement(XName.Get("Sender", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return ((PartyType)(x));
            }
            set {
                this.SetElement(XName.Get("Sender", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<PartyType> Receiver {
            get {
                if ((this.ReceiverField == null)) {
                    this.ReceiverField = new XTypedList<PartyType>(this, LinqToXsdTypeManager.Instance, XName.Get("Receiver", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.ReceiverField;
            }
            set {
                if ((value == null)) {
                    this.ReceiverField = null;
                }
                else {
                    if ((this.ReceiverField == null)) {
                        this.ReceiverField = XTypedList<PartyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Receiver", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<PartyType>(this.ReceiverField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string KeyFamilyRef {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string KeyFamilyAgency {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElement(XName.Get("KeyFamilyAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetAgency {
            get {
                XElement x = this.GetElement(XName.Get("DataSetAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataSetAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetID {
            get {
                XElement x = this.GetElement(XName.Get("DataSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetAction {
            get {
                XElement x = this.GetElement(XName.Get("DataSetAction", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataSetAction", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, "DataSetAction", global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.ActionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> Extracted {
            get {
                XElement x = this.GetElement(XName.Get("Extracted", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("Extracted", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object ReportingBegin {
            get {
                XElement x = this.GetElement(XName.Get("ReportingBegin", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.HeaderTimeType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("ReportingBegin", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, "ReportingBegin", global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.HeaderTimeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object ReportingEnd {
            get {
                XElement x = this.GetElement(XName.Get("ReportingEnd", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.HeaderTimeType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("ReportingEnd", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), value, "ReportingEnd", global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.message.HeaderTimeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Source {
            get {
                if ((this.SourceField == null)) {
                    this.SourceField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Source", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.SourceField;
            }
            set {
                if ((value == null)) {
                    this.SourceField = null;
                }
                else {
                    if ((this.SourceField == null)) {
                        this.SourceField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Source", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.SourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HeaderType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HeaderType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("Test", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(bool));
            localElementDictionary.Add(XName.Get("Truncated", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(bool));
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Prepared", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(object));
            localElementDictionary.Add(XName.Get("Sender", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(PartyType));
            localElementDictionary.Add(XName.Get("Receiver", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(PartyType));
            localElementDictionary.Add(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamilyAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("DataSetAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("DataSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("DataSetAction", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("Extracted", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("ReportingBegin", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(object));
            localElementDictionary.Add(XName.Get("ReportingEnd", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(object));
            localElementDictionary.Add(XName.Get("Source", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// PartyType defines the information which is sent about various parties such as senders and receivers of messages. The Name is the ID of the party, and Contact provides contact details.
    /// </para>
    /// <para>
    /// Regular expression: (Name*, Contact*)
    /// </para>
    /// </summary>
    public partial class PartyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContactType> ContactField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PartyType(XElement xe) { return XTypedServices.ToXTypedElement<PartyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PartyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")), new NamedContentModelEntity(XName.Get("Contact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// PartyType defines the information which is sent about various parties such as senders and receivers of messages. The Name is the ID of the party, and Contact provides contact details.
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Contact*)
        /// </para>
        /// </summary>
        public PartyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Contact*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Contact*)
        /// </para>
        /// </summary>
        public IList<ContactType> Contact {
            get {
                if ((this.ContactField == null)) {
                    this.ContactField = new XTypedList<ContactType>(this, LinqToXsdTypeManager.Instance, XName.Get("Contact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.ContactField;
            }
            set {
                if ((value == null)) {
                    this.ContactField = null;
                }
                else {
                    if ((this.ContactField == null)) {
                        this.ContactField = XTypedList<ContactType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Contact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<ContactType>(this.ContactField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PartyType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PartyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Contact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(ContactType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ContactType provides defines the contact information about a party. The Name provides a human-readable name.
    /// </para>
    /// <para>
    /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
    /// </para>
    /// </summary>
    public partial class ContactType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> DepartmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> RoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> TelephoneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> FaxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> X400Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> URIField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> EmailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ContactType(XElement xe) { return XTypedServices.ToXTypedElement<ContactType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContactType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// ContactType provides defines the contact information about a party. The Name provides a human-readable name.
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public ContactType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Department {
            get {
                if ((this.DepartmentField == null)) {
                    this.DepartmentField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.DepartmentField;
            }
            set {
                if ((value == null)) {
                    this.DepartmentField = null;
                }
                else {
                    if ((this.DepartmentField == null)) {
                        this.DepartmentField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.DepartmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Role {
            get {
                if ((this.RoleField == null)) {
                    this.RoleField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.RoleField;
            }
            set {
                if ((value == null)) {
                    this.RoleField = null;
                }
                else {
                    if ((this.RoleField == null)) {
                        this.RoleField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.RoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Telephone {
            get {
                if ((this.TelephoneField == null)) {
                    this.TelephoneField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.TelephoneField;
            }
            set {
                if ((value == null)) {
                    this.TelephoneField = null;
                }
                else {
                    if ((this.TelephoneField == null)) {
                        this.TelephoneField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.TelephoneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Fax {
            get {
                if ((this.FaxField == null)) {
                    this.FaxField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.FaxField;
            }
            set {
                if ((value == null)) {
                    this.FaxField = null;
                }
                else {
                    if ((this.FaxField == null)) {
                        this.FaxField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.FaxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> X400 {
            get {
                if ((this.X400Field == null)) {
                    this.X400Field = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.X400Field;
            }
            set {
                if ((value == null)) {
                    this.X400Field = null;
                }
                else {
                    if ((this.X400Field == null)) {
                        this.X400Field = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.X400Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<System.Uri> URI {
            get {
                if ((this.URIField == null)) {
                    this.URIField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.URIField;
            }
            set {
                if ((value == null)) {
                    this.URIField = null;
                }
                else {
                    if ((this.URIField == null)) {
                        this.URIField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.URIField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Email {
            get {
                if ((this.EmailField == null)) {
                    this.EmailField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                }
                return this.EmailField;
            }
            set {
                if ((value == null)) {
                    this.EmailField = null;
                }
                else {
                    if ((this.EmailField == null)) {
                        this.EmailField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.EmailField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContactType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContactType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Provides a union type of xs:date and xs:dateTime for the header fields in the message.
    /// </para>
    /// </summary>
    public sealed class HeaderTimeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), null)});
        
        private HeaderTimeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// StructureType defines the contents of a structure message.
    /// </para>
    /// </summary>
    public partial class Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StructureType ContentField;
        
         public static explicit operator Structure(XElement xe) { return XTypedServices.ToXTypedElement<Structure, StructureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// StructureType defines the contents of a structure message.
        /// </para>
        /// </summary>
        public Structure() {
            SetInnerType(new StructureType());
        }
        
        /// <summary>
        /// <para>
        /// StructureType defines the contents of a structure message.
        /// </para>
        /// </summary>
        public Structure(StructureType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public StructureType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, Agencies?, CodeLists?, Concepts?, KeyFamilies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.AgenciesType Agencies {
            get {
                return this.ContentField.Agencies;
            }
            set {
                this.ContentField.Agencies = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, Agencies?, CodeLists?, Concepts?, KeyFamilies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.CodeListsType CodeLists {
            get {
                return this.ContentField.CodeLists;
            }
            set {
                this.ContentField.CodeLists = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, Agencies?, CodeLists?, Concepts?, KeyFamilies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.ConceptsType Concepts {
            get {
                return this.ContentField.Concepts;
            }
            set {
                this.ContentField.Concepts = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, Agencies?, CodeLists?, Concepts?, KeyFamilies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure.KeyFamiliesType KeyFamilies {
            get {
                return this.ContentField.KeyFamilies;
            }
            set {
                this.ContentField.KeyFamilies = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Structure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Structure Load(string xmlFile) {
            return XTypedServices.Load<Structure, StructureType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Structure Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Structure, StructureType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Structure Parse(string xml) {
            return XTypedServices.Parse<Structure, StructureType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Structure(((StructureType)(this.Content.Clone())));
        }
        
        private void SetInnerType(StructureType ContentField) {
            this.ContentField = ((StructureType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GenericDataType defines the contents of a GenericData message.
    /// </para>
    /// </summary>
    public partial class GenericData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GenericDataType ContentField;
        
         public static explicit operator GenericData(XElement xe) { return XTypedServices.ToXTypedElement<GenericData, GenericDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GenericDataType defines the contents of a GenericData message.
        /// </para>
        /// </summary>
        public GenericData() {
            SetInnerType(new GenericDataType());
        }
        
        /// <summary>
        /// <para>
        /// GenericDataType defines the contents of a GenericData message.
        /// </para>
        /// </summary>
        public GenericData(GenericDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public GenericDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSetType DataSet {
            get {
                return this.ContentField.DataSet;
            }
            set {
                this.ContentField.DataSet = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GenericData", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericData Load(string xmlFile) {
            return XTypedServices.Load<GenericData, GenericDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericData, GenericDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericData Parse(string xml) {
            return XTypedServices.Parse<GenericData, GenericDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericData(((GenericDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GenericDataType ContentField) {
            this.ContentField = ((GenericDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// UtilityDataType defines the contents of a UtilityData message.
    /// </para>
    /// </summary>
    public partial class UtilityData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UtilityDataType ContentField;
        
         public static explicit operator UtilityData(XElement xe) { return XTypedServices.ToXTypedElement<UtilityData, UtilityDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// UtilityDataType defines the contents of a UtilityData message.
        /// </para>
        /// </summary>
        public UtilityData() {
            SetInnerType(new UtilityDataType());
        }
        
        /// <summary>
        /// <para>
        /// UtilityDataType defines the contents of a UtilityData message.
        /// </para>
        /// </summary>
        public UtilityData(UtilityDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UtilityDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet DataSet {
            get {
                return this.ContentField.DataSet;
            }
            set {
                this.ContentField.DataSet = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UtilityData", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UtilityData Load(string xmlFile) {
            return XTypedServices.Load<UtilityData, UtilityDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UtilityData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UtilityData, UtilityDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UtilityData Parse(string xml) {
            return XTypedServices.Parse<UtilityData, UtilityDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UtilityData(((UtilityDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UtilityDataType ContentField) {
            this.ContentField = ((UtilityDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// CompactDataType defines the contents of a CompactData message.
    /// </para>
    /// </summary>
    public partial class CompactData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CompactDataType ContentField;
        
         public static explicit operator CompactData(XElement xe) { return XTypedServices.ToXTypedElement<CompactData, CompactDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// CompactDataType defines the contents of a CompactData message.
        /// </para>
        /// </summary>
        public CompactData() {
            SetInnerType(new CompactDataType());
        }
        
        /// <summary>
        /// <para>
        /// CompactDataType defines the contents of a CompactData message.
        /// </para>
        /// </summary>
        public CompactData(CompactDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public CompactDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet DataSet {
            get {
                return this.ContentField.DataSet;
            }
            set {
                this.ContentField.DataSet = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CompactData", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CompactData Load(string xmlFile) {
            return XTypedServices.Load<CompactData, CompactDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CompactData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CompactData, CompactDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CompactData Parse(string xml) {
            return XTypedServices.Parse<CompactData, CompactDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new CompactData(((CompactDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(CompactDataType ContentField) {
            this.ContentField = ((CompactDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// CrossSectionalDataType defines the contents of a CrossSectionalData message.
    /// </para>
    /// </summary>
    public partial class CrossSectionalData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CrossSectionalDataType ContentField;
        
         public static explicit operator CrossSectionalData(XElement xe) { return XTypedServices.ToXTypedElement<CrossSectionalData, CrossSectionalDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// CrossSectionalDataType defines the contents of a CrossSectionalData message.
        /// </para>
        /// </summary>
        public CrossSectionalData() {
            SetInnerType(new CrossSectionalDataType());
        }
        
        /// <summary>
        /// <para>
        /// CrossSectionalDataType defines the contents of a CrossSectionalData message.
        /// </para>
        /// </summary>
        public CrossSectionalData(CrossSectionalDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public CrossSectionalDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet DataSet {
            get {
                return this.ContentField.DataSet;
            }
            set {
                this.ContentField.DataSet = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CrossSectionalData", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CrossSectionalData Load(string xmlFile) {
            return XTypedServices.Load<CrossSectionalData, CrossSectionalDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CrossSectionalData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CrossSectionalData, CrossSectionalDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CrossSectionalData Parse(string xml) {
            return XTypedServices.Parse<CrossSectionalData, CrossSectionalDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new CrossSectionalData(((CrossSectionalDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(CrossSectionalDataType ContentField) {
            this.ContentField = ((CrossSectionalDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// QueryMessageType defines the contents of a QueryMessage.
    /// </para>
    /// </summary>
    public partial class QueryMessage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private QueryMessageType ContentField;
        
         public static explicit operator QueryMessage(XElement xe) { return XTypedServices.ToXTypedElement<QueryMessage, QueryMessageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// QueryMessageType defines the contents of a QueryMessage.
        /// </para>
        /// </summary>
        public QueryMessage() {
            SetInnerType(new QueryMessageType());
        }
        
        /// <summary>
        /// <para>
        /// QueryMessageType defines the contents of a QueryMessage.
        /// </para>
        /// </summary>
        public QueryMessage(QueryMessageType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public QueryMessageType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, Query)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.query.QueryType Query {
            get {
                return this.ContentField.Query;
            }
            set {
                this.ContentField.Query = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static QueryMessage Load(string xmlFile) {
            return XTypedServices.Load<QueryMessage, QueryMessageType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static QueryMessage Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<QueryMessage, QueryMessageType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static QueryMessage Parse(string xml) {
            return XTypedServices.Parse<QueryMessage, QueryMessageType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new QueryMessage(((QueryMessageType)(this.Content.Clone())));
        }
        
        private void SetInnerType(QueryMessageType ContentField) {
            this.ContentField = ((QueryMessageType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// MessageGroupType defines the contents of a MessageGroup message.
    /// </para>
    /// </summary>
    public partial class MessageGroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MessageGroupType ContentField;
        
         public static explicit operator MessageGroup(XElement xe) { return XTypedServices.ToXTypedElement<MessageGroup, MessageGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// MessageGroupType defines the contents of a MessageGroup message.
        /// </para>
        /// </summary>
        public MessageGroup() {
            SetInnerType(new MessageGroupType());
        }
        
        /// <summary>
        /// <para>
        /// MessageGroupType defines the contents of a MessageGroup message.
        /// </para>
        /// </summary>
        public MessageGroup(MessageGroupType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public MessageGroupType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.generic.DataSet> DataSet {
            get {
                return this.ContentField.DataSet;
            }
            set {
                this.ContentField.DataSet = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility.DataSet> DataSet1 {
            get {
                return this.ContentField.DataSet1;
            }
            set {
                this.ContentField.DataSet1 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact.DataSet> DataSet2 {
            get {
                return this.ContentField.DataSet2;
            }
            set {
                this.ContentField.DataSet2 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.cross.DataSet> DataSet3 {
            get {
                return this.ContentField.DataSet3;
            }
            set {
                this.ContentField.DataSet3 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                return this.ContentField.id;
            }
            set {
                this.ContentField.id = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MessageGroup Load(string xmlFile) {
            return XTypedServices.Load<MessageGroup, MessageGroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MessageGroup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MessageGroup, MessageGroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MessageGroup Parse(string xml) {
            return XTypedServices.Parse<MessageGroup, MessageGroupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MessageGroup(((MessageGroupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(MessageGroupType ContentField) {
            this.ContentField = ((MessageGroupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// HeaderType defines the header fields used for all messages. ID identifies a data flow definition, which, when combined with time, uniquely identifies the data set. Test indicates whather the message is for test purposes or not. Truncated is used in data messages which are responding to Query messages, and is set to true only if the response has been truncated to meet size limits suggested by the defaultLimit attribute in the Query mesage.  Name provides a name for the transmission. Prepared is the date prepared. Sender is information about the sender, and Receiver is information about the receiver. Agency provides the code identifier/abbreviation for the maintenance agency of a data set. Data set id provides an identifier for a contained data set. Action code provides a code for determining whether the enclosed message is an Update or Delete message (not to be used with the UtilityData message). KeyFamilyRef is used to reference a key family for a contained data set, using its id. (This information is required at the DataSet level for some messages, but is provided here as a convenience for those messages which do not require it.) KeyFamilyAgency specifies the agency of the key family using its coded id.  Fields which refer to a contained data set need not be used if the message contains a query or structural information - these messages provide specific fields for holding this information. The ones here are not to be used as defaults. Extracted is a time-stamp from the system rendering the data; ReportingBegin and ReportingEnd provide the time period covered by the message (in the case of data). Source provides human-readable information about the source of the data.
    /// </para>
    /// </summary>
    public partial class Header : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HeaderType ContentField;
        
         public static explicit operator Header(XElement xe) { return XTypedServices.ToXTypedElement<Header, HeaderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// HeaderType defines the header fields used for all messages. ID identifies a data flow definition, which, when combined with time, uniquely identifies the data set. Test indicates whather the message is for test purposes or not. Truncated is used in data messages which are responding to Query messages, and is set to true only if the response has been truncated to meet size limits suggested by the defaultLimit attribute in the Query mesage.  Name provides a name for the transmission. Prepared is the date prepared. Sender is information about the sender, and Receiver is information about the receiver. Agency provides the code identifier/abbreviation for the maintenance agency of a data set. Data set id provides an identifier for a contained data set. Action code provides a code for determining whether the enclosed message is an Update or Delete message (not to be used with the UtilityData message). KeyFamilyRef is used to reference a key family for a contained data set, using its id. (This information is required at the DataSet level for some messages, but is provided here as a convenience for those messages which do not require it.) KeyFamilyAgency specifies the agency of the key family using its coded id.  Fields which refer to a contained data set need not be used if the message contains a query or structural information - these messages provide specific fields for holding this information. The ones here are not to be used as defaults. Extracted is a time-stamp from the system rendering the data; ReportingBegin and ReportingEnd provide the time period covered by the message (in the case of data). Source provides human-readable information about the source of the data.
        /// </para>
        /// </summary>
        public Header() {
            SetInnerType(new HeaderType());
        }
        
        /// <summary>
        /// <para>
        /// HeaderType defines the header fields used for all messages. ID identifies a data flow definition, which, when combined with time, uniquely identifies the data set. Test indicates whather the message is for test purposes or not. Truncated is used in data messages which are responding to Query messages, and is set to true only if the response has been truncated to meet size limits suggested by the defaultLimit attribute in the Query mesage.  Name provides a name for the transmission. Prepared is the date prepared. Sender is information about the sender, and Receiver is information about the receiver. Agency provides the code identifier/abbreviation for the maintenance agency of a data set. Data set id provides an identifier for a contained data set. Action code provides a code for determining whether the enclosed message is an Update or Delete message (not to be used with the UtilityData message). KeyFamilyRef is used to reference a key family for a contained data set, using its id. (This information is required at the DataSet level for some messages, but is provided here as a convenience for those messages which do not require it.) KeyFamilyAgency specifies the agency of the key family using its coded id.  Fields which refer to a contained data set need not be used if the message contains a query or structural information - these messages provide specific fields for holding this information. The ones here are not to be used as defaults. Extracted is a time-stamp from the system rendering the data; ReportingBegin and ReportingEnd provide the time period covered by the message (in the case of data). Source provides human-readable information about the source of the data.
        /// </para>
        /// </summary>
        public Header(HeaderType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public HeaderType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public bool Test {
            get {
                return this.ContentField.Test;
            }
            set {
                this.ContentField.Test = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> Truncated {
            get {
                return this.ContentField.Truncated;
            }
            set {
                this.ContentField.Truncated = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Name {
            get {
                return this.ContentField.Name;
            }
            set {
                this.ContentField.Name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object Prepared {
            get {
                return this.ContentField.Prepared;
            }
            set {
                this.ContentField.Prepared = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public PartyType Sender {
            get {
                return this.ContentField.Sender;
            }
            set {
                this.ContentField.Sender = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<PartyType> Receiver {
            get {
                return this.ContentField.Receiver;
            }
            set {
                this.ContentField.Receiver = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string KeyFamilyRef {
            get {
                return this.ContentField.KeyFamilyRef;
            }
            set {
                this.ContentField.KeyFamilyRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string KeyFamilyAgency {
            get {
                return this.ContentField.KeyFamilyAgency;
            }
            set {
                this.ContentField.KeyFamilyAgency = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetAgency {
            get {
                return this.ContentField.DataSetAgency;
            }
            set {
                this.ContentField.DataSetAgency = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetID {
            get {
                return this.ContentField.DataSetID;
            }
            set {
                this.ContentField.DataSetID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetAction {
            get {
                return this.ContentField.DataSetAction;
            }
            set {
                this.ContentField.DataSetAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> Extracted {
            get {
                return this.ContentField.Extracted;
            }
            set {
                this.ContentField.Extracted = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object ReportingBegin {
            get {
                return this.ContentField.ReportingBegin;
            }
            set {
                this.ContentField.ReportingBegin = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object ReportingEnd {
            get {
                return this.ContentField.ReportingEnd;
            }
            set {
                this.ContentField.ReportingEnd = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Source {
            get {
                return this.ContentField.Source;
            }
            set {
                this.ContentField.Source = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Header Load(string xmlFile) {
            return XTypedServices.Load<Header, HeaderType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Header Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Header, HeaderType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Header Parse(string xml) {
            return XTypedServices.Parse<Header, HeaderType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Header(((HeaderType)(this.Content.Clone())));
        }
        
        private void SetInnerType(HeaderType ContentField) {
            this.ContentField = ((HeaderType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public Structure Structure {  get {return rootObject as Structure; } }

    public GenericData GenericData {  get {return rootObject as GenericData; } }

    public UtilityData UtilityData {  get {return rootObject as UtilityData; } }

    public CompactData CompactData {  get {return rootObject as CompactData; } }

    public CrossSectionalData CrossSectionalData {  get {return rootObject as CrossSectionalData; } }

    public QueryMessage QueryMessage {  get {return rootObject as QueryMessage; } }

    public MessageGroup MessageGroup {  get {return rootObject as MessageGroup; } }

    public Header Header {  get {return rootObject as Header; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Structure root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UtilityData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CompactData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CrossSectionalData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(QueryMessage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MessageGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Header root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V10.structure {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact;
    
    
    /// <summary>
    /// <para>
    /// AgenciesType contains one or more Agencies.
    /// </para>
    /// <para>
    /// Regular expression: (Agency+)
    /// </para>
    /// </summary>
    public partial class AgenciesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AgencyType> AgencyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AgenciesType(XElement xe) { return XTypedServices.ToXTypedElement<AgenciesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AgenciesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// AgenciesType contains one or more Agencies.
        /// </para>
        /// <para>
        /// Regular expression: (Agency+)
        /// </para>
        /// </summary>
        public AgenciesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Agency+)
        /// </para>
        /// </summary>
        public IList<AgencyType> Agency {
            get {
                if ((this.AgencyField == null)) {
                    this.AgencyField = new XTypedList<AgencyType>(this, LinqToXsdTypeManager.Instance, XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.AgencyField;
            }
            set {
                if ((value == null)) {
                    this.AgencyField = null;
                }
                else {
                    if ((this.AgencyField == null)) {
                        this.AgencyField = XTypedList<AgencyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<AgencyType>(this.AgencyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AgenciesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AgenciesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(AgencyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// AgencyType provides a structure for describing agencies and their contact information. The id attribute carries a code identifying the agency. The version attribute indicates the version of the agency description. The uri attribute provides a uri for an alternate way of identifying the agency information (typically a URL resolving to an agency described in SDMX-ML). Name is an element which provides for a human-readable name for the organization. MaintenanceContact provides contact information for the agency when acting as a MaintenanceAgency; CollectorContact does the same when the agency is acting as a statistics collector; DisseminatorContact for when the agency functions as a statistics disseminator; and ReporterContact for when the Agency is functioning as a statistics reporter. OtherContact is used to describe any other role. Note that the Role field in the contact information structure should only be specified for OtherContact. It is allowable to reference full Agency information by using (at a minimum) only the id, name, and uri fields, with the uri pointing to an external description in a valid SDMX-ML Structure message which provides more complete information. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to “true”.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*)
    /// </para>
    /// </summary>
    public partial class AgencyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContactType> OtherContactField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AgencyType(XElement xe) { return XTypedServices.ToXTypedElement<AgencyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AgencyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("MaintenanceContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("CollectorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("DisseminatorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("ReporterContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("OtherContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// AgencyType provides a structure for describing agencies and their contact information. The id attribute carries a code identifying the agency. The version attribute indicates the version of the agency description. The uri attribute provides a uri for an alternate way of identifying the agency information (typically a URL resolving to an agency described in SDMX-ML). Name is an element which provides for a human-readable name for the organization. MaintenanceContact provides contact information for the agency when acting as a MaintenanceAgency; CollectorContact does the same when the agency is acting as a statistics collector; DisseminatorContact for when the agency functions as a statistics disseminator; and ReporterContact for when the Agency is functioning as a statistics reporter. OtherContact is used to describe any other role. Note that the Role field in the contact information structure should only be specified for OtherContact. It is allowable to reference full Agency information by using (at a minimum) only the id, name, and uri fields, with the uri pointing to an external description in a valid SDMX-ML Structure message which provides more complete information. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to “true”.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*)
        /// </para>
        /// </summary>
        public AgencyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*)
        /// </para>
        /// </summary>
        public ContactType MaintenanceContact {
            get {
                XElement x = this.GetElement(XName.Get("MaintenanceContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((ContactType)(x));
            }
            set {
                this.SetElement(XName.Get("MaintenanceContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*)
        /// </para>
        /// </summary>
        public ContactType CollectorContact {
            get {
                XElement x = this.GetElement(XName.Get("CollectorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((ContactType)(x));
            }
            set {
                this.SetElement(XName.Get("CollectorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*)
        /// </para>
        /// </summary>
        public ContactType DisseminatorContact {
            get {
                XElement x = this.GetElement(XName.Get("DisseminatorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((ContactType)(x));
            }
            set {
                this.SetElement(XName.Get("DisseminatorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*)
        /// </para>
        /// </summary>
        public ContactType ReporterContact {
            get {
                XElement x = this.GetElement(XName.Get("ReporterContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((ContactType)(x));
            }
            set {
                this.SetElement(XName.Get("ReporterContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*)
        /// </para>
        /// </summary>
        public IList<ContactType> OtherContact {
            get {
                if ((this.OtherContactField == null)) {
                    this.OtherContactField = new XTypedList<ContactType>(this, LinqToXsdTypeManager.Instance, XName.Get("OtherContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.OtherContactField;
            }
            set {
                if ((value == null)) {
                    this.OtherContactField = null;
                }
                else {
                    if ((this.OtherContactField == null)) {
                        this.OtherContactField = XTypedList<ContactType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OtherContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ContactType>(this.OtherContactField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AgencyType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AgencyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("MaintenanceContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(ContactType));
            localElementDictionary.Add(XName.Get("CollectorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(ContactType));
            localElementDictionary.Add(XName.Get("DisseminatorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(ContactType));
            localElementDictionary.Add(XName.Get("ReporterContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(ContactType));
            localElementDictionary.Add(XName.Get("OtherContact", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(ContactType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ContactType provides defines the contact information about a party. The id element is used to carry user id information for the contact, whereas Name provides a human-readable name.
    /// </para>
    /// <para>
    /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
    /// </para>
    /// </summary>
    public partial class ContactType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> DepartmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> RoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> TelephoneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> FaxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> X400Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> URIField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> EmailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ContactType(XElement xe) { return XTypedServices.ToXTypedElement<ContactType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContactType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// ContactType provides defines the contact information about a party. The id element is used to carry user id information for the contact, whereas Name provides a human-readable name.
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public ContactType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public string id {
            get {
                XElement x = this.GetElement(XName.Get("id", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElement(XName.Get("id", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Department {
            get {
                if ((this.DepartmentField == null)) {
                    this.DepartmentField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.DepartmentField;
            }
            set {
                if ((value == null)) {
                    this.DepartmentField = null;
                }
                else {
                    if ((this.DepartmentField == null)) {
                        this.DepartmentField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.DepartmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Role {
            get {
                if ((this.RoleField == null)) {
                    this.RoleField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.RoleField;
            }
            set {
                if ((value == null)) {
                    this.RoleField = null;
                }
                else {
                    if ((this.RoleField == null)) {
                        this.RoleField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.RoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Telephone {
            get {
                if ((this.TelephoneField == null)) {
                    this.TelephoneField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.TelephoneField;
            }
            set {
                if ((value == null)) {
                    this.TelephoneField = null;
                }
                else {
                    if ((this.TelephoneField == null)) {
                        this.TelephoneField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.TelephoneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Fax {
            get {
                if ((this.FaxField == null)) {
                    this.FaxField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.FaxField;
            }
            set {
                if ((value == null)) {
                    this.FaxField = null;
                }
                else {
                    if ((this.FaxField == null)) {
                        this.FaxField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.FaxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> X400 {
            get {
                if ((this.X400Field == null)) {
                    this.X400Field = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.X400Field;
            }
            set {
                if ((value == null)) {
                    this.X400Field = null;
                }
                else {
                    if ((this.X400Field == null)) {
                        this.X400Field = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.X400Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<System.Uri> URI {
            get {
                if ((this.URIField == null)) {
                    this.URIField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.URIField;
            }
            set {
                if ((value == null)) {
                    this.URIField = null;
                }
                else {
                    if ((this.URIField == null)) {
                        this.URIField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.URIField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Email {
            get {
                if ((this.EmailField == null)) {
                    this.EmailField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.EmailField;
            }
            set {
                if ((value == null)) {
                    this.EmailField = null;
                }
                else {
                    if ((this.EmailField == null)) {
                        this.EmailField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.EmailField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContactType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContactType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("id", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// CodelistsType contains one or more codelists. It also defines uniqueness constraints for codelist IDs.
    /// </para>
    /// <para>
    /// Regular expression: (CodeList*)
    /// </para>
    /// </summary>
    public partial class CodeListsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodeListType> CodeListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodeListsType(XElement xe) { return XTypedServices.ToXTypedElement<CodeListsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeListsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CodeList", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CodelistsType contains one or more codelists. It also defines uniqueness constraints for codelist IDs.
        /// </para>
        /// <para>
        /// Regular expression: (CodeList*)
        /// </para>
        /// </summary>
        public CodeListsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CodeList*)
        /// </para>
        /// </summary>
        public IList<CodeListType> CodeList {
            get {
                if ((this.CodeListField == null)) {
                    this.CodeListField = new XTypedList<CodeListType>(this, LinqToXsdTypeManager.Instance, XName.Get("CodeList", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.CodeListField;
            }
            set {
                if ((value == null)) {
                    this.CodeListField = null;
                }
                else {
                    if ((this.CodeListField == null)) {
                        this.CodeListField = XTypedList<CodeListType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CodeList", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CodeListType>(this.CodeListField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodeListsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeListsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CodeList", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(CodeListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CodeListType defines the contents of a codelist. This includes an ID, the agency which maintains the codelist, its version, and a URL where it is located. Elements are provided for supplying a name and the codes. It is acceptable to provide only the id, name, and uri fields at a minimum, with the uri pointing to an SDMX Structure message containing complete details on the codelist. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to “true”.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Code*, Annotations?)
    /// </para>
    /// </summary>
    public partial class CodeListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodeType> CodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodeListType(XElement xe) { return XTypedServices.ToXTypedElement<CodeListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Code", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CodeListType defines the contents of a codelist. This includes an ID, the agency which maintains the codelist, its version, and a URL where it is located. Elements are provided for supplying a name and the codes. It is acceptable to provide only the id, name, and uri fields at a minimum, with the uri pointing to an SDMX Structure message containing complete details on the codelist. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to “true”.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Code*, Annotations?)
        /// </para>
        /// </summary>
        public CodeListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Code*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Code*, Annotations?)
        /// </para>
        /// </summary>
        public IList<CodeType> Code {
            get {
                if ((this.CodeField == null)) {
                    this.CodeField = new XTypedList<CodeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Code", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.CodeField;
            }
            set {
                if ((value == null)) {
                    this.CodeField = null;
                }
                else {
                    if ((this.CodeField == null)) {
                        this.CodeField = XTypedList<CodeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Code", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CodeType>(this.CodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Code*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string agency {
            get {
                XAttribute x = this.Attribute(XName.Get("agency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodeListType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Code", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(CodeType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CodeType defines the structure of a code. This allows for plain-text descriptions as element content, and the coded value as the value attribute. (Short descriptions or other presentational information may be added using Annotations with an indicative type field [eg, "ShortDescription"]).
    /// </para>
    /// <para>
    /// Regular expression: (Description+, Annotations?)
    /// </para>
    /// </summary>
    public partial class CodeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodeType(XElement xe) { return XTypedServices.ToXTypedElement<CodeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CodeType defines the structure of a code. This allows for plain-text descriptions as element content, and the coded value as the value attribute. (Short descriptions or other presentational information may be added using Annotations with an indicative type field [eg, "ShortDescription"]).
        /// </para>
        /// <para>
        /// Regular expression: (Description+, Annotations?)
        /// </para>
        /// </summary>
        public CodeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Description+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description+, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string value {
            get {
                XAttribute x = this.Attribute(XName.Get("value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodeType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ConceptsType defines the structure of a set of Concepts.
    /// </para>
    /// <para>
    /// Regular expression: (Concept+)
    /// </para>
    /// </summary>
    public partial class ConceptsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConceptType> ConceptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptsType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ConceptsType defines the structure of a set of Concepts.
        /// </para>
        /// <para>
        /// Regular expression: (Concept+)
        /// </para>
        /// </summary>
        public ConceptsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Concept+)
        /// </para>
        /// </summary>
        public IList<ConceptType> Concept {
            get {
                if ((this.ConceptField == null)) {
                    this.ConceptField = new XTypedList<ConceptType>(this, LinqToXsdTypeManager.Instance, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.ConceptField;
            }
            set {
                if ((value == null)) {
                    this.ConceptField = null;
                }
                else {
                    if ((this.ConceptField == null)) {
                        this.ConceptField = XTypedList<ConceptType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ConceptType>(this.ConceptField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(ConceptType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ConceptType specifies the information provided for a single concept. This includes a name, as element content, and an ID. It is possible to use the uri field to point to the location of an SDMX-ML Structure message which contains a more detailed version of the concept. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true".
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Annotations?)
    /// </para>
    /// </summary>
    public partial class ConceptType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ConceptType specifies the information provided for a single concept. This includes a name, as element content, and an ID. It is possible to use the uri field to point to the location of an SDMX-ML Structure message which contains a more detailed version of the concept. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true".
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Annotations?)
        /// </para>
        /// </summary>
        public ConceptType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string agency {
            get {
                XAttribute x = this.Attribute(XName.Get("agency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyFamiliesType defines the structure for describing one or more key families. It also provides uniqueness constraints for each of the key family IDs.
    /// </para>
    /// <para>
    /// Regular expression: (KeyFamily+)
    /// </para>
    /// </summary>
    public partial class KeyFamiliesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<KeyFamilyType> KeyFamilyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator KeyFamiliesType(XElement xe) { return XTypedServices.ToXTypedElement<KeyFamiliesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeyFamiliesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// KeyFamiliesType defines the structure for describing one or more key families. It also provides uniqueness constraints for each of the key family IDs.
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily+)
        /// </para>
        /// </summary>
        public KeyFamiliesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily+)
        /// </para>
        /// </summary>
        public IList<KeyFamilyType> KeyFamily {
            get {
                if ((this.KeyFamilyField == null)) {
                    this.KeyFamilyField = new XTypedList<KeyFamilyType>(this, LinqToXsdTypeManager.Instance, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.KeyFamilyField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyField = null;
                }
                else {
                    if ((this.KeyFamilyField == null)) {
                        this.KeyFamilyField = XTypedList<KeyFamilyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<KeyFamilyType>(this.KeyFamilyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyFamiliesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeyFamiliesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(KeyFamilyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyFamilyType defines the structure of a key-family description. This includes the name and a set of components (attributes and dimensions) as element content, and an ID, agency, version, and the URL where located as attributes.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Components, Annotations?)
    /// </para>
    /// </summary>
    public partial class KeyFamilyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator KeyFamilyType(XElement xe) { return XTypedServices.ToXTypedElement<KeyFamilyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeyFamilyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Components", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// KeyFamilyType defines the structure of a key-family description. This includes the name and a set of components (attributes and dimensions) as element content, and an ID, agency, version, and the URL where located as attributes.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Components, Annotations?)
        /// </para>
        /// </summary>
        public KeyFamilyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Components, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Components, Annotations?)
        /// </para>
        /// </summary>
        public ComponentsType Components {
            get {
                XElement x = this.GetElement(XName.Get("Components", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((ComponentsType)(x));
            }
            set {
                this.SetElement(XName.Get("Components", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Components, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string agency {
            get {
                XAttribute x = this.Attribute(XName.Get("agency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyFamilyType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeyFamilyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Components", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(ComponentsType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ComponentsType describes the dimensions, groups, attributes, and measures of the key family. If TimeDimension is included in the key family - which it must be if time series formats for the data (GenericData, CompactData, and UtilityData formats) are to be used - then there must also be a frequency dimension. 
    /// </para>
    /// <para>
    /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
    /// </para>
    /// </summary>
    public partial class ComponentsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DimensionType> DimensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroupType> GroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CrossSectionalMeasureType> CrossSectionalMeasureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AttributeType> AttributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ComponentsType(XElement xe) { return XTypedServices.ToXTypedElement<ComponentsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ComponentsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("TimeDimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("PrimaryMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("CrossSectionalMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ComponentsType describes the dimensions, groups, attributes, and measures of the key family. If TimeDimension is included in the key family - which it must be if time series formats for the data (GenericData, CompactData, and UtilityData formats) are to be used - then there must also be a frequency dimension. 
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public ComponentsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public IList<DimensionType> Dimension {
            get {
                if ((this.DimensionField == null)) {
                    this.DimensionField = new XTypedList<DimensionType>(this, LinqToXsdTypeManager.Instance, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.DimensionField;
            }
            set {
                if ((value == null)) {
                    this.DimensionField = null;
                }
                else {
                    if ((this.DimensionField == null)) {
                        this.DimensionField = XTypedList<DimensionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<DimensionType>(this.DimensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public TimeDimensionType TimeDimension {
            get {
                XElement x = this.GetElement(XName.Get("TimeDimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((TimeDimensionType)(x));
            }
            set {
                this.SetElement(XName.Get("TimeDimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public IList<GroupType> Group {
            get {
                if ((this.GroupField == null)) {
                    this.GroupField = new XTypedList<GroupType>(this, LinqToXsdTypeManager.Instance, XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.GroupField;
            }
            set {
                if ((value == null)) {
                    this.GroupField = null;
                }
                else {
                    if ((this.GroupField == null)) {
                        this.GroupField = XTypedList<GroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<GroupType>(this.GroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public PrimaryMeasureType PrimaryMeasure {
            get {
                XElement x = this.GetElement(XName.Get("PrimaryMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((PrimaryMeasureType)(x));
            }
            set {
                this.SetElement(XName.Get("PrimaryMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public IList<CrossSectionalMeasureType> CrossSectionalMeasure {
            get {
                if ((this.CrossSectionalMeasureField == null)) {
                    this.CrossSectionalMeasureField = new XTypedList<CrossSectionalMeasureType>(this, LinqToXsdTypeManager.Instance, XName.Get("CrossSectionalMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.CrossSectionalMeasureField;
            }
            set {
                if ((value == null)) {
                    this.CrossSectionalMeasureField = null;
                }
                else {
                    if ((this.CrossSectionalMeasureField == null)) {
                        this.CrossSectionalMeasureField = XTypedList<CrossSectionalMeasureType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CrossSectionalMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CrossSectionalMeasureType>(this.CrossSectionalMeasureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public IList<AttributeType> Attribute {
            get {
                if ((this.AttributeField == null)) {
                    this.AttributeField = new XTypedList<AttributeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.AttributeField;
            }
            set {
                if ((value == null)) {
                    this.AttributeField = null;
                }
                else {
                    if ((this.AttributeField == null)) {
                        this.AttributeField = XTypedList<AttributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<AttributeType>(this.AttributeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ComponentsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ComponentsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("TimeDimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(TimeDimensionType));
            localElementDictionary.Add(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(GroupType));
            localElementDictionary.Add(XName.Get("PrimaryMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(PrimaryMeasureType));
            localElementDictionary.Add(XName.Get("CrossSectionalMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(CrossSectionalMeasureType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(AttributeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DimensionType describes the structure of non-Time dimensions. The order of their declaration is significant: it is used to describe the order in which they will appear in data formats for which key values are supplied in an ordered fashion (exclusive of the Time dimension, which is not represented as a member of the ordered key). In the case of key families which are used for cross-sectional data as well as time-series data, any "measure" dimension must have the value of the "isMeasureDimension" attribute set to "true". If a dimension is declared to be a measure dimension, it must have a measure declared elsewhere in the key family which corresponds to each value in the codelist which represents it. Any dimension which corresponds to the frequency concept must have its isFrequencyDimension attribute set to "true". There may only be one such dimension in any key family. (Conventionally, it is the first dimension in the ordered set of dimensions - the key.) If a key family describes cross-sectional data, then for each non-time dimension, the crossSectionalAttachDataSet, crossSectionalAttachGroup, crossSectionalAttachSection, and crossSectionalAttachObservation attributes must be given values. A value of "true" for any of these attributes indicates that the dimension may be provided a value at the indicated level within the cross-sectional structure. Note that these attributes do not need to be provided for any dimension with the isFrequencyDimension set to "true", as these dimensions are always attached only at the group level, as is time. A key family designed for cross-sectional use must be structured such that any observation's complete key can be unambiguously described by taking each dimension value from its observation level, section level, group level, and data set level, and ordered according to the sequence given in the key family. 
    /// </para>
    /// <para>
    /// Regular expression: (Annotations?)
    /// </para>
    /// </summary>
    public partial class DimensionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isMeasureDimensionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isFrequencyDimensionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DimensionType(XElement xe) { return XTypedServices.ToXTypedElement<DimensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DimensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// DimensionType describes the structure of non-Time dimensions. The order of their declaration is significant: it is used to describe the order in which they will appear in data formats for which key values are supplied in an ordered fashion (exclusive of the Time dimension, which is not represented as a member of the ordered key). In the case of key families which are used for cross-sectional data as well as time-series data, any "measure" dimension must have the value of the "isMeasureDimension" attribute set to "true". If a dimension is declared to be a measure dimension, it must have a measure declared elsewhere in the key family which corresponds to each value in the codelist which represents it. Any dimension which corresponds to the frequency concept must have its isFrequencyDimension attribute set to "true". There may only be one such dimension in any key family. (Conventionally, it is the first dimension in the ordered set of dimensions - the key.) If a key family describes cross-sectional data, then for each non-time dimension, the crossSectionalAttachDataSet, crossSectionalAttachGroup, crossSectionalAttachSection, and crossSectionalAttachObservation attributes must be given values. A value of "true" for any of these attributes indicates that the dimension may be provided a value at the indicated level within the cross-sectional structure. Note that these attributes do not need to be provided for any dimension with the isFrequencyDimension set to "true", as these dimensions are always attached only at the group level, as is time. A key family designed for cross-sectional use must be structured such that any observation's complete key can be unambiguously described by taking each dimension value from its observation level, section level, group level, and data set level, and ordered according to the sequence given in the key family. 
        /// </para>
        /// <para>
        /// Regular expression: (Annotations?)
        /// </para>
        /// </summary>
        public DimensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string concept {
            get {
                XAttribute x = this.Attribute(XName.Get("concept", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("concept", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string codelist {
            get {
                XAttribute x = this.Attribute(XName.Get("codelist", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelist", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isMeasureDimension {
            get {
                XAttribute x = this.Attribute(XName.Get("isMeasureDimension", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isMeasureDimensionDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isMeasureDimension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isFrequencyDimension {
            get {
                XAttribute x = this.Attribute(XName.Get("isFrequencyDimension", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isFrequencyDimensionDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isFrequencyDimension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachDataSet {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachDataSet", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachDataSet", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachGroup {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachGroup", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachGroup", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachSection {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachSection", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachSection", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachObservation {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachObservation", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachObservation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DimensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TimeDimensionType describes the special Time dimension. Any key family which will be used for time-series formats (GenericData, CompactData, and UtilityData) must include the time dimension. Any key family which uses the time dimension must also declare a frequency dimension, conventionally the first dimension in the key (the set of ordered non-time dimensions). A TextFormat element may be included for indicating the representation of time in some non-XML data formats. The concept attribute must contain the concept name of the time concept. The codelist attribute may provide the value of the concept name of a codelist if needed.
    /// </para>
    /// <para>
    /// Regular expression: (TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class TimeDimensionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TimeDimensionType(XElement xe) { return XTypedServices.ToXTypedElement<TimeDimensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TimeDimensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// TimeDimensionType describes the special Time dimension. Any key family which will be used for time-series formats (GenericData, CompactData, and UtilityData) must include the time dimension. Any key family which uses the time dimension must also declare a frequency dimension, conventionally the first dimension in the key (the set of ordered non-time dimensions). A TextFormat element may be included for indicating the representation of time in some non-XML data formats. The concept attribute must contain the concept name of the time concept. The codelist attribute may provide the value of the concept name of a codelist if needed.
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public TimeDimensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public TextFormatType TextFormat {
            get {
                XElement x = this.GetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string concept {
            get {
                XAttribute x = this.Attribute(XName.Get("concept", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("concept", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelist {
            get {
                XAttribute x = this.Attribute(XName.Get("codelist", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelist", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TimeDimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TimeDimensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType declares any useful groupings of data, based on a selection of the declared (non-Time) dimensions (indicated with the DimensionRef element) which form partial keys to which attributes may be attached. The value of the DimensionRef element is the concept of the dimension - that is, the value of the dimension's concept attribute. Thus, if data is to be presented as a set of time series which vary only according to their differing frequencies, a "sibling group" would be declared, with all dimensions except the frequency dimension in it. If data is commonly grouped as a set of all countries, then a "Country Group" could be declared, with all dimensions except the country dimension forming part of the partial key. Any dimension which is not part of a group has a value which varies at the series level (for time series formats). There is no requirement to have only a single dimension ommitted from a partial key - it can be any subset of the set of ordered dimensions (that is, all dimensions except the time dimension, which may never be declared as belonging to a group partial key). All groups declared in the key family must be unique - that is, you may not have duplicate partial keys. All groups must also be given unique names (id attributes). Although it is conventional to declare dimensions in the same order as they are declared in the ordered key, there is no requirement to do so - the ordering of the values of the key are taken from the order in which the dimensions are declared. The Description element provides a human-readable description (potentially in multiple, parallel languages) of the group. Note that for cross-sectional formats, the named group mechanism is not used, but is instead replaced by a generic group which carries time and frequency values with it, and allows for any available group-level attributes to be specified if desired. 
    /// </para>
    /// <para>
    /// Regular expression: (DimensionRef+, Description*, Annotations?)
    /// </para>
    /// </summary>
    public partial class GroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DimensionRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GroupType(XElement xe) { return XTypedServices.ToXTypedElement<GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DimensionRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// GroupType declares any useful groupings of data, based on a selection of the declared (non-Time) dimensions (indicated with the DimensionRef element) which form partial keys to which attributes may be attached. The value of the DimensionRef element is the concept of the dimension - that is, the value of the dimension's concept attribute. Thus, if data is to be presented as a set of time series which vary only according to their differing frequencies, a "sibling group" would be declared, with all dimensions except the frequency dimension in it. If data is commonly grouped as a set of all countries, then a "Country Group" could be declared, with all dimensions except the country dimension forming part of the partial key. Any dimension which is not part of a group has a value which varies at the series level (for time series formats). There is no requirement to have only a single dimension ommitted from a partial key - it can be any subset of the set of ordered dimensions (that is, all dimensions except the time dimension, which may never be declared as belonging to a group partial key). All groups declared in the key family must be unique - that is, you may not have duplicate partial keys. All groups must also be given unique names (id attributes). Although it is conventional to declare dimensions in the same order as they are declared in the ordered key, there is no requirement to do so - the ordering of the values of the key are taken from the order in which the dimensions are declared. The Description element provides a human-readable description (potentially in multiple, parallel languages) of the group. Note that for cross-sectional formats, the named group mechanism is not used, but is instead replaced by a generic group which carries time and frequency values with it, and allows for any available group-level attributes to be specified if desired. 
        /// </para>
        /// <para>
        /// Regular expression: (DimensionRef+, Description*, Annotations?)
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DimensionRef+, Description*, Annotations?)
        /// </para>
        /// </summary>
        public IList<string> DimensionRef {
            get {
                if ((this.DimensionRefField == null)) {
                    this.DimensionRefField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, XName.Get("DimensionRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.DimensionRefField;
            }
            set {
                if ((value == null)) {
                    this.DimensionRefField = null;
                }
                else {
                    if ((this.DimensionRefField == null)) {
                        this.DimensionRefField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, value, XName.Get("DimensionRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DimensionRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DimensionRef+, Description*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DimensionRef+, Description*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DimensionRef", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TextType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// AttributeType describes the structure of attributes declared in the key family. If the codelist attribute is not used, then the attribute is uncoded. You may use the TextFormat element to specify constraints on the value of the uncoded attribute. The concept attribute contains the name of a concept. The codelist attribute supplies the id value of a codelist. The attachmentLevel attribute indicates the level to which the attribute is attached in time-series formats (GenericData, CompactData, and UtilityData formats). The assignmentStatus attribute indicates whether a value must be provided for the attribute when sending documentation along with the data. The AttachmentGroup element is included only when the attribute is attached at the Group level, to indicate which declared group or groups the attribute may be attached to. For each such group, an AttachmentGroup element should appear, with the content of the element being the name of the group. The AttachmentMeasure element is similar, indicating for cross-sectional formats which declared measure or measures the attribute attached at the observation level may be attached to. The isTimeFormat attribute indicates that the attribute represents the concept of time format (typically a mandatory series-level attribute with a codelist representation taken from ISO 8601). For key families not used to structure cross-sectional formats, this element may be ommitted. Each such element contains the name of the declared measure. The attributes crossSectionalAttachDataSet, crossSectionalAttachGroup, crossSectionalAttachSection, and crossSectionalAttachObservation indicate what the attachment level or levels are for cross-sectional data formats, and may be ommitted if the key family will not be used to structure them. A value of "true" indicates that it is permissible to provide a value for the attribute at the specified level within the structure. Note that all groups in cross-sectional formats are replaced by a generic group which has any values for time and frequency, and allows any group-level attributes to be attached to it. 
    /// </para>
    /// <para>
    /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
    /// </para>
    /// </summary>
    public partial class AttributeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AttachmentGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AttachmentMeasureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isTimeFormatDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AttributeType(XElement xe) { return XTypedServices.ToXTypedElement<AttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AttributeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("AttachmentGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("AttachmentMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// AttributeType describes the structure of attributes declared in the key family. If the codelist attribute is not used, then the attribute is uncoded. You may use the TextFormat element to specify constraints on the value of the uncoded attribute. The concept attribute contains the name of a concept. The codelist attribute supplies the id value of a codelist. The attachmentLevel attribute indicates the level to which the attribute is attached in time-series formats (GenericData, CompactData, and UtilityData formats). The assignmentStatus attribute indicates whether a value must be provided for the attribute when sending documentation along with the data. The AttachmentGroup element is included only when the attribute is attached at the Group level, to indicate which declared group or groups the attribute may be attached to. For each such group, an AttachmentGroup element should appear, with the content of the element being the name of the group. The AttachmentMeasure element is similar, indicating for cross-sectional formats which declared measure or measures the attribute attached at the observation level may be attached to. The isTimeFormat attribute indicates that the attribute represents the concept of time format (typically a mandatory series-level attribute with a codelist representation taken from ISO 8601). For key families not used to structure cross-sectional formats, this element may be ommitted. Each such element contains the name of the declared measure. The attributes crossSectionalAttachDataSet, crossSectionalAttachGroup, crossSectionalAttachSection, and crossSectionalAttachObservation indicate what the attachment level or levels are for cross-sectional data formats, and may be ommitted if the key family will not be used to structure them. A value of "true" indicates that it is permissible to provide a value for the attribute at the specified level within the structure. Note that all groups in cross-sectional formats are replaced by a generic group which has any values for time and frequency, and allows any group-level attributes to be attached to it. 
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public AttributeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public TextFormatType TextFormat {
            get {
                XElement x = this.GetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public IList<string> AttachmentGroup {
            get {
                if ((this.AttachmentGroupField == null)) {
                    this.AttachmentGroupField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, XName.Get("AttachmentGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.AttachmentGroupField;
            }
            set {
                if ((value == null)) {
                    this.AttachmentGroupField = null;
                }
                else {
                    if ((this.AttachmentGroupField == null)) {
                        this.AttachmentGroupField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, value, XName.Get("AttachmentGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AttachmentGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public IList<string> AttachmentMeasure {
            get {
                if ((this.AttachmentMeasureField == null)) {
                    this.AttachmentMeasureField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, XName.Get("AttachmentMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                }
                return this.AttachmentMeasureField;
            }
            set {
                if ((value == null)) {
                    this.AttachmentMeasureField = null;
                }
                else {
                    if ((this.AttachmentMeasureField == null)) {
                        this.AttachmentMeasureField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, value, XName.Get("AttachmentMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AttachmentMeasureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string concept {
            get {
                XAttribute x = this.Attribute(XName.Get("concept", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("concept", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelist {
            get {
                XAttribute x = this.Attribute(XName.Get("codelist", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelist", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string attachmentLevel {
            get {
                XAttribute x = this.Attribute(XName.Get("attachmentLevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("attachmentLevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string assignmentStatus {
            get {
                XAttribute x = this.Attribute(XName.Get("assignmentStatus", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("assignmentStatus", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isTimeFormat {
            get {
                XAttribute x = this.Attribute(XName.Get("isTimeFormat", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isTimeFormatDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isTimeFormat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachDataSet {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachDataSet", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachDataSet", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachGroup {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachGroup", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachGroup", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachSection {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachSection", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachSection", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachObservation {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachObservation", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachObservation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttributeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("AttachmentGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("AttachmentMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class AttachmentLevelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DataSet",
                        "Group",
                        "Series",
                        "Observation"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AttachmentLevelType() {
        }
    }
    
    public sealed class AssignmentStatusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Mandatory",
                        "Conditional"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AssignmentStatusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// TextFormatType defines the information for describing a text format. If the TextType attribute is not specified, any valid characters may be included in the text field. (It corresponds to the xs:string datatype of W3C XML Schema.) In this case, the Length attribute is interpreted as a maximum length. Otherwise, length provides either maximum or set string lengths as per the TextType attribute value. The decimals attribute provides the precision (the number of decimal places) that numeric data must use. This is an integer indicating the number of digits to occur after the decimal separator ("."). If used, a missing digit in numeric data is to be interpreted as a 0. If not used, no restrictions on the number of digits provided in data exist for the purposes of exchange.
    /// </para>
    /// </summary>
    public partial class TextFormatType : XTypedElement, IXMetaData {
        
         public static explicit operator TextFormatType(XElement xe) { return XTypedServices.ToXTypedElement<TextFormatType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// TextFormatType defines the information for describing a text format. If the TextType attribute is not specified, any valid characters may be included in the text field. (It corresponds to the xs:string datatype of W3C XML Schema.) In this case, the Length attribute is interpreted as a maximum length. Otherwise, length provides either maximum or set string lengths as per the TextType attribute value. The decimals attribute provides the precision (the number of decimal places) that numeric data must use. This is an integer indicating the number of digits to occur after the decimal separator ("."). If used, a missing digit in numeric data is to be interpreted as a 0. If not used, no restrictions on the number of digits provided in data exist for the purposes of exchange.
        /// </para>
        /// </summary>
        public TextFormatType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> length {
            get {
                XAttribute x = this.Attribute(XName.Get("length", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("length", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> decimals {
            get {
                XAttribute x = this.Attribute(XName.Get("decimals", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("decimals", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TextType {
            get {
                XAttribute x = this.Attribute(XName.Get("TextType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TextType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TextFormatType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextFormatType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// TextTypeType provides an enumerated list of the types of characters allowed in a TextFormat field.
    /// </para>
    /// </summary>
    public sealed class TextTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Alpha",
                        "AlphaFixed",
                        "Num",
                        "NumFixed",
                        "AlphaNum",
                        "AlphaNumFixed"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private TextTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// PrimaryMeasureType describes the observation values for all presentations of the data, except those cross-sectional formats which have multiple measures (for which a set of cross-sectional measures are used instead). The concept attribute points to the unique concept represented by the measure. The PrimaryMeasure  is conventionally associated with the OBS-VALUE concept. 
    /// </para>
    /// <para>
    /// Regular expression: (Annotations?)
    /// </para>
    /// </summary>
    public partial class PrimaryMeasureType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PrimaryMeasureType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryMeasureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PrimaryMeasureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// PrimaryMeasureType describes the observation values for all presentations of the data, except those cross-sectional formats which have multiple measures (for which a set of cross-sectional measures are used instead). The concept attribute points to the unique concept represented by the measure. The PrimaryMeasure  is conventionally associated with the OBS-VALUE concept. 
        /// </para>
        /// <para>
        /// Regular expression: (Annotations?)
        /// </para>
        /// </summary>
        public PrimaryMeasureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string concept {
            get {
                XAttribute x = this.Attribute(XName.Get("concept", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("concept", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PrimaryMeasureType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PrimaryMeasureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CrossSectionalMeasureType describes the observation values for multiple-measure cross-sectional data formats. For non-cross sectional key families, it is not necesary to specify any cross-sectional measures.The concept attribute points to the unique concept represented by the measure. The measureDimension attribute contains the concept name of the measure dimension. The code attribute contains the value of its corresponding code in the codelist used to represent the measure dimension. A CrossSectionalMeasure must be declared for each code in the codelist used to represent the measure dimension - these will replace the primary measure for multiple-measure cross-sectional data formats.
    /// </para>
    /// <para>
    /// Regular expression: (Annotations?)
    /// </para>
    /// </summary>
    public partial class CrossSectionalMeasureType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CrossSectionalMeasureType(XElement xe) { return XTypedServices.ToXTypedElement<CrossSectionalMeasureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CrossSectionalMeasureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CrossSectionalMeasureType describes the observation values for multiple-measure cross-sectional data formats. For non-cross sectional key families, it is not necesary to specify any cross-sectional measures.The concept attribute points to the unique concept represented by the measure. The measureDimension attribute contains the concept name of the measure dimension. The code attribute contains the value of its corresponding code in the codelist used to represent the measure dimension. A CrossSectionalMeasure must be declared for each code in the codelist used to represent the measure dimension - these will replace the primary measure for multiple-measure cross-sectional data formats.
        /// </para>
        /// <para>
        /// Regular expression: (Annotations?)
        /// </para>
        /// </summary>
        public CrossSectionalMeasureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string concept {
            get {
                XAttribute x = this.Attribute(XName.Get("concept", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("concept", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string measureDimension {
            get {
                XAttribute x = this.Attribute(XName.Get("measureDimension", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("measureDimension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string code {
            get {
                XAttribute x = this.Attribute(XName.Get("code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CrossSectionalMeasureType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrossSectionalMeasureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V10.utility {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact;
    
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes and elements to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class DataSetType : XTypedElement, IXMetaData {
        
         public static explicit operator DataSetType(XElement xe) {  return (DataSetType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes and elements to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public DataSetType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is renamed and extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class GroupType : XTypedElement, IXMetaData {
        
         public static explicit operator GroupType(XElement xe) {  return (GroupType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is renamed and extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class SeriesType : XTypedElement, IXMetaData {
        
         public static explicit operator SeriesType(XElement xe) {  return (SeriesType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public SeriesType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyType describes the abstract type which defines the Key element.
    /// </para>
    /// </summary>
    public abstract partial class KeyType : XTypedElement, IXMetaData {
        
         public static explicit operator KeyType(XElement xe) {  return (KeyType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// KeyType describes the abstract type which defines the Key element.
        /// </para>
        /// </summary>
        public KeyType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class ObsType : XTypedElement, IXMetaData {
        
         public static explicit operator ObsType(XElement xe) {  return (ObsType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public ObsType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes and elements to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class DataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DataSetType ContentField;
        
         public static explicit operator DataSet(XElement xe) { return XTypedServices.ToXTypedElement<DataSet, DataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes and elements to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public DataSet() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes and elements to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public DataSet(DataSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public DataSetType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataSet Load(string xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Parse(string xml) {
            return XTypedServices.Parse<DataSet, DataSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DataSet(((DataSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DataSetType ContentField) {
            this.ContentField = ((DataSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is renamed and extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Group : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GroupType ContentField;
        
         public static explicit operator Group(XElement xe) { return XTypedServices.ToXTypedElement<Group, GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is renamed and extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Group() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is renamed and extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Group(GroupType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public GroupType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Group Load(string xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Parse(string xml) {
            return XTypedServices.Parse<Group, GroupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Group(((GroupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GroupType ContentField) {
            this.ContentField = ((GroupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Series : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SeriesType ContentField;
        
         public static explicit operator Series(XElement xe) { return XTypedServices.ToXTypedElement<Series, SeriesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Series() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Series(SeriesType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public SeriesType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Series Load(string xmlFile) {
            return XTypedServices.Load<Series, SeriesType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Series Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Series, SeriesType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Series Parse(string xml) {
            return XTypedServices.Parse<Series, SeriesType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Series(((SeriesType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SeriesType ContentField) {
            this.ContentField = ((SeriesType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyType describes the abstract type which defines the Key element.
    /// </para>
    /// </summary>
    public partial class Key : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private KeyType ContentField;
        
         public static explicit operator Key(XElement xe) { return XTypedServices.ToXTypedElement<Key, KeyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// KeyType describes the abstract type which defines the Key element.
        /// </para>
        /// </summary>
        public Key() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// KeyType describes the abstract type which defines the Key element.
        /// </para>
        /// </summary>
        public Key(KeyType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public KeyType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Key", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Key Load(string xmlFile) {
            return XTypedServices.Load<Key, KeyType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Key Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Key, KeyType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Key Parse(string xml) {
            return XTypedServices.Parse<Key, KeyType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Key(((KeyType)(this.Content.Clone())));
        }
        
        private void SetInnerType(KeyType ContentField) {
            this.ContentField = ((KeyType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Obs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObsType ContentField;
        
         public static explicit operator Obs(XElement xe) { return XTypedServices.ToXTypedElement<Obs, ObsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Obs() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Obs(ObsType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ObsType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Obs Load(string xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Parse(string xml) {
            return XTypedServices.Parse<Obs, ObsType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Obs(((ObsType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ObsType ContentField) {
            this.ContentField = ((ObsType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public DataSet DataSet {  get {return rootObject as DataSet; } }

    public Group Group {  get {return rootObject as Group; } }

    public Series Series {  get {return rootObject as Series; } }

    public Key Key {  get {return rootObject as Key; } }

    public Obs Obs {  get {return rootObject as Obs; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Series root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Key root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V10.query {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V10.compact;
    
    
    /// <summary>
    /// <para>
    /// The Query element is a top-level element for this namespace, which is referenced by the SDMX message envelope, or could be put inside another envelope, such as SOAP. It contains a query. The defaultLimit attribute is the suggested maximum response size in kilobytes.
    /// </para>
    /// <para>
    /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
    /// </para>
    /// </summary>
    public partial class QueryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataWhereType> DataWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<KeyFamilyWhereType> KeyFamilyWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistWhereType> CodelistWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConceptWhereType> ConceptWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AgencyWhereType> AgencyWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QueryType(XElement xe) { return XTypedServices.ToXTypedElement<QueryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("KeyFamilyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("CodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("ConceptWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("AgencyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The Query element is a top-level element for this namespace, which is referenced by the SDMX message envelope, or could be put inside another envelope, such as SOAP. It contains a query. The defaultLimit attribute is the suggested maximum response size in kilobytes.
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public QueryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public IList<DataWhereType> DataWhere {
            get {
                if ((this.DataWhereField == null)) {
                    this.DataWhereField = new XTypedList<DataWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.DataWhereField;
            }
            set {
                if ((value == null)) {
                    this.DataWhereField = null;
                }
                else {
                    if ((this.DataWhereField == null)) {
                        this.DataWhereField = XTypedList<DataWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<DataWhereType>(this.DataWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public IList<KeyFamilyWhereType> KeyFamilyWhere {
            get {
                if ((this.KeyFamilyWhereField == null)) {
                    this.KeyFamilyWhereField = new XTypedList<KeyFamilyWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("KeyFamilyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.KeyFamilyWhereField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyWhereField = null;
                }
                else {
                    if ((this.KeyFamilyWhereField == null)) {
                        this.KeyFamilyWhereField = XTypedList<KeyFamilyWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("KeyFamilyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<KeyFamilyWhereType>(this.KeyFamilyWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public IList<CodelistWhereType> CodelistWhere {
            get {
                if ((this.CodelistWhereField == null)) {
                    this.CodelistWhereField = new XTypedList<CodelistWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("CodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.CodelistWhereField;
            }
            set {
                if ((value == null)) {
                    this.CodelistWhereField = null;
                }
                else {
                    if ((this.CodelistWhereField == null)) {
                        this.CodelistWhereField = XTypedList<CodelistWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CodelistWhereType>(this.CodelistWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public IList<ConceptWhereType> ConceptWhere {
            get {
                if ((this.ConceptWhereField == null)) {
                    this.ConceptWhereField = new XTypedList<ConceptWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("ConceptWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.ConceptWhereField;
            }
            set {
                if ((value == null)) {
                    this.ConceptWhereField = null;
                }
                else {
                    if ((this.ConceptWhereField == null)) {
                        this.ConceptWhereField = XTypedList<ConceptWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ConceptWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<ConceptWhereType>(this.ConceptWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public IList<AgencyWhereType> AgencyWhere {
            get {
                if ((this.AgencyWhereField == null)) {
                    this.AgencyWhereField = new XTypedList<AgencyWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("AgencyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.AgencyWhereField;
            }
            set {
                if ((value == null)) {
                    this.AgencyWhereField = null;
                }
                else {
                    if ((this.AgencyWhereField == null)) {
                        this.AgencyWhereField = XTypedList<AgencyWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AgencyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AgencyWhereType>(this.AgencyWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> defaultLimit {
            get {
                XAttribute x = this.Attribute(XName.Get("defaultLimit", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("defaultLimit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(DataWhereType));
            localElementDictionary.Add(XName.Get("KeyFamilyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(KeyFamilyWhereType));
            localElementDictionary.Add(XName.Get("CodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CodelistWhereType));
            localElementDictionary.Add(XName.Get("ConceptWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(ConceptWhereType));
            localElementDictionary.Add(XName.Get("AgencyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AgencyWhereType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The DataWhere element representes a query for data. It contains all of the clauses in that query, represented by its child elements.
    /// </para>
    /// <para>
    /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
    /// </para>
    /// </summary>
    public partial class DataWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataWhereType(XElement xe) { return XTypedServices.ToXTypedElement<DataWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The DataWhere element representes a query for data. It contains all of the clauses in that query, represented by its child elements.
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public DataWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public string DataSet {
            get {
                XElement x = this.GetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public string KeyFamily {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public DimensionType Dimension {
            get {
                XElement x = this.GetElement(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((DimensionType)(x));
            }
            set {
                this.SetElement(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public AttributeType Attribute {
            get {
                XElement x = this.GetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((AttributeType)(x));
            }
            set {
                this.SetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public CodelistType Codelist {
            get {
                XElement x = this.GetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((CodelistType)(x));
            }
            set {
                this.SetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public TimeType Time {
            get {
                XElement x = this.GetElement(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((TimeType)(x));
            }
            set {
                this.SetElement(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public CategoryType Category {
            get {
                XElement x = this.GetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((CategoryType)(x));
            }
            set {
                this.SetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public string Concept {
            get {
                XElement x = this.GetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public string Agency {
            get {
                XElement x = this.GetElement(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public OrType Or {
            get {
                XElement x = this.GetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((OrType)(x));
            }
            set {
                this.SetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public AndType And {
            get {
                XElement x = this.GetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((AndType)(x));
            }
            set {
                this.SetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AttributeType));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(TimeType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  For the And element, each of its immediate child elements represent clauses all of which represent conditions which must be satisfied. If children are A, B, and C, then any legitimate response will meet conditions A, B, and C.
    /// </para>
    /// <para>
    /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
    /// </para>
    /// </summary>
    public partial class AndType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> KeyFamilyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DimensionType> DimensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AttributeType> AttributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistType> CodelistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TimeType> TimeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ConceptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AgencyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrType> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AndType> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AndType(XElement xe) { return XTypedServices.ToXTypedElement<AndType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AndType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")));
        }
        
        /// <summary>
        /// <para>
        ///  For the And element, each of its immediate child elements represent clauses all of which represent conditions which must be satisfied. If children are A, B, and C, then any legitimate response will meet conditions A, B, and C.
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public AndType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> DataSet {
            get {
                if ((this.DataSetField == null)) {
                    this.DataSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.DataSetField;
            }
            set {
                if ((value == null)) {
                    this.DataSetField = null;
                }
                else {
                    if ((this.DataSetField == null)) {
                        this.DataSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> KeyFamily {
            get {
                if ((this.KeyFamilyField == null)) {
                    this.KeyFamilyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.KeyFamilyField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyField = null;
                }
                else {
                    if ((this.KeyFamilyField == null)) {
                        this.KeyFamilyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.KeyFamilyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<DimensionType> Dimension {
            get {
                if ((this.DimensionField == null)) {
                    this.DimensionField = new XTypedList<DimensionType>(this, LinqToXsdTypeManager.Instance, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.DimensionField;
            }
            set {
                if ((value == null)) {
                    this.DimensionField = null;
                }
                else {
                    if ((this.DimensionField == null)) {
                        this.DimensionField = XTypedList<DimensionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<DimensionType>(this.DimensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<AttributeType> Attribute {
            get {
                if ((this.AttributeField == null)) {
                    this.AttributeField = new XTypedList<AttributeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.AttributeField;
            }
            set {
                if ((value == null)) {
                    this.AttributeField = null;
                }
                else {
                    if ((this.AttributeField == null)) {
                        this.AttributeField = XTypedList<AttributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AttributeType>(this.AttributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<CodelistType> Codelist {
            get {
                if ((this.CodelistField == null)) {
                    this.CodelistField = new XTypedList<CodelistType>(this, LinqToXsdTypeManager.Instance, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.CodelistField;
            }
            set {
                if ((value == null)) {
                    this.CodelistField = null;
                }
                else {
                    if ((this.CodelistField == null)) {
                        this.CodelistField = XTypedList<CodelistType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CodelistType>(this.CodelistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<TimeType> Time {
            get {
                if ((this.TimeField == null)) {
                    this.TimeField = new XTypedList<TimeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.TimeField;
            }
            set {
                if ((value == null)) {
                    this.TimeField = null;
                }
                else {
                    if ((this.TimeField == null)) {
                        this.TimeField = XTypedList<TimeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<TimeType>(this.TimeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<CategoryType> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.CategoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Concept {
            get {
                if ((this.ConceptField == null)) {
                    this.ConceptField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.ConceptField;
            }
            set {
                if ((value == null)) {
                    this.ConceptField = null;
                }
                else {
                    if ((this.ConceptField == null)) {
                        this.ConceptField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ConceptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Agency {
            get {
                if ((this.AgencyField == null)) {
                    this.AgencyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.AgencyField;
            }
            set {
                if ((value == null)) {
                    this.AgencyField = null;
                }
                else {
                    if ((this.AgencyField == null)) {
                        this.AgencyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AgencyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<OrType> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<OrType>(this, LinqToXsdTypeManager.Instance, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<OrType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<OrType>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<AndType> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<AndType>(this, LinqToXsdTypeManager.Instance, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<AndType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AndType>(this.AndField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AndType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AndType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AttributeType));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(TimeType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The Or element's immediate children represent clauses in the query any one of which is sufficient to satisfy the query. If these children are A,  B, and C, then any result which meets condition A, or condition B, or condition C is a match for that query.
    /// </para>
    /// <para>
    /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
    /// </para>
    /// </summary>
    public partial class OrType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> KeyFamilyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DimensionType> DimensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AttributeType> AttributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistType> CodelistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TimeType> TimeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ConceptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AgencyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrType> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AndType> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrType(XElement xe) { return XTypedServices.ToXTypedElement<OrType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The Or element's immediate children represent clauses in the query any one of which is sufficient to satisfy the query. If these children are A,  B, and C, then any result which meets condition A, or condition B, or condition C is a match for that query.
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public OrType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> DataSet {
            get {
                if ((this.DataSetField == null)) {
                    this.DataSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.DataSetField;
            }
            set {
                if ((value == null)) {
                    this.DataSetField = null;
                }
                else {
                    if ((this.DataSetField == null)) {
                        this.DataSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> KeyFamily {
            get {
                if ((this.KeyFamilyField == null)) {
                    this.KeyFamilyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.KeyFamilyField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyField = null;
                }
                else {
                    if ((this.KeyFamilyField == null)) {
                        this.KeyFamilyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.KeyFamilyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<DimensionType> Dimension {
            get {
                if ((this.DimensionField == null)) {
                    this.DimensionField = new XTypedList<DimensionType>(this, LinqToXsdTypeManager.Instance, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.DimensionField;
            }
            set {
                if ((value == null)) {
                    this.DimensionField = null;
                }
                else {
                    if ((this.DimensionField == null)) {
                        this.DimensionField = XTypedList<DimensionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<DimensionType>(this.DimensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<AttributeType> Attribute {
            get {
                if ((this.AttributeField == null)) {
                    this.AttributeField = new XTypedList<AttributeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.AttributeField;
            }
            set {
                if ((value == null)) {
                    this.AttributeField = null;
                }
                else {
                    if ((this.AttributeField == null)) {
                        this.AttributeField = XTypedList<AttributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AttributeType>(this.AttributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<CodelistType> Codelist {
            get {
                if ((this.CodelistField == null)) {
                    this.CodelistField = new XTypedList<CodelistType>(this, LinqToXsdTypeManager.Instance, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.CodelistField;
            }
            set {
                if ((value == null)) {
                    this.CodelistField = null;
                }
                else {
                    if ((this.CodelistField == null)) {
                        this.CodelistField = XTypedList<CodelistType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CodelistType>(this.CodelistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<TimeType> Time {
            get {
                if ((this.TimeField == null)) {
                    this.TimeField = new XTypedList<TimeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.TimeField;
            }
            set {
                if ((value == null)) {
                    this.TimeField = null;
                }
                else {
                    if ((this.TimeField == null)) {
                        this.TimeField = XTypedList<TimeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<TimeType>(this.TimeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<CategoryType> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.CategoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Concept {
            get {
                if ((this.ConceptField == null)) {
                    this.ConceptField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.ConceptField;
            }
            set {
                if ((value == null)) {
                    this.ConceptField = null;
                }
                else {
                    if ((this.ConceptField == null)) {
                        this.ConceptField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ConceptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Agency {
            get {
                if ((this.AgencyField == null)) {
                    this.AgencyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.AgencyField;
            }
            set {
                if ((value == null)) {
                    this.AgencyField = null;
                }
                else {
                    if ((this.AgencyField == null)) {
                        this.AgencyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AgencyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<OrType> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<OrType>(this, LinqToXsdTypeManager.Instance, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<OrType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<OrType>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, KeyFamily*, Dimension*, Attribute*, Codelist*, Time*, Category*, Concept*, Agency*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<AndType> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<AndType>(this, LinqToXsdTypeManager.Instance, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<AndType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AndType>(this.AndField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AttributeType));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(TimeType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Dimension elements contain the  (single) value being searched on within the key of data set. The name attribute holds the agency-qualified ID of the dimension. If the content is empty, then the query is for any dimension with the given name. If the name attribute is not supplied, then the query is for the given key value within any dimension.
    /// </para>
    /// </summary>
    public partial class DimensionType : XTypedElement, IXMetaData {
        
         public static explicit operator DimensionType(XElement xe) { return XTypedServices.ToXTypedElement<DimensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Dimension elements contain the  (single) value being searched on within the key of data set. The name attribute holds the agency-qualified ID of the dimension. If the content is empty, then the query is for any dimension with the given name. If the name attribute is not supplied, then the query is for the given key value within any dimension.
        /// </para>
        /// </summary>
        public DimensionType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DimensionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Attribute elements contain the (single) value of an attribute being queried for. The name attribute contains the agency-qualified name of the attribute. The attachmentLevel attribute specifies the attachment level of the attribute. If the content of Attribute is empty, then the search is for the specified attribute (and attachment level). If the name attribute is not specified, then the search is on any attribute. If the attachmentLevel attribute is not specified, then the query is for an attribute at any attachment level, as the value defaults to "Any".
    /// </para>
    /// </summary>
    public partial class AttributeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string attachmentLevelDefaultValue = "Any";
        
         public static explicit operator AttributeType(XElement xe) { return XTypedServices.ToXTypedElement<AttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Attribute elements contain the (single) value of an attribute being queried for. The name attribute contains the agency-qualified name of the attribute. The attachmentLevel attribute specifies the attachment level of the attribute. If the content of Attribute is empty, then the search is for the specified attribute (and attachment level). If the name attribute is not specified, then the search is on any attribute. If the attachmentLevel attribute is not specified, then the query is for an attribute at any attachment level, as the value defaults to "Any".
        /// </para>
        /// </summary>
        public AttributeType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string attachmentLevel {
            get {
                XAttribute x = this.Attribute(XName.Get("attachmentLevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, attachmentLevelDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("attachmentLevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttributeType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// This type supplies an enumeration of attachment levels corresponding to those in the SDMX Information Model, plus a value of "Any" where the search is wildcarded.
    /// </para>
    /// </summary>
    public sealed class AttachmentLevelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DataSet",
                        "Group",
                        "Series",
                        "Observation",
                        "Any"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AttachmentLevelType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The Codelist element allows queries to specify a (single) value found within a codelist as the element content, and the agency-qualified name of the codelist being queried for in the name attribute. If no content is supplied, then the query is for the named codelist. If the name attribute is left empty, then the value is searched for in any codelist.
    /// </para>
    /// </summary>
    public partial class CodelistType : XTypedElement, IXMetaData {
        
         public static explicit operator CodelistType(XElement xe) { return XTypedServices.ToXTypedElement<CodelistType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The Codelist element allows queries to specify a (single) value found within a codelist as the element content, and the agency-qualified name of the codelist being queried for in the name attribute. If no content is supplied, then the query is for the named codelist. If the name attribute is left empty, then the value is searched for in any codelist.
        /// </para>
        /// </summary>
        public CodelistType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodelistType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodelistType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The Category element allows for a search to be made on the values within a specific category, which is specified (in agency-qualified form) with the name attribute. If there is no element content, then the search is for the named Category; if the name is not supplied, then the category value supplied as content should be sought-for in all available categories.
    /// </para>
    /// </summary>
    public partial class CategoryType : XTypedElement, IXMetaData {
        
         public static explicit operator CategoryType(XElement xe) { return XTypedServices.ToXTypedElement<CategoryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The Category element allows for a search to be made on the values within a specific category, which is specified (in agency-qualified form) with the name attribute. If there is no element content, then the search is for the named Category; if the name is not supplied, then the category value supplied as content should be sought-for in all available categories.
        /// </para>
        /// </summary>
        public CategoryType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string agency {
            get {
                XAttribute x = this.Attribute(XName.Get("agency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategoryType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategoryType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The KeyFamilyWhere element representes a query for a key family or key families. It contains all of the clauses in that query, represented by its child elements.
    /// </para>
    /// <para>
    /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
    /// </para>
    /// </summary>
    public partial class KeyFamilyWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator KeyFamilyWhereType(XElement xe) { return XTypedServices.ToXTypedElement<KeyFamilyWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeyFamilyWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The KeyFamilyWhere element representes a query for a key family or key families. It contains all of the clauses in that query, represented by its child elements.
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public KeyFamilyWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public string KeyFamily {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public DimensionType Dimension {
            get {
                XElement x = this.GetElement(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((DimensionType)(x));
            }
            set {
                this.SetElement(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public AttributeType Attribute {
            get {
                XElement x = this.GetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((AttributeType)(x));
            }
            set {
                this.SetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public CodelistType Codelist {
            get {
                XElement x = this.GetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((CodelistType)(x));
            }
            set {
                this.SetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public CategoryType Category {
            get {
                XElement x = this.GetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((CategoryType)(x));
            }
            set {
                this.SetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public string Concept {
            get {
                XElement x = this.GetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public string Agency {
            get {
                XElement x = this.GetElement(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public OrType Or {
            get {
                XElement x = this.GetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((OrType)(x));
            }
            set {
                this.SetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public AndType And {
            get {
                XElement x = this.GetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((AndType)(x));
            }
            set {
                this.SetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyFamilyWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeyFamilyWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AttributeType));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The CodelistWhere element representes a query for a codelist or codelists. It contains all of the clauses in that query, represented by its child elements.
    /// </para>
    /// <para>
    /// Regular expression: (Codelist | Agency | Or | And)
    /// </para>
    /// </summary>
    public partial class CodelistWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodelistWhereType(XElement xe) { return XTypedServices.ToXTypedElement<CodelistWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodelistWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The CodelistWhere element representes a query for a codelist or codelists. It contains all of the clauses in that query, represented by its child elements.
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | Agency | Or | And)
        /// </para>
        /// </summary>
        public CodelistWhereType() {
        }
        
        public CodelistWhereType(CodelistType Codelist) {
            this.Codelist = Codelist;
        }
        
        public CodelistWhereType(string Agency) {
            this.Agency = Agency;
        }
        
        public CodelistWhereType(OrType Or) {
            this.Or = Or;
        }
        
        public CodelistWhereType(AndType And) {
            this.And = And;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | Agency | Or | And)
        /// </para>
        /// </summary>
        public CodelistType Codelist {
            get {
                XElement x = this.GetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((CodelistType)(x));
            }
            set {
                this.SetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | Agency | Or | And)
        /// </para>
        /// </summary>
        public string Agency {
            get {
                XElement x = this.GetElement(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | Agency | Or | And)
        /// </para>
        /// </summary>
        public OrType Or {
            get {
                XElement x = this.GetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((OrType)(x));
            }
            set {
                this.SetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | Agency | Or | And)
        /// </para>
        /// </summary>
        public AndType And {
            get {
                XElement x = this.GetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((AndType)(x));
            }
            set {
                this.SetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodelistWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodelistWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The ConceptWhere element representes a query for a concept or concepts. It contains all of the clauses in that query, represented by its child elements.
    /// </para>
    /// <para>
    /// Regular expression: (Concept | Agency | Or | And)
    /// </para>
    /// </summary>
    public partial class ConceptWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptWhereType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The ConceptWhere element representes a query for a concept or concepts. It contains all of the clauses in that query, represented by its child elements.
        /// </para>
        /// <para>
        /// Regular expression: (Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public ConceptWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public string Concept {
            get {
                XElement x = this.GetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public string Agency {
            get {
                XElement x = this.GetElement(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public OrType Or {
            get {
                XElement x = this.GetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((OrType)(x));
            }
            set {
                this.SetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Concept | Agency | Or | And)
        /// </para>
        /// </summary>
        public AndType And {
            get {
                XElement x = this.GetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return ((AndType)(x));
            }
            set {
                this.SetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The AgencyWhere element representes a query for details for an Agency. It contains all of the clauses in that query, represented by its child elements.
    /// </para>
    /// <para>
    /// Regular expression: (DataSet* | KeyFamily* | Codelist* | Category* | Concept* | Agency* | Or* | And*)
    /// </para>
    /// </summary>
    public partial class AgencyWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> KeyFamilyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistType> CodelistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ConceptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AgencyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrType> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AndType> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AgencyWhereType(XElement xe) { return XTypedServices.ToXTypedElement<AgencyWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AgencyWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The AgencyWhere element representes a query for details for an Agency. It contains all of the clauses in that query, represented by its child elements.
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | KeyFamily* | Codelist* | Category* | Concept* | Agency* | Or* | And*)
        /// </para>
        /// </summary>
        public AgencyWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | KeyFamily* | Codelist* | Category* | Concept* | Agency* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> DataSet {
            get {
                if ((this.DataSetField == null)) {
                    this.DataSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.DataSetField;
            }
            set {
                if ((value == null)) {
                    this.DataSetField = null;
                }
                else {
                    if ((this.DataSetField == null)) {
                        this.DataSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | KeyFamily* | Codelist* | Category* | Concept* | Agency* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> KeyFamily {
            get {
                if ((this.KeyFamilyField == null)) {
                    this.KeyFamilyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.KeyFamilyField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyField = null;
                }
                else {
                    if ((this.KeyFamilyField == null)) {
                        this.KeyFamilyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.KeyFamilyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | KeyFamily* | Codelist* | Category* | Concept* | Agency* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<CodelistType> Codelist {
            get {
                if ((this.CodelistField == null)) {
                    this.CodelistField = new XTypedList<CodelistType>(this, LinqToXsdTypeManager.Instance, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.CodelistField;
            }
            set {
                if ((value == null)) {
                    this.CodelistField = null;
                }
                else {
                    if ((this.CodelistField == null)) {
                        this.CodelistField = XTypedList<CodelistType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CodelistType>(this.CodelistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | KeyFamily* | Codelist* | Category* | Concept* | Agency* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<CategoryType> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.CategoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | KeyFamily* | Codelist* | Category* | Concept* | Agency* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> Concept {
            get {
                if ((this.ConceptField == null)) {
                    this.ConceptField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.ConceptField;
            }
            set {
                if ((value == null)) {
                    this.ConceptField = null;
                }
                else {
                    if ((this.ConceptField == null)) {
                        this.ConceptField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ConceptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | KeyFamily* | Codelist* | Category* | Concept* | Agency* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> Agency {
            get {
                if ((this.AgencyField == null)) {
                    this.AgencyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.AgencyField;
            }
            set {
                if ((value == null)) {
                    this.AgencyField = null;
                }
                else {
                    if ((this.AgencyField == null)) {
                        this.AgencyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AgencyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | KeyFamily* | Codelist* | Category* | Concept* | Agency* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<OrType> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<OrType>(this, LinqToXsdTypeManager.Instance, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<OrType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<OrType>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | KeyFamily* | Codelist* | Category* | Concept* | Agency* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<AndType> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<AndType>(this, LinqToXsdTypeManager.Instance, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<AndType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AndType>(this.AndField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AgencyWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AgencyWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TimeType contains the time point or period for which results should be supplied. When StartTime and EndTime are used, these must be understood as inclusive.
    /// </para>
    /// <para>
    /// Regular expression: ((StartTime, EndTime?)|Time)
    /// </para>
    /// </summary>
    public partial class TimeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TimeType(XElement xe) { return XTypedServices.ToXTypedElement<TimeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TimeType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// TimeType contains the time point or period for which results should be supplied. When StartTime and EndTime are used, these must be understood as inclusive.
        /// </para>
        /// <para>
        /// Regular expression: ((StartTime, EndTime?)|Time)
        /// </para>
        /// </summary>
        public TimeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartTime, EndTime?)|Time)
        /// </para>
        /// </summary>
        public object StartTime {
            get {
                XElement x = this.GetElement(XName.Get("StartTime", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("StartTime", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, "StartTime", global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartTime, EndTime?)|Time)
        /// </para>
        /// </summary>
        public object EndTime {
            get {
                XElement x = this.GetElement(XName.Get("EndTime", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("EndTime", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, "EndTime", global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: ((StartTime, EndTime?)|Time)
        /// </para>
        /// </summary>
        public object Time {
            get {
                XElement x = this.GetElement(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), value, "Time", global::Org.Sdmx.Resources.SdmxMl.Schemas.V10.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TimeType", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TimeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("StartTime", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(object));
            localElementDictionary.Add(XName.Get("EndTime", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(object));
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query"), typeof(object));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The Query element is a top-level element for this namespace, which is referenced by the SDMX message envelope, or could be put inside another envelope, such as SOAP. It contains a query. The defaultLimit attribute is the suggested maximum response size in kilobytes.
    /// </para>
    /// </summary>
    public partial class Query : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private QueryType ContentField;
        
         public static explicit operator Query(XElement xe) { return XTypedServices.ToXTypedElement<Query, QueryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The Query element is a top-level element for this namespace, which is referenced by the SDMX message envelope, or could be put inside another envelope, such as SOAP. It contains a query. The defaultLimit attribute is the suggested maximum response size in kilobytes.
        /// </para>
        /// </summary>
        public Query() {
            SetInnerType(new QueryType());
        }
        
        /// <summary>
        /// <para>
        /// The Query element is a top-level element for this namespace, which is referenced by the SDMX message envelope, or could be put inside another envelope, such as SOAP. It contains a query. The defaultLimit attribute is the suggested maximum response size in kilobytes.
        /// </para>
        /// </summary>
        public Query(QueryType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public QueryType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public IList<DataWhereType> DataWhere {
            get {
                return this.ContentField.DataWhere;
            }
            set {
                this.ContentField.DataWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public IList<KeyFamilyWhereType> KeyFamilyWhere {
            get {
                return this.ContentField.KeyFamilyWhere;
            }
            set {
                this.ContentField.KeyFamilyWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public IList<CodelistWhereType> CodelistWhere {
            get {
                return this.ContentField.CodelistWhere;
            }
            set {
                this.ContentField.CodelistWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public IList<ConceptWhereType> ConceptWhere {
            get {
                return this.ContentField.ConceptWhere;
            }
            set {
                this.ContentField.ConceptWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, KeyFamilyWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*)
        /// </para>
        /// </summary>
        public IList<AgencyWhereType> AgencyWhere {
            get {
                return this.ContentField.AgencyWhere;
            }
            set {
                this.ContentField.AgencyWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> defaultLimit {
            get {
                return this.ContentField.defaultLimit;
            }
            set {
                this.ContentField.defaultLimit = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v1_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Query Load(string xmlFile) {
            return XTypedServices.Load<Query, QueryType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Query Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Query, QueryType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Query Parse(string xml) {
            return XTypedServices.Parse<Query, QueryType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Query(((QueryType)(this.Content.Clone())));
        }
        
        private void SetInnerType(QueryType ContentField) {
            this.ContentField = ((QueryType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public Query Query {  get {return rootObject as Query; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Query root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
