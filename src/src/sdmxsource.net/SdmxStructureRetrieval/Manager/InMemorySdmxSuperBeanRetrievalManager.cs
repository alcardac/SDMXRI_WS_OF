// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 12/10/2012 10:38 рм    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.Structureretrieval.Manager {
	
	using System.Collections.Generic;
	using Org.Sdmxsource.Sdmx.Api.Manager.Retrieval;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Reference;
	using Org.Sdmxsource.Sdmx.Api.Model.Superbeans;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Categoryscheme;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Codelist;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Conceptscheme;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Datastructure;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Registry;
	using Org.Sdmxsource.Sdmx.Util.Objects;
	using Org.Sdmxsource.Sdmx.Util.Objects.Container;
	using Org.Springframework.Objects.Factory.Annotation;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using org.sdmxsource.sdmx.util.beans;
	
	public class InMemoryISdmxBaseObjectRetrievalManager : 
			ISdmxBaseObjectRetrievalManager {
	
		protected internal SuperBeans superBeans;
	
		/// <summary>
		/// Minimal constructor
		/// </summary>
		///
		/// <param name="superBeans0"></param>
		public InMemoryISdmxBaseObjectRetrievalManager(SuperBeans superBeans0) {
			this.superBeans = superBeans0;
			if (superBeans0 == null) {
				superBeans0 = new SuperBeansImpl();
			}
		}
	
		public virtual ICodelistObjectBase IGetCodelistObjectBase(IMaintainableRefObject xref) {
			return (ICodelistObjectBase) Org.Sdmxsource.Sdmx.Util.Objects.RefUtilBase.ResolveReference(
					superBeans.Codelists, xref);
		}
	
		public virtual IConceptSchemeObjectBase IGetConceptSchemeObjectBase(
				IMaintainableRefObject xref) {
			return (IConceptSchemeObjectBase) Org.Sdmxsource.Sdmx.Util.Objects.RefUtilBase.ResolveReference(
					superBeans.ConceptSchemes, xref);
		}
	
		public virtual ICategorySchemeObjectBase IGetCategorySchemeObjectBase(
				IMaintainableRefObject xref) {
			return (ICategorySchemeObjectBase) Org.Sdmxsource.Sdmx.Util.Objects.RefUtilBase.ResolveReference(
					superBeans.CategorySchemes, xref);
		}
	
		public virtual IDataflowObjectBase IGetDataflowObjectBase(IMaintainableRefObject xref) {
			return (IDataflowObjectBase) Org.Sdmxsource.Sdmx.Util.Objects.RefUtilBase.ResolveReference(
					superBeans.Dataflows, xref);
		}
	
		public virtual IHierarchicalCodelistObjectBase IGetHierarchicCodeListObjectBase(
				IMaintainableRefObject xref) {
			return (IHierarchicalCodelistObjectBase) Org.Sdmxsource.Sdmx.Util.Objects.RefUtilBase
					.ResolveReference(superBeans.HierarchicalCodelists, xref);
		}
	
		public virtual IDataStructureObjectBase IGetDataStructureObjectBase(
				IMaintainableRefObject xref) {
			return (IDataStructureObjectBase) Org.Sdmxsource.Sdmx.Util.Objects.RefUtilBase.ResolveReference(
					superBeans.DataStructures, xref);
		}
	
		public virtual IProvisionAgreementObjectBase IGetProvisionAgreementObjectBase(
				IMaintainableRefObject xref) {
			return (IProvisionAgreementObjectBase) Org.Sdmxsource.Sdmx.Util.Objects.RefUtilBase.ResolveReference(
					superBeans.Provisions, xref);
		}
	
		public virtual ISet<ICodelistObjectBase> IGetCodelistObjectsBase(IMaintainableRefObject xref) {
			return new RefUtilBase<ICodelistObjectBase>().ResolveReferences(
					superBeans.Codelists, xref);
		}
	
		public virtual ISet<IConceptSchemeObjectBase> IGetConceptSchemeObjectsBase(
				IMaintainableRefObject xref) {
			return new RefUtilBase<IConceptSchemeObjectBase>()
					.ResolveReferences(superBeans.ConceptSchemes, xref);
		}
	
		public virtual ISet<ICategorySchemeObjectBase> IGetCategorySchemeObjectsBase(
				IMaintainableRefObject xref) {
			return new RefUtilBase<ICategorySchemeObjectBase>()
					.ResolveReferences(superBeans.CategorySchemes, xref);
		}
	
		public virtual ISet<IDataflowObjectBase> IGetDataflowObjectsBase(IMaintainableRefObject xref) {
			return new RefUtilBase<IDataflowObjectBase>().ResolveReferences(
					superBeans.Dataflows, xref);
		}
	
		public virtual ISet<IHierarchicalCodelistObjectBase> IGetHierarchicCodeListObjectsBase(
				IMaintainableRefObject xref) {
			return new RefUtilBase<IHierarchicalCodelistObjectBase>()
					.ResolveReferences(superBeans.HierarchicalCodelists, xref);
		}
	
		public virtual ISet<IDataStructureObjectBase> IGetDataStructureObjectsBase(
				IMaintainableRefObject xref) {
			return new RefUtilBase<IDataStructureObjectBase>()
					.ResolveReferences(superBeans.DataStructures, xref);
		}
	
		public virtual ISet<IProvisionAgreementObjectBase> IGetProvisionAgreementObjectsBase(
				IMaintainableRefObject xref) {
			return new RefUtilBase<IProvisionAgreementObjectBase>()
					.ResolveReferences(superBeans.Provisions, xref);
		}
	}
}
