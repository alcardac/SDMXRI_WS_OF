// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 12/10/2012 10:38 рм    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.Structureretrieval.Manager {
	
	using Org.Sdmxsource.Sdmx.Api.Exception;
	using Org.Sdmxsource.Sdmx.Api.Manager.Retrieval;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Base;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Reference;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class IdentifiableRetrievalManagerImpl : 
			IdentifiableRetrievalManager {
		private ISdmxRetrievalManager retrievalManager;
	
		public IdentifiableRetrievalManagerImpl(
				ISdmxRetrievalManager retrievalManager0) {
			if (retrievalManager0 == null) {
				throw new Exception(
						"IdentifiableRetrievalManagerImpl - ISdmxRetrievalManager can not be null");
			}
			this.retrievalManager = retrievalManager0;
		}
	
		/* @SuppressWarnings("unchecked")*/
		public virtual T GetIdentifiableBean<T>(ICrossReference crossRef,
				Type structureType) {
			IIdentifiableObject bean = GetIdentifiableBean(crossRef);
			if (structureType.IsAssignableFrom(bean.GetType())) {
				return (T) bean;
			}
			throw new ReferenceException("Reference expecting bean of type '"
					+ structureType.FullName + "'  but got type '"
					+ bean.GetType().FullName + "'");
		}
	
		public virtual IIdentifiableObject GetIdentifiableBean(
				ICrossReference crossReferenceBean) {
			try {
				IIdentifiableObject idetifiableBean = GetIdentifiableBean(crossReferenceBean);
				if (idetifiableBean != null) {
					return idetifiableBean;
				}
			} catch (ReferenceException e) {
			}
			//Catch all
			throw new ReferenceException(crossReferenceBean);
		}
	
		public IIdentifiableObject GetIdentifiableBean(IStructureReference sRef) {
			IMaintainableObject maint = retrievalManager.GetMaintainable(sRef);
	
			String targetURN = sRef.TargetUrn;
			if (maint.Urn.Equals(targetURN)) {
				return maint;
			}
			/* foreach */
			foreach (IIdentifiableObject currentIdent  in  maint.IdentifiableComposites) {
				if (currentIdent.Urn.Equals(targetURN)) {
					return currentIdent;
				}
			}
			return null;
		}
	
		/* @SuppressWarnings("unchecked")*/
		public virtual T GetIdentifiableBean<T>(IStructureReference sRef,
				Type structureType) {
			IIdentifiableObject bean = GetIdentifiableBean(sRef);
			if (bean == null) {
				return  default(T)/* was: null */;
			}
			if (structureType.IsAssignableFrom(bean.GetType())) {
				return (T) bean;
			}
			throw new ReferenceException("Reference expecting bean of type '"
					+ structureType.FullName + "'  but got type '"
					+ bean.GetType().FullName + "'");
		}
	}
}
