// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 12/10/2012 10:38 рм    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.Structureretrieval.Manager.Mutable {
	
	using System.Collections.Generic;
	using Org.Sdmxsource.Sdmx.Api.Constants;
	using Org.Sdmxsource.Sdmx.Api.Exception;
	using Org.Sdmxsource.Sdmx.Api.Manager.Retrieval;
	using Org.Sdmxsource.Sdmx.Api.Manager.Retrieval.Mutable;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Base;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Categoryscheme;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Codelist;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Conceptscheme;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Datastructure;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Mapping;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Metadatastructure;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Process;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Reference;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Registry;
	using Org.Sdmxsource.Sdmx.Api.Model.Mutable.Base;
	using Org.Sdmxsource.Sdmx.Api.Model.Mutable.Categoryscheme;
	using Org.Sdmxsource.Sdmx.Api.Model.Mutable.Codelist;
	using Org.Sdmxsource.Sdmx.Api.Model.Mutable.Conceptscheme;
	using Org.Sdmxsource.Sdmx.Api.Model.Mutable.Datastructure;
	using Org.Sdmxsource.Sdmx.Api.Model.Mutable.Mapping;
	using Org.Sdmxsource.Sdmx.Api.Model.Mutable.Metadatastructure;
	using Org.Sdmxsource.Sdmx.Api.Model.Mutable.Process;
	using Org.Sdmxsource.Sdmx.Api.Model.Mutable.Registry;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.Mutable.Categoryscheme;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.Mutable.Codelist;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.Mutable.Conceptscheme;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.Mutable.Datastructure;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.Mutable.Mapping;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.Mutable.Metadatastructure;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.Mutable.Process;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.Mutable.Registry;
	using Org.Sdmxsource.Sdmx.Structureretrieval.Manager;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// This implementation of the ISdmxMutableObjectRetrievalManager wraps a ISdmxRetrievalManager and mutates the responses.
	/// </summary>
	///
	public class MutableBeanRetrievalManager : AbstractRetrevalManager
		, ISdmxMutableObjectRetrievalManager {
	
		public MutableBeanRetrievalManager(
				ISdmxRetrievalManager sdmxObjectRetrievalManager) : base(sdmxObjectRetrievalManager) {
		}
	
		public virtual IAgencySchemeMutableObject GetMutableAgencyScheme(
				IMaintainableRefObject xref) {
			IAgencyScheme bean = this.SdmxObjectRetrievalManager
					.GetAgencySchemeBean(xref);
			return (bean == null) ? null : bean.MutableInstance;
		}
	
		public virtual IDataConsumerSchemeMutableObject GetMutableDataConsumerScheme(
				IMaintainableRefObject xref) {
			IDataConsumerScheme bean = this.SdmxObjectRetrievalManager
					.GetDataConsumerSchemeBean(xref);
			return (bean == null) ? null : bean.MutableInstance;
		}
	
		public virtual IDataProviderSchemeMutableObject GetMutableDataProviderScheme(
				IMaintainableRefObject xref) {
			IDataProviderScheme bean = this.SdmxObjectRetrievalManager
					.GetDataProviderSchemeBean(xref);
			return (bean == null) ? null : bean.MutableInstance;
		}
	
		public virtual ISet<IAgencySchemeMutableObject> GetMutableAgencySchemeBeans(
				IMaintainableRefObject xref) {
			ISet<IAgencySchemeMutableObject> returnSet = new HashSet<IAgencySchemeMutableObject>();
			/* foreach */
			foreach (IAgencyScheme currentBean  in  this.SdmxObjectRetrievalManager
					.GetAgencySchemeBeans(xref)) {
				returnSet.Add(currentBean.MutableInstance);
			}
			return returnSet;
		}
	
		public virtual ISet<IDataConsumerSchemeMutableObject> GetMutableDataConsumerSchemeBeans(
				IMaintainableRefObject xref) {
			ISet<IDataConsumerSchemeMutableObject> returnSet = new HashSet<IDataConsumerSchemeMutableObject>();
			/* foreach */
			foreach (IDataConsumerScheme currentBean  in  this.SdmxObjectRetrievalManager
					.GetDataConsumerSchemeBeans(xref)) {
				returnSet.Add(currentBean.MutableInstance);
			}
			return returnSet;
		}
	
		public virtual ISet<IDataProviderSchemeMutableObject> GetMutableDataProviderSchemeBeans(
				IMaintainableRefObject xref) {
			ISet<IDataProviderSchemeMutableObject> returnSet = new HashSet<IDataProviderSchemeMutableObject>();
			/* foreach */
			foreach (IDataProviderScheme currentBean  in  this.SdmxObjectRetrievalManager
					.GetDataProviderSchemeBeans(xref)) {
				returnSet.Add(currentBean.MutableInstance);
			}
			return returnSet;
		}
	
		public virtual ICategorisationMutableObject GetMutableCategorisation(
				IMaintainableRefObject xref) {
			ICategorisationObject bean = this.SdmxObjectRetrievalManager
					.GetCategorisation(xref);
			return (bean == null) ? null : new CategorisationMutableCore(bean);
		}
	
		public virtual ISet<ICategorisationMutableObject> GetMutableCategorisationBeans(
				IMaintainableRefObject xref) {
			ISet<ICategorisationObject> beans = this.SdmxObjectRetrievalManager
					.GetCategorisationBeans(xref);
			ISet<ICategorisationMutableObject> returnSet = new HashSet<ICategorisationMutableObject>();
			/* foreach */
			foreach (ICategorisationObject csBean  in  beans) {
				returnSet.Add(new CategorisationMutableCore(csBean));
			}
			return returnSet;
		}
	
		public virtual ICategorySchemeMutableObject GetMutableCategoryScheme(
				IMaintainableRefObject xref) {
			ICategorySchemeObject bean = this.SdmxObjectRetrievalManager
					.GetCategoryScheme(xref);
			return (bean == null) ? null : new CategorySchemeMutableCore(bean);
		}
	
		public virtual ISet<ICategorySchemeMutableObject> GetMutableCategorySchemeBeans(
				IMaintainableRefObject xref) {
			ISet<ICategorySchemeObject> beans = this.SdmxObjectRetrievalManager
					.GetCategorySchemeBeans(xref);
			ISet<ICategorySchemeMutableObject> returnSet = new HashSet<ICategorySchemeMutableObject>();
			/* foreach */
			foreach (ICategorySchemeObject csBean  in  beans) {
				returnSet.Add(new CategorySchemeMutableCore(csBean));
			}
			return returnSet;
		}
	
		public virtual ICodelistMutableObject GetMutableCodelist(IMaintainableRefObject xref) {
			ICodelistObject bean = this.SdmxObjectRetrievalManager.GetCodelist(xref);
			return (bean == null) ? null : new CodelistMutableCore(bean);
		}
	
		public virtual ISet<ICodelistMutableObject> GetMutableCodelistBeans(
				IMaintainableRefObject xref) {
			ISet<ICodelistObject> beans = this.SdmxObjectRetrievalManager
					.GetCodelistBeans(xref);
			ISet<ICodelistMutableObject> returnSet = new HashSet<ICodelistMutableObject>();
			/* foreach */
			foreach (ICodelistObject bean  in  beans) {
				returnSet.Add(new CodelistMutableCore(bean));
			}
			return returnSet;
		}
	
		public virtual IConceptSchemeMutableObject GetMutableConceptScheme(
				IMaintainableRefObject xref) {
			IConceptSchemeObject bean = this.SdmxObjectRetrievalManager.GetConceptScheme(xref);
			return (bean == null) ? null : new ConceptSchemeMutableCore(bean);
		}
	
		public virtual ISet<IConceptSchemeMutableObject> GetMutableConceptSchemeBeans(
				IMaintainableRefObject xref) {
			ISet<IConceptSchemeObject> beans = this.SdmxObjectRetrievalManager
					.GetConceptSchemeBeans(xref);
			ISet<IConceptSchemeMutableObject> returnSet = new HashSet<IConceptSchemeMutableObject>();
			/* foreach */
			foreach (IConceptSchemeObject bean  in  beans) {
				returnSet.Add(new ConceptSchemeMutableCore(bean));
			}
			return returnSet;
		}
	
		public virtual IDataflowMutableObject GetMutableDataflow(IMaintainableRefObject xref) {
			IDataflowObject bean = this.SdmxObjectRetrievalManager.GetDataflow(xref);
			return (bean == null) ? null : new DataflowMutableCore(bean);
		}
	
		public virtual ISet<IDataflowMutableObject> GetMutableDataflowBeans(
				IMaintainableRefObject xref) {
			ISet<IDataflowObject> beans = this.SdmxObjectRetrievalManager
					.GetDataflowBeans(xref);
			ISet<IDataflowMutableObject> returnSet = new HashSet<IDataflowMutableObject>();
			/* foreach */
			foreach (IDataflowObject bean  in  beans) {
				returnSet.Add(new DataflowMutableCore(bean));
			}
			return returnSet;
		}
	
		public virtual IHierarchicalCodelistMutableObject GetMutableHierarchicCodeList(
				IMaintainableRefObject xref) {
			IHierarchicalCodelistObject bean = this.SdmxObjectRetrievalManager
					.GetHierarchicCodeList(xref);
			return (bean == null) ? null : new HierarchicalCodelistMutableCore(
					bean);
		}
	
		public virtual ISet<IHierarchicalCodelistMutableObject> GetMutableHierarchicCodeListBeans(
				IMaintainableRefObject xref) {
			ISet<IHierarchicalCodelistObject> beans = this.SdmxObjectRetrievalManager
					.GetHierarchicCodeListBeans(xref);
			ISet<IHierarchicalCodelistMutableObject> returnSet = new HashSet<IHierarchicalCodelistMutableObject>();
			/* foreach */
			foreach (IHierarchicalCodelistObject bean  in  beans) {
				returnSet.Add(new HierarchicalCodelistMutableCore(bean));
			}
			return returnSet;
		}
	
		public virtual IDataStructureMutableObject GetMutableDataStructure(
				IMaintainableRefObject xref) {
			IDataStructureObject bean = this.SdmxObjectRetrievalManager.GetDataStructure(xref);
			return (bean == null) ? null : new DataStructureMutableCore(bean);
		}
	
		public virtual ISet<IDataStructureMutableObject> GetMutableDataStructureBeans(
				IMaintainableRefObject xref) {
			ISet<IDataStructureObject> beans = this.SdmxObjectRetrievalManager
					.GetDataStructureBeans(xref);
			ISet<IDataStructureMutableObject> returnSet = new HashSet<IDataStructureMutableObject>();
			/* foreach */
			foreach (IDataStructureObject bean  in  beans) {
				returnSet.Add(new DataStructureMutableCore(bean));
			}
			return returnSet;
		}
	
		public virtual IMaintainableMutableObject GetMutableMaintainable(
				IStructureReference query) {
			SdmxStructureType structureType = query.TargetReference;
			if (!structureType.IsMaintainable()) {
				throw new UnsupportedException(Org.Sdmxsource.Sdmx.Api.Constants.ExceptionCode.Unsupported,
						structureType + " is not maintainable");
			}
			IMaintainableRefObject xref = query.MaintainableReference;
			switch (structureType) {
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.AgencyScheme:
				return GetMutableAgencyScheme(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.DataProviderScheme:
				return GetMutableDataProviderScheme(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.DataConsumerScheme:
				return GetMutableDataConsumerScheme(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.Categorisation:
				return GetMutableCategorisation(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.CategoryScheme:
				return GetMutableCategoryScheme(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.ContentConstraint:
				return GetMutableContentConstraintBean(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.CodeList:
				return GetMutableCodelist(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.ConceptScheme:
				return GetMutableConceptScheme(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.Dataflow:
				return GetMutableDataflow(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.HierarchicalCodelist:
				return GetMutableHierarchicCodeList(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.Dsd:
				return GetMutableDataStructure(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.MetadataFlow:
				return GetMutableMetadataflow(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.Msd:
				return GetMutableMetadataStructure(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.OrganisationUnitScheme:
				return GetMutableOrganisationUnitScheme(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.Process:
				return GetMutableProcessBean(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.ProvisionAgreement:
				return GetMutableProvisionAgreement(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.StructureSet:
				return GetMutableStructureSet(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.ReportingTaxonomy:
				return GetMutableReportingTaxonomy(xref);
			}
			throw new UnsupportedException(Org.Sdmxsource.Sdmx.Api.Constants.ExceptionCode.Unsupported, structureType);
		}
	
		public virtual ISet<IMaintainableMutableObject> GetMutableMaintainables(
				IStructureReference query) {
			SdmxStructureType structureType = query.TargetReference;
			if (!structureType.IsMaintainable()) {
				throw new UnsupportedException(Org.Sdmxsource.Sdmx.Api.Constants.ExceptionCode.Unsupported,
						structureType + " is not maintainable");
			}
			IMaintainableRefObject xref = query.MaintainableReference;
			switch (structureType) {
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.AgencyScheme:
				return GetMutableAgencySchemeBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.DataProviderScheme:
				return GetMutableDataProviderSchemeBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.DataConsumerScheme:
				return GetMutableDataConsumerSchemeBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.Categorisation:
				return GetMutableCategorisationBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.ContentConstraint:
				return GetMutableContentConstraintBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.CategoryScheme:
				return GetMutableCategorySchemeBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.CodeList:
				return GetMutableCodelistBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.ConceptScheme:
				return GetMutableConceptSchemeBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.Dataflow:
				return GetMutableDataflowBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.HierarchicalCodelist:
				return GetMutableHierarchicCodeListBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.Dsd:
				return GetMutableDataStructureBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.MetadataFlow:
				return GetMutableMetadataflowBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.Msd:
				return GetMutableMetadataStructureBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.OrganisationUnitScheme:
				return GetMutableOrganisationUnitSchemeBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.ProvisionAgreement:
				return GetMutableProvisionAgreements(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.Process:
				return GetMutableProcessBeanBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.StructureSet:
				return GetMutableStructureSetBeans(xref);
			case Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureEnumType.ReportingTaxonomy:
				return GetMutableReportingTaxonomyBeans(xref);
			}
			throw new UnsupportedException(Org.Sdmxsource.Sdmx.Api.Constants.ExceptionCode.Unsupported, structureType);
		}
	
		public virtual ISet<IMaintainableMutableObject> GetMutableMaintainableWithReferences(
				IStructureReference query) {
			ISet<IMaintainableObject> maintainables = this.SdmxObjectRetrievalManager
					.GetMaintainableWithReferences(query);
			return ConvertToMutables(maintainables);
		}
	
		private ISet<IMaintainableMutableObject> ConvertToMutables(
				ISet<IMaintainableObject> maintainables) {
			ISet<IMaintainableMutableObject> returnSet = new HashSet<IMaintainableMutableObject>();
			/* foreach */
			foreach (IMaintainableObject maintainable  in  maintainables) {
				returnSet.Add(maintainable.MutableInstance);
			}
			return returnSet;
		}
	
		public IProvisionAgreementMutableObject GetMutableProvisionAgreement(
				IMaintainableRefObject xref) {
			IProvisionAgreementObject bean = this.SdmxObjectRetrievalManager
					.GetProvisionAgreementBean(xref);
			return (bean == null) ? null
					: new ProvisionAgreementMutableCore(bean);
		}
	
		public ISet<IProvisionAgreementMutableObject> GetMutableProvisionAgreements(
				IMaintainableRefObject xref) {
			ISet<IProvisionAgreementObject> beans = this.SdmxObjectRetrievalManager
					.GetProvisionAgreementBeans(xref);
			ISet<IProvisionAgreementMutableObject> returnSet = new HashSet<IProvisionAgreementMutableObject>();
			/* foreach */
			foreach (IProvisionAgreementObject bean  in  beans) {
				returnSet.Add(new ProvisionAgreementMutableCore(bean));
			}
			return returnSet;
		}
	
		public IContentConstraintMutableObject GetMutableContentConstraintBean(
				IMaintainableRefObject xref) {
			IContentConstraintObject bean = this.SdmxObjectRetrievalManager
					.GetContentConstraint(xref);
			return (bean == null) ? null : new ContentConstraintMutableCore(bean);
		}
	
		public ISet<IContentConstraintMutableObject> GetMutableContentConstraintBeans(
				IMaintainableRefObject xref) {
			ISet<IContentConstraintObject> beans = this.SdmxObjectRetrievalManager
					.GetContentConstraints(xref);
			ISet<IContentConstraintMutableObject> returnSet = new HashSet<IContentConstraintMutableObject>();
			/* foreach */
			foreach (IContentConstraintObject bean  in  beans) {
				returnSet.Add(new ContentConstraintMutableCore(bean));
			}
			return returnSet;
		}
	
		public virtual IMetadataStructureDefinitionMutbale GetMutableMetadataStructure(
				IMaintainableRefObject xref) {
			IMetadataStructureDefinitionObject bean = this.SdmxObjectRetrievalManager
					.GetMetadataStructure(xref);
			return (bean == null) ? null
					: new MetadataStructureDefinitionMutableCore(bean);
		}
	
		public virtual ISet<IMetadataStructureDefinitionMutbale> GetMutableMetadataStructureBeans(
				IMaintainableRefObject xref) {
			ISet<IMetadataStructureDefinitionObject> beans = this.SdmxObjectRetrievalManager
					.GetMetadataStructureBeans(xref);
			ISet<IMetadataStructureDefinitionMutbale> returnSet = new HashSet<IMetadataStructureDefinitionMutbale>();
			/* foreach */
			foreach (IMetadataStructureDefinitionObject bean  in  beans) {
				returnSet.Add(new MetadataStructureDefinitionMutableCore(bean));
			}
			return returnSet;
		}
	
		public virtual IMetadataFlowMutableObject GetMutableMetadataflow(
				IMaintainableRefObject xref) {
			IMetadataFlow bean = this.SdmxObjectRetrievalManager.GetMetadataflow(xref);
			return (bean == null) ? null : new MetadataflowMutableCore(bean);
		}
	
		public virtual ISet<IMetadataFlowMutableObject> GetMutableMetadataflowBeans(
				IMaintainableRefObject xref) {
			ISet<IMetadataFlow> beans = this.SdmxObjectRetrievalManager
					.GetMetadataflowBeans(xref);
			ISet<IMetadataFlowMutableObject> returnSet = new HashSet<IMetadataFlowMutableObject>();
			/* foreach */
			foreach (IMetadataFlow bean  in  beans) {
				returnSet.Add(new MetadataflowMutableCore(bean));
			}
			return returnSet;
		}
	
		public virtual IOrganisationUnitSchemeMutableObject GetMutableOrganisationUnitScheme(
				IMaintainableRefObject xref) {
			IOrganisationUnitSchemeObject bean = this.SdmxObjectRetrievalManager
					.GetOrganisationUnitScheme(xref);
			return (bean == null) ? null : bean.MutableInstance;
		}
	
		public virtual ISet<IOrganisationUnitSchemeMutableObject> GetMutableOrganisationUnitSchemeBeans(
				IMaintainableRefObject xref) {
			ISet<IOrganisationUnitSchemeObject> beans = this.SdmxObjectRetrievalManager
					.GetOrganisationUnitSchemeBeans(xref);
			ISet<IOrganisationUnitSchemeMutableObject> returnSet = new HashSet<IOrganisationUnitSchemeMutableObject>();
			/* foreach */
			foreach (IOrganisationUnitSchemeObject bean  in  beans) {
				returnSet.Add(bean.MutableInstance);
			}
			return returnSet;
		}
	
		public virtual IProcessMutableObject GetMutableProcessBean(IMaintainableRefObject xref) {
			IProcessObject bean = this.SdmxObjectRetrievalManager.GetProcessBean(xref);
			return (bean == null) ? null : new ProcessMutableCore(bean);
		}
	
		public virtual ISet<IProcessMutableObject> GetMutableProcessBeanBeans(
				IMaintainableRefObject xref) {
			ISet<IProcessObject> beans = this.SdmxObjectRetrievalManager.GetProcessBeans(xref);
			ISet<IProcessMutableObject> returnSet = new HashSet<IProcessMutableObject>();
			/* foreach */
			foreach (IProcessObject bean  in  beans) {
				returnSet.Add(new ProcessMutableCore(bean));
			}
			return returnSet;
		}
	
		public virtual IReportingTaxonomyMutableObject GetMutableReportingTaxonomy(
				IMaintainableRefObject xref) {
			IReportingTaxonomyObject bean = this.SdmxObjectRetrievalManager
					.GetReportingTaxonomy(xref);
			return (bean == null) ? null : new ReportingTaxonomyMutableCore(bean);
		}
	
		public virtual ISet<IReportingTaxonomyMutableObject> GetMutableReportingTaxonomyBeans(
				IMaintainableRefObject xref) {
			ISet<IReportingTaxonomyObject> beans = this.SdmxObjectRetrievalManager
					.GetReportingTaxonomyBeans(xref);
			ISet<IReportingTaxonomyMutableObject> returnSet = new HashSet<IReportingTaxonomyMutableObject>();
			/* foreach */
			foreach (IReportingTaxonomyObject bean  in  beans) {
				returnSet.Add(new ReportingTaxonomyMutableCore(bean));
			}
			return returnSet;
		}
	
		public virtual IStructureSetMutableObject GetMutableStructureSet(
				IMaintainableRefObject xref) {
			IStructureSetObject bean = this.SdmxObjectRetrievalManager.GetStructureSet(xref);
			return (bean == null) ? null : new StructureSetMutableCore(bean);
		}
	
		public virtual ISet<IStructureSetMutableObject> GetMutableStructureSetBeans(
				IMaintainableRefObject xref) {
			ISet<IStructureSetObject> beans = this.SdmxObjectRetrievalManager
					.GetStructureSetBeans(xref);
			ISet<IStructureSetMutableObject> returnSet = new HashSet<IStructureSetMutableObject>();
			/* foreach */
			foreach (IStructureSetObject bean  in  beans) {
				returnSet.Add(new StructureSetMutableCore(bean));
			}
			return returnSet;
		}
	}
}
