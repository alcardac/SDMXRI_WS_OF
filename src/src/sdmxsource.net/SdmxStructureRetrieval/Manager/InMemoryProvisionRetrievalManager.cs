// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 12/10/2012 10:38 рм    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.Structureretrieval.Manager {
	
	using System.Collections.Generic;
	using Org.Sdmxsource.Sdmx.Api.Manager.Retrieval;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Base;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Datastructure;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Metadatastructure;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Reference;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Registry;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class InMemoryProvisionRetrievalManager : 
			IProvisionRetrievalManager {
		private ISdmxObjects beans;
	
		public InMemoryProvisionRetrievalManager(ISdmxObjects beans0) {
			this.beans = beans0;
		}
	
		//TODO - THIS CAN ALL BE ABSTRACTED
		public virtual ISet<IProvisionAgreementObject> GetProvisions(
				IStructureReference provisionRef) {
			if (provisionRef.TargetReference == Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureType.GetFromEnum(SdmxStructureEnumType.Dsd)) {
				ISet<IProvisionAgreementObject> returnSet = new HashSet<IProvisionAgreementObject>();
				ISet<IMaintainableObject> keyFamilies = beans
						.GetMaintinables(Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureType.GetFromEnum(SdmxStructureEnumType.Dsd));
				ISet<IMaintainableObject> dataflows = beans
						.GetMaintinables(Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureType.GetFromEnum(SdmxStructureEnumType.Dataflow));
				/* foreach */
				foreach (IMaintainableObject currentDSD  in  keyFamilies) {
					if (provisionRef.IsMatch(currentDSD)) {
						/* foreach */
						foreach (IMaintainableObject currentFlow  in  dataflows) {
							IDataflowObject df = (IDataflowObject) currentFlow;
							if (df.DataStructureRef.IsMatch(currentDSD)) {
								GetByReference(df).AddAll(returnSet);
							}
						}
					}
				}
				return returnSet;
			}
			if (provisionRef.TargetReference == Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureType.GetFromEnum(SdmxStructureEnumType.DataProvider)) {
				ISet<IProvisionAgreementObject> returnSet0 = new HashSet<IProvisionAgreementObject>();
				ISet<IMaintainableObject> allProvisions = beans
						.GetMaintinables(Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureType.GetFromEnum(SdmxStructureEnumType.ProvisionAgreement));
				ISet<IMaintainableObject> dataProviderSchemes = beans
						.GetMaintinables(Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureType.GetFromEnum(SdmxStructureEnumType.DataProviderScheme));
				/* foreach */
				foreach (IMaintainableObject currentDps  in  dataProviderSchemes) {
					if (provisionRef.IsMatch(currentDps)) {
						/* foreach */
						foreach (IMaintainableObject currentProvision  in  allProvisions) {
							IProvisionAgreementObject prov = (IProvisionAgreementObject) currentProvision;
							if (prov.DataproviderRef.IsMatch(currentDps)) {
								returnSet0.Add(prov);
							}
						}
					}
				}
				return returnSet0;
			}
			if (provisionRef.TargetReference == Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureType.GetFromEnum(SdmxStructureEnumType.ProvisionAgreement)) {
				return beans.GetProvisionAgreements(provisionRef
						.MaintainableReference);
			}
			return GetByReference(beans.GetMaintinables(provisionRef
					.MaintainableStructureType));
		}
	
		public virtual IProvisionAgreementObject GetProvision(IRegistrationObject registration) {
			ISet<IProvisionAgreementObject> provisions = GetProvisions(registration
					.ProvisionAgreementRef);
			if (Org.Sdmxsource.Util.ObjectUtil.ValidCollection(provisions)) {
				if (provisions.Count > 1) {
					throw new Exception(
							"Only one provision agreement expected from reference : "
									+ registration.ProvisionAgreementRef);
				}
				return (IProvisionAgreementObject) ILOG.J2CsMapping.Collections.Generics.Collections.ToArray(provisions)[0];
			}
			return null;
		}
	
		public virtual ISet<IProvisionAgreementObject> GetProvisions(IDataflowObject dataflow) {
			return GetByReference(dataflow);
		}
	
		public virtual ISet<IProvisionAgreementObject> GetProvisions(
				IMetadataFlow metadataflow) {
			return GetByReference(metadataflow);
		}
	
		private ISet<IProvisionAgreementObject> GetByReference(
				ICollection<IMaintainableObject> bean) {
			ISet<IProvisionAgreementObject> returnSet = new HashSet<IProvisionAgreementObject>();
			/* foreach */
			foreach (IMaintainableObject currentMaint  in  bean) {
				GetByReference(currentMaint).AddAll(returnSet);
			}
			return returnSet;
		}
	
		private ISet<IProvisionAgreementObject> GetByReference(IMaintainableObject bean) {
			ISet<IMaintainableObject> provisions = beans
					.GetMaintinables(Org.Sdmxsource.Sdmx.Api.Constants.SdmxStructureType.GetFromEnum(SdmxStructureEnumType.ProvisionAgreement));
			ISet<IProvisionAgreementObject> returnSet = new HashSet<IProvisionAgreementObject>();
			/* foreach */
			foreach (IMaintainableObject currentProvision  in  provisions) {
				IProvisionAgreementObject provision = (IProvisionAgreementObject) currentProvision;
				if (IsMatch(provision, bean)) {
					returnSet.Add(provision);
				}
			}
			return returnSet;
		}
	
		private bool IsMatch(IProvisionAgreementObject provision,
				IMaintainableObject bean) {
			/* foreach */
			foreach (ICrossReference currentRef  in  provision.CrossReferences) {
				if (currentRef.IsMatch(bean)) {
					return true;
				}
			}
			return false;
		}
	}
}
