// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 12/10/2012 10:38 рм    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.Structureretrieval.Manager {
	
	using System.Collections.Generic;
	using Org.Sdmxsource.Sdmx.Api.Manager.Retrieval;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Reference;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Registry;
	using Org.Sdmxsource.Sdmx.Util.Objects;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using org.sdmxsource.sdmx.util.beans;
	
	public class InMemoryRegistrationRetrievalManager : 
			IRegistrationRetrievalManager {
	
		private ISet<IRegistrationObject> registrations;
	
		public InMemoryRegistrationRetrievalManager() : this(null) {
		}
	
		public InMemoryRegistrationRetrievalManager(
				ISet<IRegistrationObject> registrations0) {
			if (registrations0 == null) {
				this.registrations = new HashSet<IRegistrationObject>();
			} else {
				this.registrations = registrations0;
			}
		}
	
		public void DeleteRegistration(IRegistrationObject registration) {
			registrations.Remove(registration);
		}
	
		public void AddRegistrations(ISet<IRegistrationObject> registrations0) {
			if (registrations0 != null) {
				registrations0.AddAll(this.registrations);
			}
		}
	
		public virtual ISet<IRegistrationObject> GetAllRegistrations() {
			return new HashSet<IRegistrationObject>(registrations);
		}
	
		public virtual ISet<IRegistrationObject> GetRegistrations(IMaintainableRefObject xref) {
			MaintainableUtil<IRegistrationObject> filter = new MaintainableUtil<IRegistrationObject>();
			return filter.FilterCollection(registrations, xref);
		}
	
		public virtual IRegistrationObject GetRegistration(IMaintainableRefObject xref) {
			ISet<IRegistrationObject> registrations0 = GetRegistrations(xref);
			if (!Org.Sdmxsource.Util.ObjectUtil.ValidCollection(registrations0)) {
				return null;
			}
			if (registrations0.Count > 1) {
				throw new ArgumentException(
						"More then one registration returned for reference (expected only one):"
								+ xref);
			}
			return (IRegistrationObject) ILOG.J2CsMapping.Collections.Generics.Collections.ToArray(registrations0)[0];
		}
	
		public virtual ISet<IRegistrationObject> GetRegistrations(
				IStructureReference provisionRefs) {
			ISet<IRegistrationObject> returnSet = new HashSet<IRegistrationObject>();
			/* foreach */
			foreach (IRegistrationObject currentReg  in  registrations) {
				//HACK - this is totally incorrect, read the JavaDoc
				if (currentReg.ProvisionAgreementRef.TargetUrn
						.Equals(provisionRefs.TargetUrn)) {
					returnSet.Add(currentReg);
				}
			}
			return returnSet;
		}
	
		public virtual ISet<IRegistrationObject> GetRegistrations(
				IProvisionAgreementObject provision) {
			return GetRegistrations(provision.AsReference());
		}
	}
}
