// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110519_01     
// 10/1/12 2:32 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.Util.Interfaces.Impl {
	
	
	
	using Org.Sdmxsource.Util.Model;
	using System;
	using System.Collections.Generic;

    public class ThreadedNotifier : IRunnable {
		private ThreadWrapper aThread;
		private Listener listener;
		private Object notification;
	
		public ThreadedNotifier(Listener listener_0, Object notification_1) {
			this.listener = listener_0;
			this.notification = notification_1;
			aThread = new ThreadWrapper(this);
			aThread.Start();
		}
	
		public static void PerformNotifications(
				IList<Listener<Object>> listeners, Object notification_0) {
			/* foreach */
			foreach (Listener currentListener  in  listeners) {
				PerformNotification(currentListener, notification_0);
			}
		}
	
		public static void PerformNotification(Listener listener_0,
				Object notification_1) {
			ThreadedNotifier notifier = new ThreadedNotifier(listener_0, notification_1);
		}
	
		public virtual void Run() {
			if (notification != null
					&& notification.GetType().Equals(typeof(Int32))) {
				//HACK - WHy?
				notification = (float )((Int32) notification);
			}
			listener.Invoke(notification);
		}
	}
}
