//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.common {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// Constraint specifies the object to which constraints are attached. Note that if the constraint is that for a Data Provider, then only ReleaseCalendar information is relevant, as there is no reliable way of determining which key family is being used to frame constraints in terms of cube regions or key sets. ReferencePeriod is used to report start date and end date constraints. MetadataConceptSet allows for conten t constraints to be described for metadata sets.
    /// </para>
    /// <para>
    /// Regular expression: (ConstraintID, CubeRegion*, MetadataConceptSet?, KeySet*, ReleaseCalendar?, ReferencePeriod?)
    /// </para>
    /// </summary>
    public partial class ConstraintType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CubeRegionType> CubeRegionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<KeySetType> KeySetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConstraintType(XElement xe) { return XTypedServices.ToXTypedElement<ConstraintType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConstraintType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ConstraintID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("CubeRegion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("MetadataConceptSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("KeySet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("ReleaseCalendar", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("ReferencePeriod", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")));
        }
        
        /// <summary>
        /// <para>
        /// Constraint specifies the object to which constraints are attached. Note that if the constraint is that for a Data Provider, then only ReleaseCalendar information is relevant, as there is no reliable way of determining which key family is being used to frame constraints in terms of cube regions or key sets. ReferencePeriod is used to report start date and end date constraints. MetadataConceptSet allows for conten t constraints to be described for metadata sets.
        /// </para>
        /// <para>
        /// Regular expression: (ConstraintID, CubeRegion*, MetadataConceptSet?, KeySet*, ReleaseCalendar?, ReferencePeriod?)
        /// </para>
        /// </summary>
        public ConstraintType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ConstraintID, CubeRegion*, MetadataConceptSet?, KeySet*, ReleaseCalendar?, ReferencePeriod?)
        /// </para>
        /// </summary>
        public string ConstraintID {
            get {
                XElement x = this.GetElement(XName.Get("ConstraintID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ConstraintID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value, "ConstraintID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ConstraintID, CubeRegion*, MetadataConceptSet?, KeySet*, ReleaseCalendar?, ReferencePeriod?)
        /// </para>
        /// </summary>
        public IList<CubeRegionType> CubeRegion {
            get {
                if ((this.CubeRegionField == null)) {
                    this.CubeRegionField = new XTypedList<CubeRegionType>(this, LinqToXsdTypeManager.Instance, XName.Get("CubeRegion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                }
                return this.CubeRegionField;
            }
            set {
                if ((value == null)) {
                    this.CubeRegionField = null;
                }
                else {
                    if ((this.CubeRegionField == null)) {
                        this.CubeRegionField = XTypedList<CubeRegionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CubeRegion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                    }
                    else {
                        XTypedServices.SetList<CubeRegionType>(this.CubeRegionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ConstraintID, CubeRegion*, MetadataConceptSet?, KeySet*, ReleaseCalendar?, ReferencePeriod?)
        /// </para>
        /// </summary>
        public MetadataConceptSetType MetadataConceptSet {
            get {
                XElement x = this.GetElement(XName.Get("MetadataConceptSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return ((MetadataConceptSetType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataConceptSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ConstraintID, CubeRegion*, MetadataConceptSet?, KeySet*, ReleaseCalendar?, ReferencePeriod?)
        /// </para>
        /// </summary>
        public IList<KeySetType> KeySet {
            get {
                if ((this.KeySetField == null)) {
                    this.KeySetField = new XTypedList<KeySetType>(this, LinqToXsdTypeManager.Instance, XName.Get("KeySet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                }
                return this.KeySetField;
            }
            set {
                if ((value == null)) {
                    this.KeySetField = null;
                }
                else {
                    if ((this.KeySetField == null)) {
                        this.KeySetField = XTypedList<KeySetType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("KeySet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                    }
                    else {
                        XTypedServices.SetList<KeySetType>(this.KeySetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ConstraintID, CubeRegion*, MetadataConceptSet?, KeySet*, ReleaseCalendar?, ReferencePeriod?)
        /// </para>
        /// </summary>
        public ReleaseCalendarType ReleaseCalendar {
            get {
                XElement x = this.GetElement(XName.Get("ReleaseCalendar", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return ((ReleaseCalendarType)(x));
            }
            set {
                this.SetElement(XName.Get("ReleaseCalendar", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ConstraintID, CubeRegion*, MetadataConceptSet?, KeySet*, ReleaseCalendar?, ReferencePeriod?)
        /// </para>
        /// </summary>
        public ReferencePeriodType ReferencePeriod {
            get {
                XElement x = this.GetElement(XName.Get("ReferencePeriod", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return ((ReferencePeriodType)(x));
            }
            set {
                this.SetElement(XName.Get("ReferencePeriod", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ConstraintType1 {
            get {
                XAttribute x = this.Attribute(XName.Get("ConstraintType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ConstraintType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConstraintType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConstraintType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ConstraintID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(string));
            localElementDictionary.Add(XName.Get("CubeRegion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(CubeRegionType));
            localElementDictionary.Add(XName.Get("MetadataConceptSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(MetadataConceptSetType));
            localElementDictionary.Add(XName.Get("KeySet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(KeySetType));
            localElementDictionary.Add(XName.Get("ReleaseCalendar", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(ReleaseCalendarType));
            localElementDictionary.Add(XName.Get("ReferencePeriod", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(ReferencePeriodType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CubeRegion describes the portion(s) of the possible combinations of all components within a key family or metadata structure definition by providing valid values on a per-component basis. This does not guarantee that data will be available for all possible combinations, but describes the portion of the cube in which it is useful to query for data. The isIncluded attribute, if true, indicates that the described area is the one in which it is useful to search/expect to find data. If false, this means that the portions of the cube outside the described region are useful to search/where you may expect to find data.
    /// </para>
    /// <para>
    /// Regular expression: (Member+)
    /// </para>
    /// </summary>
    public partial class CubeRegionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MemberType> MemberField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CubeRegionType(XElement xe) { return XTypedServices.ToXTypedElement<CubeRegionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CubeRegionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Member", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")));
        }
        
        /// <summary>
        /// <para>
        /// CubeRegion describes the portion(s) of the possible combinations of all components within a key family or metadata structure definition by providing valid values on a per-component basis. This does not guarantee that data will be available for all possible combinations, but describes the portion of the cube in which it is useful to query for data. The isIncluded attribute, if true, indicates that the described area is the one in which it is useful to search/expect to find data. If false, this means that the portions of the cube outside the described region are useful to search/where you may expect to find data.
        /// </para>
        /// <para>
        /// Regular expression: (Member+)
        /// </para>
        /// </summary>
        public CubeRegionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Member+)
        /// </para>
        /// </summary>
        public IList<MemberType> Member {
            get {
                if ((this.MemberField == null)) {
                    this.MemberField = new XTypedList<MemberType>(this, LinqToXsdTypeManager.Instance, XName.Get("Member", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                }
                return this.MemberField;
            }
            set {
                if ((value == null)) {
                    this.MemberField = null;
                }
                else {
                    if ((this.MemberField == null)) {
                        this.MemberField = XTypedList<MemberType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Member", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                    }
                    else {
                        XTypedServices.SetList<MemberType>(this.MemberField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public bool isIncluded {
            get {
                XAttribute x = this.Attribute(XName.Get("isIncluded", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isIncluded", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CubeRegionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CubeRegionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Member", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(MemberType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The isIncluded attribute, if true, indicates that the described concepts - of those described as possibilities in the relevant metadata structure definition - are reported. If the value is false, then the specified concepts are not reported.
    /// </para>
    /// <para>
    /// Regular expression: (Member+)
    /// </para>
    /// </summary>
    public partial class MetadataConceptSetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MemberType> MemberField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataConceptSetType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataConceptSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataConceptSetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Member", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")));
        }
        
        /// <summary>
        /// <para>
        ///  The isIncluded attribute, if true, indicates that the described concepts - of those described as possibilities in the relevant metadata structure definition - are reported. If the value is false, then the specified concepts are not reported.
        /// </para>
        /// <para>
        /// Regular expression: (Member+)
        /// </para>
        /// </summary>
        public MetadataConceptSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Member+)
        /// </para>
        /// </summary>
        public IList<MemberType> Member {
            get {
                if ((this.MemberField == null)) {
                    this.MemberField = new XTypedList<MemberType>(this, LinqToXsdTypeManager.Instance, XName.Get("Member", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                }
                return this.MemberField;
            }
            set {
                if ((value == null)) {
                    this.MemberField = null;
                }
                else {
                    if ((this.MemberField == null)) {
                        this.MemberField = XTypedList<MemberType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Member", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                    }
                    else {
                        XTypedServices.SetList<MemberType>(this.MemberField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public bool isIncluded {
            get {
                XAttribute x = this.Attribute(XName.Get("isIncluded", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isIncluded", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataConceptSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataConceptSetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Member", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(MemberType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Member describes the constrained component - which can be a dimension, an attribute, a metadata attribute, or a measure. This must agree with the metadata structure definition or key family  referenced by the Provision Agreement's Dataflow or Metadataflow. The isIncluded attribute indicates whether the Member is listing included or excluded values for each component, as seen against the full valid set described in the key family. When used to describe reported metadata, the MemberValue may be omitted in cases where no specification is made regarding the representation of the concept (as is the case with un-coded metadata attributes). Otherwise, MemberValue must be included.
    /// </para>
    /// <para>
    /// Regular expression: (ComponentRef, MemberValue*)
    /// </para>
    /// </summary>
    public partial class MemberType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MemberValueType> MemberValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MemberType(XElement xe) { return XTypedServices.ToXTypedElement<MemberType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MemberType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("MemberValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")));
        }
        
        /// <summary>
        /// <para>
        /// Member describes the constrained component - which can be a dimension, an attribute, a metadata attribute, or a measure. This must agree with the metadata structure definition or key family  referenced by the Provision Agreement's Dataflow or Metadataflow. The isIncluded attribute indicates whether the Member is listing included or excluded values for each component, as seen against the full valid set described in the key family. When used to describe reported metadata, the MemberValue may be omitted in cases where no specification is made regarding the representation of the concept (as is the case with un-coded metadata attributes). Otherwise, MemberValue must be included.
        /// </para>
        /// <para>
        /// Regular expression: (ComponentRef, MemberValue*)
        /// </para>
        /// </summary>
        public MemberType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ComponentRef, MemberValue*)
        /// </para>
        /// </summary>
        public string ComponentRef {
            get {
                XElement x = this.GetElement(XName.Get("ComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value, "ComponentRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ComponentRef, MemberValue*)
        /// </para>
        /// </summary>
        public IList<MemberValueType> MemberValue {
            get {
                if ((this.MemberValueField == null)) {
                    this.MemberValueField = new XTypedList<MemberValueType>(this, LinqToXsdTypeManager.Instance, XName.Get("MemberValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                }
                return this.MemberValueField;
            }
            set {
                if ((value == null)) {
                    this.MemberValueField = null;
                }
                else {
                    if ((this.MemberValueField == null)) {
                        this.MemberValueField = XTypedList<MemberValueType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MemberValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                    }
                    else {
                        XTypedServices.SetList<MemberValueType>(this.MemberValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public bool isIncluded {
            get {
                XAttribute x = this.Attribute(XName.Get("isIncluded", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isIncluded", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MemberType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MemberType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(string));
            localElementDictionary.Add(XName.Get("MemberValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(MemberValueType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MemberValue specifies the value of the specified component, which must be a valid value as described in the appropriate structure definition (key family).
    /// </para>
    /// <para>
    /// Regular expression: (Value)
    /// </para>
    /// </summary>
    public partial class MemberValueType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MemberValueType(XElement xe) { return XTypedServices.ToXTypedElement<MemberValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MemberValueType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")));
        }
        
        /// <summary>
        /// <para>
        /// MemberValue specifies the value of the specified component, which must be a valid value as described in the appropriate structure definition (key family).
        /// </para>
        /// <para>
        /// Regular expression: (Value)
        /// </para>
        /// </summary>
        public MemberValueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Value)
        /// </para>
        /// </summary>
        public string Value {
            get {
                XElement x = this.GetElement(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MemberValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MemberValueType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeySet describes a set of keys. The isIncluded attribute, if true, indicates that the specified keys are valid keys within the constraint. If false, the set of keys described are not valid - all other possible keys are the valid ones.
    /// </para>
    /// <para>
    /// Regular expression: (Key)
    /// </para>
    /// </summary>
    public partial class KeySetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator KeySetType(XElement xe) { return XTypedServices.ToXTypedElement<KeySetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeySetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Key", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")));
        }
        
        /// <summary>
        /// <para>
        /// KeySet describes a set of keys. The isIncluded attribute, if true, indicates that the specified keys are valid keys within the constraint. If false, the set of keys described are not valid - all other possible keys are the valid ones.
        /// </para>
        /// <para>
        /// Regular expression: (Key)
        /// </para>
        /// </summary>
        public KeySetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Key)
        /// </para>
        /// </summary>
        public KeyType Key {
            get {
                XElement x = this.GetElement(XName.Get("Key", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return ((KeyType)(x));
            }
            set {
                this.SetElement(XName.Get("Key", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public bool isIncluded {
            get {
                XAttribute x = this.Attribute(XName.Get("isIncluded", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isIncluded", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeySetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeySetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Key", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(KeyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Key allows for sets of component references - holding the name of the component's concept - and a permitted value for that component. This conctruct can be repeated as many times as dessired, but must describe complete keys according to teh relevant structure definition (key family).
    /// </para>
    /// <para>
    /// Regular expression: (ComponentRef, Value)+
    /// </para>
    /// </summary>
    public partial class KeyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ComponentRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator KeyType(XElement xe) { return XTypedServices.ToXTypedElement<KeyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeyType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Key allows for sets of component references - holding the name of the component's concept - and a permitted value for that component. This conctruct can be repeated as many times as dessired, but must describe complete keys according to teh relevant structure definition (key family).
        /// </para>
        /// <para>
        /// Regular expression: (ComponentRef, Value)+
        /// </para>
        /// </summary>
        public KeyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ComponentRef, Value)+
        /// </para>
        /// </summary>
        public IList<string> ComponentRef {
            get {
                if ((this.ComponentRefField == null)) {
                    this.ComponentRefField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                }
                return this.ComponentRefField;
            }
            set {
                if ((value == null)) {
                    this.ComponentRefField = null;
                }
                else {
                    if ((this.ComponentRefField == null)) {
                        this.ComponentRefField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ComponentRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ComponentRef, Value)+
        /// </para>
        /// </summary>
        public IList<string> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(string));
            localElementDictionary.Add(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The ReleaseCalendar holds information about the timing of releases of the constrained data. Periodicity is the period between releases of the data set. Offset is the interval between January first and the first release of data within the year. Tolerance is the period after which the release of data may be deemed late. All of these values use the standard "P7D"-style format.
    /// </para>
    /// <para>
    /// Regular expression: (Periodicity, Offset, Tolerance)
    /// </para>
    /// </summary>
    public partial class ReleaseCalendarType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReleaseCalendarType(XElement xe) { return XTypedServices.ToXTypedElement<ReleaseCalendarType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReleaseCalendarType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Periodicity", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("Offset", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("Tolerance", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")));
        }
        
        /// <summary>
        /// <para>
        /// The ReleaseCalendar holds information about the timing of releases of the constrained data. Periodicity is the period between releases of the data set. Offset is the interval between January first and the first release of data within the year. Tolerance is the period after which the release of data may be deemed late. All of these values use the standard "P7D"-style format.
        /// </para>
        /// <para>
        /// Regular expression: (Periodicity, Offset, Tolerance)
        /// </para>
        /// </summary>
        public ReleaseCalendarType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Periodicity, Offset, Tolerance)
        /// </para>
        /// </summary>
        public string Periodicity {
            get {
                XElement x = this.GetElement(XName.Get("Periodicity", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Periodicity", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Periodicity, Offset, Tolerance)
        /// </para>
        /// </summary>
        public string Offset {
            get {
                XElement x = this.GetElement(XName.Get("Offset", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Offset", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Periodicity, Offset, Tolerance)
        /// </para>
        /// </summary>
        public string Tolerance {
            get {
                XElement x = this.GetElement(XName.Get("Tolerance", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Tolerance", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReleaseCalendarType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReleaseCalendarType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Periodicity", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(string));
            localElementDictionary.Add(XName.Get("Offset", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(string));
            localElementDictionary.Add(XName.Get("Tolerance", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Specifies the inclusive start and end times for a registry query.
    /// </para>
    /// </summary>
    public partial class ReferencePeriodType : XTypedElement, IXMetaData {
        
         public static explicit operator ReferencePeriodType(XElement xe) { return XTypedServices.ToXTypedElement<ReferencePeriodType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Specifies the inclusive start and end times for a registry query.
        /// </para>
        /// </summary>
        public ReferencePeriodType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.DateTime startTime {
            get {
                XAttribute x = this.Attribute(XName.Get("startTime", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("startTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.DateTime endTime {
            get {
                XAttribute x = this.Attribute(XName.Get("endTime", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("endTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReferencePeriodType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReferencePeriodType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ConstraintType provides an enumeration of values of the types of constraints.
    /// </para>
    /// </summary>
    public sealed class ConstraintTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Content",
                        "Attachment"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ConstraintTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// TextType provides for a set of language-specific alternates to be provided for any human-readable construct in the instance.
    /// </para>
    /// </summary>
    public partial class TextType : XTypedElement, IXMetaData {
        
         public static explicit operator TextType(XElement xe) { return XTypedServices.ToXTypedElement<TextType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// TextType provides for a set of language-specific alternates to be provided for any human-readable construct in the instance.
        /// </para>
        /// </summary>
        public TextType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lang {
            get {
                XAttribute x = this.Attribute(XName.Get("lang", "http://www.w3.org/XML/1998/namespace"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lang", "http://www.w3.org/XML/1998/namespace"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TextType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// AnnotationType provides for non-documentation notes and annotations to be embedded in data and structure messages. It provides optional fields for providing a title, a type description, a URI, and the text of the annotation.
    /// </para>
    /// <para>
    /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
    /// </para>
    /// </summary>
    public partial class AnnotationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TextType> AnnotationTextField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AnnotationType(XElement xe) { return XTypedServices.ToXTypedElement<AnnotationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnnotationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AnnotationTitle", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("AnnotationURL", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("AnnotationText", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")));
        }
        
        /// <summary>
        /// <para>
        /// AnnotationType provides for non-documentation notes and annotations to be embedded in data and structure messages. It provides optional fields for providing a title, a type description, a URI, and the text of the annotation.
        /// </para>
        /// <para>
        /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
        /// </para>
        /// </summary>
        public AnnotationType() {
        }
        
        /// <summary>
        /// <para>
        /// AnnotationTitle provides a title for the annotation.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
        /// </para>
        /// </summary>
        public string AnnotationTitle {
            get {
                XElement x = this.GetElement(XName.Get("AnnotationTitle", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AnnotationTitle", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// AnnotationType is used to distinguish between annotations designed to support various uses. The types are not enumerated, as these can be specified by the user or creator of the annotations. The definitions and use of annotation types should be documented by their creator.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
        /// </para>
        /// </summary>
        public string AnnotationType1 {
            get {
                XElement x = this.GetElement(XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// This is a URI - typically a URL - which points to an external resource which may contain or supplement the annotation. If a specific behavior is desired, an annotation type should be defined which specifies the use of this field more exactly.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
        /// </para>
        /// </summary>
        public System.Uri AnnotationURL {
            get {
                XElement x = this.GetElement(XName.Get("AnnotationURL", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("AnnotationURL", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// This is a language-specific string which holds the text oif the annotation.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AnnotationTitle?, AnnotationType1?, AnnotationURL?, AnnotationText*)
        /// </para>
        /// </summary>
        public IList<TextType> AnnotationText {
            get {
                if ((this.AnnotationTextField == null)) {
                    this.AnnotationTextField = new XTypedList<TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("AnnotationText", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                }
                return this.AnnotationTextField;
            }
            set {
                if ((value == null)) {
                    this.AnnotationTextField = null;
                }
                else {
                    if ((this.AnnotationTextField == null)) {
                        this.AnnotationTextField = XTypedList<TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AnnotationText", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                    }
                    else {
                        XTypedServices.SetList<TextType>(this.AnnotationTextField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnnotationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AnnotationTitle", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(string));
            localElementDictionary.Add(XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(string));
            localElementDictionary.Add(XName.Get("AnnotationURL", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AnnotationText", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(TextType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// AnnotationsType provides for a list of annotations to be attached to data and structure messages.
    /// </para>
    /// <para>
    /// Regular expression: (Annotation+)
    /// </para>
    /// </summary>
    public partial class AnnotationsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AnnotationType> AnnotationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AnnotationsType(XElement xe) { return XTypedServices.ToXTypedElement<AnnotationsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnnotationsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Annotation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")));
        }
        
        /// <summary>
        /// <para>
        /// AnnotationsType provides for a list of annotations to be attached to data and structure messages.
        /// </para>
        /// <para>
        /// Regular expression: (Annotation+)
        /// </para>
        /// </summary>
        public AnnotationsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Annotation+)
        /// </para>
        /// </summary>
        public IList<AnnotationType> Annotation {
            get {
                if ((this.AnnotationField == null)) {
                    this.AnnotationField = new XTypedList<AnnotationType>(this, LinqToXsdTypeManager.Instance, XName.Get("Annotation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                }
                return this.AnnotationField;
            }
            set {
                if ((value == null)) {
                    this.AnnotationField = null;
                }
                else {
                    if ((this.AnnotationField == null)) {
                        this.AnnotationField = XTypedList<AnnotationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Annotation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"));
                    }
                    else {
                        XTypedServices.SetList<AnnotationType>(this.AnnotationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AnnotationsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnnotationsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Annotation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(AnnotationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// PeriodType provides a list of tokens for specifying common periods: Quarterly: Q1, Q2, Q3, Q4; Weekly: W1 - W52; Triannual: T1, T2, T3; Biannual: B1, B2. These values appear after a four-digit year indicator, followed by a dash (ie, 2005-Q1).
    /// </para>
    /// </summary>
    public sealed class PeriodType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        @"(\d\d\d\d\-Q1|\d\d\d\d\-Q2|\d\d\d\d\-Q3|\d\d\d\d\-Q4|\d\d\d\d\-T1|\d\d\d\d\-T2|\d\d\d\d\-T3|\d\d\d\d\-B1|\d\d\d\d\-B2|\d\d\d\d\-W1|\d\d\d\d\-W2|\d\d\d\d\-W3|\d\d\d\d\-W4|\d\d\d\d\-W5|\d\d\d\d\-W6|\d\d\d\d\-W7|\d\d\d\d\-W8|\d\d\d\d\-W9|\d\d\d\d\-W10|\d\d\d\d\-W11|\d\d\d\d\-W12|\d\d\d\d\-W13|\d\d\d\d\-W14|\d\d\d\d\-W15|\d\d\d\d\-W16|\d\d\d\d\-W17|\d\d\d\d\-W18|\d\d\d\d\-W19|\d\d\d\d\-W20|\d\d\d\d\-W21|\d\d\d\d\-W22|\d\d\d\d\-W23|\d\d\d\d\-W24|\d\d\d\d\-W25|\d\d\d\d\-W26|\d\d\d\d\-W27|\d\d\d\d\-W28|\d\d\d\d\-W29|\d\d\d\d\-W30|\d\d\d\d\-W31|\d\d\d\d\-W32|\d\d\d\d\-W33|\d\d\d\d\-W34|\d\d\d\d\-W35|\d\d\d\d\-W36|\d\d\d\d\-W37|\d\d\d\d\-W38|\d\d\d\d\-W39|\d\d\d\d\-W40|\d\d\d\d\-W41|\d\d\d\d\-W42|\d\d\d\d\-W43|\d\d\d\d\-W44|\d\d\d\d\-W45|\d\d\d\d\-W46|\d\d\d\d\-W47|\d\d\d\d\-W48|\d\d\d\d\-W49|\d\d\d\d\-W50|\d\d\d\d\-W51|\d\d\d\d\-W52)"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PeriodType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// TIME_PERIOD is not completely expressable in XML Schema's date type: instead we use the union of dateTime, date, gYearMonth, and gYear. The default name for the concept is TIME_PERIOD. Bi-annual, tri-annual, quarterly, and weekly periods have special formats (see PeriodType, above), but other periods would be described in terms of their beginning date or time (eg, a period of a decade is identified with a four-digit year corresponding to the decades' first year).
    /// </para>
    /// </summary>
    public sealed class TimePeriodType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYearMonth), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear), null),
                    Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.PeriodType.TypeDefinition});
        
        private TimePeriodType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// ActionType provides a list of actions, describing the intention of the data transmission from the sender's side. Each action provided at the dataset or metadataset level applies to the entire dataset for which it is given. Note that the actions indicated in the Message Header are optional, and used to summarize specific actions indicated with this data type for all registry interactions. The "Informational" value is used when the message contains information in response to a query, rather than being used to invoke a maintenance activity.
    /// </para>
    /// </summary>
    public sealed class ActionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Append",
                        "Replace",
                        "Delete",
                        "Information"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ActionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// IDType provides a type which is used for restricting the characters in codes and IDs throughout all SDMX-ML messages. Valid characters include A-Z, a-z, @, 0-9, _, -, $.
    /// </para>
    /// </summary>
    public sealed class IDType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([A-Z]|[a-z]|\\*|@|[0-9]|_|$|\\-)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private IDType() {
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.common;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.message;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.query;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.common;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.registry;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.structure;
    
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
    /// </para>
    /// </summary>
    public abstract partial class DataSetType : XTypedElement, IXMetaData {
        
         public static explicit operator DataSetType(XElement xe) {  return (DataSetType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public DataSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri keyFamilyURI {
            get {
                XAttribute x = this.Attribute(XName.Get("keyFamilyURI", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("keyFamilyURI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                XAttribute x = this.Attribute(XName.Get("datasetID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("datasetID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeAgencyId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeAgencyId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowAgencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowAgencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                XAttribute x = this.Attribute(XName.Get("action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingBeginDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingBeginDate", this, XName.Get("reportingBeginDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingEndDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingEndDate", this, XName.Get("reportingEndDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validFromDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFromDate", this, XName.Get("validFromDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validToDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validToDate", this, XName.Get("validToDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationYear", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("publicationYear", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationPeriod", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "publicationPeriod", this, XName.Get("publicationPeriod", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class GroupType : XTypedElement, IXMetaData {
        
         public static explicit operator GroupType(XElement xe) {  return (GroupType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class SeriesType : XTypedElement, IXMetaData {
        
         public static explicit operator SeriesType(XElement xe) {  return (SeriesType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public SeriesType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class ObsType : XTypedElement, IXMetaData {
        
         public static explicit operator ObsType(XElement xe) {  return (ObsType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public ObsType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
    /// </para>
    /// </summary>
    public partial class DataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DataSetType ContentField;
        
         public static explicit operator DataSet(XElement xe) { return XTypedServices.ToXTypedElement<DataSet, DataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public DataSet() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public DataSet(DataSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public DataSetType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri keyFamilyURI {
            get {
                return this.ContentField.keyFamilyURI;
            }
            set {
                this.ContentField.keyFamilyURI = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                return this.ContentField.datasetID;
            }
            set {
                this.ContentField.datasetID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                return this.ContentField.dataProviderSchemeAgencyId;
            }
            set {
                this.ContentField.dataProviderSchemeAgencyId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                return this.ContentField.dataProviderSchemeId;
            }
            set {
                this.ContentField.dataProviderSchemeId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                return this.ContentField.dataProviderID;
            }
            set {
                this.ContentField.dataProviderID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                return this.ContentField.dataflowAgencyID;
            }
            set {
                this.ContentField.dataflowAgencyID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                return this.ContentField.dataflowID;
            }
            set {
                this.ContentField.dataflowID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                return this.ContentField.action;
            }
            set {
                this.ContentField.action = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                return this.ContentField.reportingBeginDate;
            }
            set {
                this.ContentField.reportingBeginDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                return this.ContentField.reportingEndDate;
            }
            set {
                this.ContentField.reportingEndDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                return this.ContentField.validFromDate;
            }
            set {
                this.ContentField.validFromDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                return this.ContentField.validToDate;
            }
            set {
                this.ContentField.validToDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                return this.ContentField.publicationYear;
            }
            set {
                this.ContentField.publicationYear = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                return this.ContentField.publicationPeriod;
            }
            set {
                this.ContentField.publicationPeriod = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataSet Load(string xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Parse(string xml) {
            return XTypedServices.Parse<DataSet, DataSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DataSet(((DataSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DataSetType ContentField) {
            this.ContentField = ((DataSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Group : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GroupType ContentField;
        
         public static explicit operator Group(XElement xe) { return XTypedServices.ToXTypedElement<Group, GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Group() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Group(GroupType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public GroupType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Group Load(string xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Parse(string xml) {
            return XTypedServices.Parse<Group, GroupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Group(((GroupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GroupType ContentField) {
            this.ContentField = ((GroupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Series : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SeriesType ContentField;
        
         public static explicit operator Series(XElement xe) { return XTypedServices.ToXTypedElement<Series, SeriesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Series() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Series(SeriesType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public SeriesType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Series Load(string xmlFile) {
            return XTypedServices.Load<Series, SeriesType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Series Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Series, SeriesType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Series Parse(string xml) {
            return XTypedServices.Parse<Series, SeriesType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Series(((SeriesType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SeriesType ContentField) {
            this.ContentField = ((SeriesType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Obs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObsType ContentField;
        
         public static explicit operator Obs(XElement xe) { return XTypedServices.ToXTypedElement<Obs, ObsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Obs() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Obs(ObsType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ObsType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Obs Load(string xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Parse(string xml) {
            return XTypedServices.Parse<Obs, ObsType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Obs(((ObsType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ObsType ContentField) {
            this.ContentField = ((ObsType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("ConstraintType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
            typeDictionary.Add(XName.Get("CubeRegionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.CubeRegionType));
            typeDictionary.Add(XName.Get("MetadataConceptSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.MetadataConceptSetType));
            typeDictionary.Add(XName.Get("MemberType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.MemberType));
            typeDictionary.Add(XName.Get("MemberValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.MemberValueType));
            typeDictionary.Add(XName.Get("KeySetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.KeySetType));
            typeDictionary.Add(XName.Get("KeyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.KeyType));
            typeDictionary.Add(XName.Get("ReleaseCalendarType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ReleaseCalendarType));
            typeDictionary.Add(XName.Get("ReferencePeriodType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ReferencePeriodType));
            typeDictionary.Add(XName.Get("TextType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            typeDictionary.Add(XName.Get("AnnotationType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationType));
            typeDictionary.Add(XName.Get("AnnotationsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
            typeDictionary.Add(XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSetType));
            typeDictionary.Add(XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.GroupType));
            typeDictionary.Add(XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.SeriesType));
            typeDictionary.Add(XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.ObsType));
            typeDictionary.Add(XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSetType));
            typeDictionary.Add(XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.GroupType));
            typeDictionary.Add(XName.Get("SectionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.SectionType));
            typeDictionary.Add(XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.ObsType));
            typeDictionary.Add(XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSetType));
            typeDictionary.Add(XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.GroupType));
            typeDictionary.Add(XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.SeriesType));
            typeDictionary.Add(XName.Get("SeriesKeyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.SeriesKeyType));
            typeDictionary.Add(XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.ObsType));
            typeDictionary.Add(XName.Get("ValuesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.ValuesType));
            typeDictionary.Add(XName.Get("ValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.ValueType));
            typeDictionary.Add(XName.Get("ObsValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.ObsValueType));
            typeDictionary.Add(XName.Get("MetadataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSetType));
            typeDictionary.Add(XName.Get("AttributeValueSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.AttributeValueSetType));
            typeDictionary.Add(XName.Get("TargetValuesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.TargetValuesType));
            typeDictionary.Add(XName.Get("ComponentValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.ComponentValueType));
            typeDictionary.Add(XName.Get("ReportedAttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.ReportedAttributeType));
            typeDictionary.Add(XName.Get("MessageType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType));
            typeDictionary.Add(XName.Get("StructureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.StructureType));
            typeDictionary.Add(XName.Get("GenericDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericDataType));
            typeDictionary.Add(XName.Get("UtilityDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.UtilityDataType));
            typeDictionary.Add(XName.Get("CompactDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CompactDataType));
            typeDictionary.Add(XName.Get("CrossSectionalDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CrossSectionalDataType));
            typeDictionary.Add(XName.Get("GenericMetadataType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericMetadataType));
            typeDictionary.Add(XName.Get("MetadataReportType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MetadataReportType));
            typeDictionary.Add(XName.Get("QueryMessageType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.QueryMessageType));
            typeDictionary.Add(XName.Get("RegistryInterfaceType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.RegistryInterfaceType));
            typeDictionary.Add(XName.Get("MessageGroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageGroupType));
            typeDictionary.Add(XName.Get("HeaderType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.HeaderType));
            typeDictionary.Add(XName.Get("PartyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.PartyType));
            typeDictionary.Add(XName.Get("ContactType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.ContactType));
            typeDictionary.Add(XName.Get("OrganisationSchemesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType));
            typeDictionary.Add(XName.Get("OrganisationSchemeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemeType));
            typeDictionary.Add(XName.Get("DataProvidersType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataProvidersType));
            typeDictionary.Add(XName.Get("DataConsumersType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataConsumersType));
            typeDictionary.Add(XName.Get("AgenciesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.AgenciesType));
            typeDictionary.Add(XName.Get("OrganisationType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationType));
            typeDictionary.Add(XName.Get("ContactType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ContactType));
            typeDictionary.Add(XName.Get("DataflowsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType));
            typeDictionary.Add(XName.Get("DataflowType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowType));
            typeDictionary.Add(XName.Get("KeyFamilyRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamilyRefType));
            typeDictionary.Add(XName.Get("CategoryRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategoryRefType));
            typeDictionary.Add(XName.Get("CategoryIDType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategoryIDType));
            typeDictionary.Add(XName.Get("MetadataflowsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType));
            typeDictionary.Add(XName.Get("MetadataflowType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowType));
            typeDictionary.Add(XName.Get("MetadataStructureRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureRefType));
            typeDictionary.Add(XName.Get("CategorySchemesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType));
            typeDictionary.Add(XName.Get("CategorySchemeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemeType));
            typeDictionary.Add(XName.Get("CategoryType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategoryType));
            typeDictionary.Add(XName.Get("CodeListsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType));
            typeDictionary.Add(XName.Get("CodeListType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListType));
            typeDictionary.Add(XName.Get("CodeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeType));
            typeDictionary.Add(XName.Get("HierarchicalCodelistsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType));
            typeDictionary.Add(XName.Get("HierarchicalCodelistType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistType));
            typeDictionary.Add(XName.Get("HierarchyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchyType));
            typeDictionary.Add(XName.Get("LevelType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.LevelType));
            typeDictionary.Add(XName.Get("CodelistRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodelistRefType));
            typeDictionary.Add(XName.Get("CodeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeRefType));
            typeDictionary.Add(XName.Get("ConceptsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType));
            typeDictionary.Add(XName.Get("ConceptType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptType));
            typeDictionary.Add(XName.Get("ConceptSchemeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptSchemeType));
            typeDictionary.Add(XName.Get("MetadataStructureDefinitionsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType));
            typeDictionary.Add(XName.Get("MetadataStructureDefinitionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionType));
            typeDictionary.Add(XName.Get("TargetIdentifiersType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TargetIdentifiersType));
            typeDictionary.Add(XName.Get("FullTargetIdentifierType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.FullTargetIdentifierType));
            typeDictionary.Add(XName.Get("IdentifierComponentType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.IdentifierComponentType));
            typeDictionary.Add(XName.Get("PartialTargetIdentifierType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.PartialTargetIdentifierType));
            typeDictionary.Add(XName.Get("RepresentationSchemeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.RepresentationSchemeType));
            typeDictionary.Add(XName.Get("ReportStructureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportStructureType));
            typeDictionary.Add(XName.Get("MetadataAttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataAttributeType));
            typeDictionary.Add(XName.Get("TextFormatType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TextFormatType));
            typeDictionary.Add(XName.Get("KeyFamiliesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType));
            typeDictionary.Add(XName.Get("KeyFamilyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamilyType));
            typeDictionary.Add(XName.Get("ComponentsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ComponentsType));
            typeDictionary.Add(XName.Get("DimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DimensionType));
            typeDictionary.Add(XName.Get("TimeDimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TimeDimensionType));
            typeDictionary.Add(XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.GroupType));
            typeDictionary.Add(XName.Get("AttachmentConstraintRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.AttachmentConstraintRefType));
            typeDictionary.Add(XName.Get("ProvisionAgreementRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProvisionAgreementRefType));
            typeDictionary.Add(XName.Get("DataProviderRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataProviderRefType));
            typeDictionary.Add(XName.Get("AttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.AttributeType));
            typeDictionary.Add(XName.Get("PrimaryMeasureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.PrimaryMeasureType));
            typeDictionary.Add(XName.Get("CrossSectionalMeasureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CrossSectionalMeasureType));
            typeDictionary.Add(XName.Get("StructureSetsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType));
            typeDictionary.Add(XName.Get("StructureSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetType));
            typeDictionary.Add(XName.Get("RelatedStructuresType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.RelatedStructuresType));
            typeDictionary.Add(XName.Get("CategorySchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemeRefType));
            typeDictionary.Add(XName.Get("ConceptSchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptSchemeRefType));
            typeDictionary.Add(XName.Get("OrganisationSchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemeRefType));
            typeDictionary.Add(XName.Get("HierarchicalCodelistRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistRefType));
            typeDictionary.Add(XName.Get("StructureMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureMapType));
            typeDictionary.Add(XName.Get("CodelistMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodelistMapType));
            typeDictionary.Add(XName.Get("CodeMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeMapType));
            typeDictionary.Add(XName.Get("ComponentMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ComponentMapType));
            typeDictionary.Add(XName.Get("RepresentationMapRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.RepresentationMapRefType));
            typeDictionary.Add(XName.Get("CategorySchemeMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemeMapType));
            typeDictionary.Add(XName.Get("CategoryMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategoryMapType));
            typeDictionary.Add(XName.Get("ConceptSchemeMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptSchemeMapType));
            typeDictionary.Add(XName.Get("ConceptMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptMapType));
            typeDictionary.Add(XName.Get("OrganisationSchemeMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemeMapType));
            typeDictionary.Add(XName.Get("OrganisationMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationMapType));
            typeDictionary.Add(XName.Get("ReportingTaxonomiesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType));
            typeDictionary.Add(XName.Get("ReportingTaxonomyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomyType));
            typeDictionary.Add(XName.Get("MetadataflowRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowRefType));
            typeDictionary.Add(XName.Get("DataflowRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowRefType));
            typeDictionary.Add(XName.Get("ProcessesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType));
            typeDictionary.Add(XName.Get("ProcessType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessType));
            typeDictionary.Add(XName.Get("ProcessStepType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessStepType));
            typeDictionary.Add(XName.Get("TransitionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TransitionType));
            typeDictionary.Add(XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSetType));
            typeDictionary.Add(XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.GroupType));
            typeDictionary.Add(XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.SeriesType));
            typeDictionary.Add(XName.Get("KeyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.KeyType));
            typeDictionary.Add(XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.ObsType));
            typeDictionary.Add(XName.Get("QueryType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.QueryType));
            typeDictionary.Add(XName.Get("DataWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.DataWhereType));
            typeDictionary.Add(XName.Get("MetadataWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.MetadataWhereType));
            typeDictionary.Add(XName.Get("AndType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.AndType));
            typeDictionary.Add(XName.Get("OrType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.OrType));
            typeDictionary.Add(XName.Get("DimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.DimensionType));
            typeDictionary.Add(XName.Get("StructureComponentType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.StructureComponentType));
            typeDictionary.Add(XName.Get("AttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.AttributeType));
            typeDictionary.Add(XName.Get("CodelistType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.CodelistType));
            typeDictionary.Add(XName.Get("CategoryType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.CategoryType));
            typeDictionary.Add(XName.Get("KeyFamilyWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.KeyFamilyWhereType));
            typeDictionary.Add(XName.Get("MetadataStructureWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.MetadataStructureWhereType));
            typeDictionary.Add(XName.Get("CodelistWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.CodelistWhereType));
            typeDictionary.Add(XName.Get("ConceptWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.ConceptWhereType));
            typeDictionary.Add(XName.Get("AgencyWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.AgencyWhereType));
            typeDictionary.Add(XName.Get("DataProviderWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.DataProviderWhereType));
            typeDictionary.Add(XName.Get("TimeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.TimeType));
            typeDictionary.Add(XName.Get("StructureSetWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.StructureSetWhereType));
            typeDictionary.Add(XName.Get("HierarchicalCodelistWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.HierarchicalCodelistWhereType));
            typeDictionary.Add(XName.Get("ReportingTaxonomyWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.ReportingTaxonomyWhereType));
            typeDictionary.Add(XName.Get("DataflowWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.DataflowWhereType));
            typeDictionary.Add(XName.Get("MetadataflowWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.MetadataflowWhereType));
            typeDictionary.Add(XName.Get("ProcessWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.ProcessWhereType));
            typeDictionary.Add(XName.Get("OrganisationSchemeWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.OrganisationSchemeWhereType));
            typeDictionary.Add(XName.Get("ConceptSchemeWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.ConceptSchemeWhereType));
            typeDictionary.Add(XName.Get("CategorySchemeWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.CategorySchemeWhereType));
            typeDictionary.Add(XName.Get("SubmitSubscriptionRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitSubscriptionRequestType));
            typeDictionary.Add(XName.Get("SubmitSubscriptionResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitSubscriptionResponseType));
            typeDictionary.Add(XName.Get("NotifyRegistryEventType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.NotifyRegistryEventType));
            typeDictionary.Add(XName.Get("SubmitRegistrationRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitRegistrationRequestType));
            typeDictionary.Add(XName.Get("SubmitRegistrationResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitRegistrationResponseType));
            typeDictionary.Add(XName.Get("QueryRegistrationRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryRegistrationRequestType));
            typeDictionary.Add(XName.Get("QueryRegistrationResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryRegistrationResponseType));
            typeDictionary.Add(XName.Get("SubmitStructureRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitStructureRequestType));
            typeDictionary.Add(XName.Get("SubmitStructureResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitStructureResponseType));
            typeDictionary.Add(XName.Get("QueryStructureRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryStructureRequestType));
            typeDictionary.Add(XName.Get("QueryStructureResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryStructureResponseType));
            typeDictionary.Add(XName.Get("SubmitProvisioningRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitProvisioningRequestType));
            typeDictionary.Add(XName.Get("SubmitProvisioningResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitProvisioningResponseType));
            typeDictionary.Add(XName.Get("QueryProvisioningRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryProvisioningRequestType));
            typeDictionary.Add(XName.Get("QueryProvisioningResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryProvisioningResponseType));
            typeDictionary.Add(XName.Get("SubscriptionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubscriptionType));
            typeDictionary.Add(XName.Get("ValidityPeriodType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ValidityPeriodType));
            typeDictionary.Add(XName.Get("EventSelectorType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.EventSelectorType));
            typeDictionary.Add(XName.Get("StructuralRepositoryEventsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.StructuralRepositoryEventsType));
            typeDictionary.Add(XName.Get("ProvisioningRepositoryEventsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ProvisioningRepositoryEventsType));
            typeDictionary.Add(XName.Get("DataRegistrationEventsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DataRegistrationEventsType));
            typeDictionary.Add(XName.Get("MetadataRegistrationEventsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.MetadataRegistrationEventsType));
            typeDictionary.Add(XName.Get("StructuralEventType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.StructuralEventType));
            typeDictionary.Add(XName.Get("ProvisioningEventType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ProvisioningEventType));
            typeDictionary.Add(XName.Get("RegistrationEventType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.RegistrationEventType));
            typeDictionary.Add(XName.Get("ProvisionAgreementType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ProvisionAgreementType));
            typeDictionary.Add(XName.Get("DatasourceType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DatasourceType));
            typeDictionary.Add(XName.Get("QueryableDatasourceType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryableDatasourceType));
            typeDictionary.Add(XName.Get("ProvisioningStatusType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ProvisioningStatusType));
            typeDictionary.Add(XName.Get("RegistrationType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.RegistrationType));
            typeDictionary.Add(XName.Get("RegistrationStatusType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.RegistrationStatusType));
            typeDictionary.Add(XName.Get("QueryResultType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryResultType));
            typeDictionary.Add(XName.Get("ResultType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ResultType));
            typeDictionary.Add(XName.Get("StructureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.StructureType));
            typeDictionary.Add(XName.Get("SubmittedStructureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmittedStructureType));
            typeDictionary.Add(XName.Get("SubmissionResultType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmissionResultType));
            typeDictionary.Add(XName.Get("ProvisionAgreementRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ProvisionAgreementRefType));
            typeDictionary.Add(XName.Get("MetadataflowRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.MetadataflowRefType));
            typeDictionary.Add(XName.Get("DataflowRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DataflowRefType));
            typeDictionary.Add(XName.Get("DataProviderRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DataProviderRefType));
            typeDictionary.Add(XName.Get("AgencyRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.AgencyRefType));
            typeDictionary.Add(XName.Get("CodelistRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.CodelistRefType));
            typeDictionary.Add(XName.Get("CategorySchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.CategorySchemeRefType));
            typeDictionary.Add(XName.Get("ConceptSchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ConceptSchemeRefType));
            typeDictionary.Add(XName.Get("OrganisationSchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.OrganisationSchemeRefType));
            typeDictionary.Add(XName.Get("KeyFamilyRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.KeyFamilyRefType));
            typeDictionary.Add(XName.Get("MetadataStructureRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.MetadataStructureRefType));
            typeDictionary.Add(XName.Get("HierarchicalCodelistRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.HierarchicalCodelistRefType));
            typeDictionary.Add(XName.Get("StructureSetRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.StructureSetRefType));
            typeDictionary.Add(XName.Get("ProcessRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ProcessRefType));
            typeDictionary.Add(XName.Get("ReportingTaxonomyRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ReportingTaxonomyRefType));
            typeDictionary.Add(XName.Get("StatusMessageType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.StatusMessageType));
            typeDictionary.Add(XName.Get("MetadataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSetType));
            typeDictionary.Add(XName.Get("KeySetType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/common"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.common.KeySetType));
            typeDictionary.Add(XName.Get("ProvisionAgreementType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.registry.ProvisionAgreementType));
            typeDictionary.Add(XName.Get("ProvisionAgreementRefType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.registry.ProvisionAgreementRefType));
            typeDictionary.Add(XName.Get("DataflowRefType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.registry.DataflowRefType));
            typeDictionary.Add(XName.Get("DataProviderRefType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.registry.DataProviderRefType));
            typeDictionary.Add(XName.Get("PrimaryMeasureType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        ""), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.structure.PrimaryMeasureType));
            typeDictionary.Add(XName.Get("MetadataAttributeType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        ""), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.structure.MetadataAttributeType));
            typeDictionary.Add(XName.Get("DimensionType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        ""), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.structure.DimensionType));
            typeDictionary.Add(XName.Get("TimeDimensionType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        ""), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.structure.TimeDimensionType));
            typeDictionary.Add(XName.Get("AttributeType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        ""), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.structure.AttributeType));
            typeDictionary.Add(XName.Get("CrossSectionalMeasureType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        ""), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.structure.CrossSectionalMeasureType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet));
            elementDictionary.Add(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Group));
            elementDictionary.Add(XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Series));
            elementDictionary.Add(XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Obs));
            elementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet));
            elementDictionary.Add(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Group));
            elementDictionary.Add(XName.Get("Section", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Section));
            elementDictionary.Add(XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Obs));
            elementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet));
            elementDictionary.Add(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet));
            elementDictionary.Add(XName.Get("Structure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.Structure));
            elementDictionary.Add(XName.Get("GenericData", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericData));
            elementDictionary.Add(XName.Get("UtilityData", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.UtilityData));
            elementDictionary.Add(XName.Get("CompactData", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CompactData));
            elementDictionary.Add(XName.Get("CrossSectionalData", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CrossSectionalData));
            elementDictionary.Add(XName.Get("GenericMetadata", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericMetadata));
            elementDictionary.Add(XName.Get("MetadataReport", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MetadataReport));
            elementDictionary.Add(XName.Get("RegistryInterface", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.RegistryInterface));
            elementDictionary.Add(XName.Get("QueryMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.QueryMessage));
            elementDictionary.Add(XName.Get("MessageGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageGroup));
            elementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.Header));
            elementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet));
            elementDictionary.Add(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Group));
            elementDictionary.Add(XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Series));
            elementDictionary.Add(XName.Get("Key", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Key));
            elementDictionary.Add(XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Obs));
            elementDictionary.Add(XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.Query));
            elementDictionary.Add(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSetType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Group), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.GroupType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Series), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.SeriesType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Obs), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.ObsType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSetType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Group), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.GroupType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Section), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.SectionType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Obs), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.ObsType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSetType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSetType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.Structure), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.StructureType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericData), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericDataType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.UtilityData), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.UtilityDataType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CompactData), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CompactDataType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CrossSectionalData), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CrossSectionalDataType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericMetadata), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericMetadataType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MetadataReport), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MetadataReportType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.RegistryInterface), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.RegistryInterfaceType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.QueryMessage), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.QueryMessageType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageGroup), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageGroupType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.Header), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.HeaderType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSetType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Group), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.GroupType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Series), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.SeriesType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Key), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.KeyType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Obs), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.ObsType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.Query), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.QueryType));
            wrapperDictionary.Add(typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet), typeof(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSetType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public DataSet DataSet {  get {return rootObject as DataSet; } }

    public Group Group {  get {return rootObject as Group; } }

    public Series Series {  get {return rootObject as Series; } }

    public Obs Obs {  get {return rootObject as Obs; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Series root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet DataSet {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Group Group {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Group; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Series Series {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Series; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Obs Obs {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Obs; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet DataSet1 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Group Group1 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Group; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Section Section {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Section; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Obs Obs1 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Obs; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet DataSet2 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet MetadataSet {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.Structure Structure {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.Structure; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericData GenericData {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericData; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.UtilityData UtilityData {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.UtilityData; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CompactData CompactData {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CompactData; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CrossSectionalData CrossSectionalData {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CrossSectionalData; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericMetadata GenericMetadata {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericMetadata; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MetadataReport MetadataReport {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MetadataReport; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.RegistryInterface RegistryInterface {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.RegistryInterface; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.QueryMessage QueryMessage {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.QueryMessage; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageGroup MessageGroup {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageGroup; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.Header Header {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.Header; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet DataSet3 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Group Group2 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Group; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Series Series1 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Series; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Key Key {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Key; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Obs Obs2 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Obs; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.Query Query {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.Query; } }

    public global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet MetadataSet1 {  get {return rootObject as global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Series root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Section root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.Structure root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.UtilityData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CompactData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.CrossSectionalData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.GenericMetadata root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MetadataReport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.RegistryInterface root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.QueryMessage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.Header root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Series root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Key root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.Query root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
    /// </para>
    /// </summary>
    public abstract partial class DataSetType : XTypedElement, IXMetaData {
        
         public static explicit operator DataSetType(XElement xe) {  return (DataSetType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public DataSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri keyFamilyURI {
            get {
                XAttribute x = this.Attribute(XName.Get("keyFamilyURI", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("keyFamilyURI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                XAttribute x = this.Attribute(XName.Get("datasetID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("datasetID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeAgencyId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeAgencyId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowAgencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowAgencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                XAttribute x = this.Attribute(XName.Get("action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingBeginDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingBeginDate", this, XName.Get("reportingBeginDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingEndDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingEndDate", this, XName.Get("reportingEndDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validFromDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFromDate", this, XName.Get("validFromDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validToDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validToDate", this, XName.Get("validToDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationYear", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("publicationYear", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationPeriod", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "publicationPeriod", this, XName.Get("publicationPeriod", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. 
    /// </para>
    /// </summary>
    public abstract partial class GroupType : XTypedElement, IXMetaData {
        
         public static explicit operator GroupType(XElement xe) {  return (GroupType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. 
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SectionType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class SectionType : XTypedElement, IXMetaData {
        
         public static explicit operator SectionType(XElement xe) {  return (SectionType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SectionType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public SectionType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SectionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. It is capable of expressing the value and attributes of any single available cross-sectional measure (when extended).
    /// </para>
    /// </summary>
    public abstract partial class ObsType : XTypedElement, IXMetaData {
        
         public static explicit operator ObsType(XElement xe) {  return (ObsType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. It is capable of expressing the value and attributes of any single available cross-sectional measure (when extended).
        /// </para>
        /// </summary>
        public ObsType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
    /// </para>
    /// </summary>
    public partial class DataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DataSetType ContentField;
        
         public static explicit operator DataSet(XElement xe) { return XTypedServices.ToXTypedElement<DataSet, DataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public DataSet() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public DataSet(DataSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public DataSetType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri keyFamilyURI {
            get {
                return this.ContentField.keyFamilyURI;
            }
            set {
                this.ContentField.keyFamilyURI = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                return this.ContentField.datasetID;
            }
            set {
                this.ContentField.datasetID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                return this.ContentField.dataProviderSchemeAgencyId;
            }
            set {
                this.ContentField.dataProviderSchemeAgencyId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                return this.ContentField.dataProviderSchemeId;
            }
            set {
                this.ContentField.dataProviderSchemeId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                return this.ContentField.dataProviderID;
            }
            set {
                this.ContentField.dataProviderID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                return this.ContentField.dataflowAgencyID;
            }
            set {
                this.ContentField.dataflowAgencyID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                return this.ContentField.dataflowID;
            }
            set {
                this.ContentField.dataflowID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                return this.ContentField.action;
            }
            set {
                this.ContentField.action = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                return this.ContentField.reportingBeginDate;
            }
            set {
                this.ContentField.reportingBeginDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                return this.ContentField.reportingEndDate;
            }
            set {
                this.ContentField.reportingEndDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                return this.ContentField.validFromDate;
            }
            set {
                this.ContentField.validFromDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                return this.ContentField.validToDate;
            }
            set {
                this.ContentField.validToDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                return this.ContentField.publicationYear;
            }
            set {
                this.ContentField.publicationYear = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                return this.ContentField.publicationPeriod;
            }
            set {
                this.ContentField.publicationPeriod = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataSet Load(string xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Parse(string xml) {
            return XTypedServices.Parse<DataSet, DataSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DataSet(((DataSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DataSetType ContentField) {
            this.ContentField = ((DataSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. 
    /// </para>
    /// </summary>
    public partial class Group : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GroupType ContentField;
        
         public static explicit operator Group(XElement xe) { return XTypedServices.ToXTypedElement<Group, GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. 
        /// </para>
        /// </summary>
        public Group() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. 
        /// </para>
        /// </summary>
        public Group(GroupType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public GroupType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Group Load(string xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Parse(string xml) {
            return XTypedServices.Parse<Group, GroupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Group(((GroupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GroupType ContentField) {
            this.ContentField = ((GroupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SectionType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Section : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SectionType ContentField;
        
         public static explicit operator Section(XElement xe) { return XTypedServices.ToXTypedElement<Section, SectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SectionType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Section() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// SectionType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Section(SectionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public SectionType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Section", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Section Load(string xmlFile) {
            return XTypedServices.Load<Section, SectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Section Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Section, SectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Section Parse(string xml) {
            return XTypedServices.Parse<Section, SectionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Section(((SectionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SectionType ContentField) {
            this.ContentField = ((SectionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. It is capable of expressing the value and attributes of any single available cross-sectional measure (when extended).
    /// </para>
    /// </summary>
    public partial class Obs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObsType ContentField;
        
         public static explicit operator Obs(XElement xe) { return XTypedServices.ToXTypedElement<Obs, ObsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. It is capable of expressing the value and attributes of any single available cross-sectional measure (when extended).
        /// </para>
        /// </summary>
        public Obs() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element. It is capable of expressing the value and attributes of any single available cross-sectional measure (when extended).
        /// </para>
        /// </summary>
        public Obs(ObsType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ObsType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Obs Load(string xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Parse(string xml) {
            return XTypedServices.Parse<Obs, ObsType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Obs(((ObsType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ObsType ContentField) {
            this.ContentField = ((ObsType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public DataSet DataSet {  get {return rootObject as DataSet; } }

    public Group Group {  get {return rootObject as Group; } }

    public Section Section {  get {return rootObject as Section; } }

    public Obs Obs {  get {return rootObject as Obs; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Section root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// DataSetType defines the structure of a data set. This consists of a key family reference which contains the ID of the key family, and the attribute values attached at the data set level. A DataSet may be used to transmit documentation (that is, only attribute values), data, or a combination of both. If providing only documentation, you need not send the complete set of attributes. If transmitting only data, the Group may be omitted if desired. Uniqueness constraints are defined for the attributes of the data set. If dataset-level attributes are sent in a delete message, then any valid attribute value will indicate that the current attribute value should be deleted. The keyFamilyURI attribute is provided to allow a URI (typically a URL) to be provided, pointing to an SDMX-ML Structure message describing the key family. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
    ///	
    /// </para>
    /// <para>
    /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
    /// </para>
    /// </summary>
    public partial class DataSetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroupType> GroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SeriesType> SeriesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator DataSetType(XElement xe) { return XTypedServices.ToXTypedElement<DataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataSetType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// DataSetType defines the structure of a data set. This consists of a key family reference which contains the ID of the key family, and the attribute values attached at the data set level. A DataSet may be used to transmit documentation (that is, only attribute values), data, or a combination of both. If providing only documentation, you need not send the complete set of attributes. If transmitting only data, the Group may be omitted if desired. Uniqueness constraints are defined for the attributes of the data set. If dataset-level attributes are sent in a delete message, then any valid attribute value will indicate that the current attribute value should be deleted. The keyFamilyURI attribute is provided to allow a URI (typically a URL) to be provided, pointing to an SDMX-ML Structure message describing the key family. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        ///	
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public DataSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public string KeyFamilyRef {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value, "KeyFamilyRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType Attributes {
            get {
                XElement x = this.GetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((ValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public IList<GroupType> Group {
            get {
                if ((this.GroupField == null)) {
                    this.GroupField = new XTypedList<GroupType>(this, LinqToXsdTypeManager.Instance, XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                }
                return this.GroupField;
            }
            set {
                if ((value == null)) {
                    this.GroupField = null;
                }
                else {
                    if ((this.GroupField == null)) {
                        this.GroupField = XTypedList<GroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<GroupType>(this.GroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public IList<SeriesType> Series {
            get {
                if ((this.SeriesField == null)) {
                    this.SeriesField = new XTypedList<SeriesType>(this, LinqToXsdTypeManager.Instance, XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                }
                return this.SeriesField;
            }
            set {
                if ((value == null)) {
                    this.SeriesField = null;
                }
                else {
                    if ((this.SeriesField == null)) {
                        this.SeriesField = XTypedList<SeriesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<SeriesType>(this.SeriesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri keyFamilyURI {
            get {
                XAttribute x = this.Attribute(XName.Get("keyFamilyURI", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("keyFamilyURI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                XAttribute x = this.Attribute(XName.Get("datasetID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("datasetID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeAgencyId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeAgencyId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowAgencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowAgencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                XAttribute x = this.Attribute(XName.Get("action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingBeginDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingBeginDate", this, XName.Get("reportingBeginDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingEndDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingEndDate", this, XName.Get("reportingEndDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validFromDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFromDate", this, XName.Get("validFromDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validToDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validToDate", this, XName.Get("validToDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationYear", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("publicationYear", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationPeriod", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "publicationPeriod", this, XName.Get("publicationPeriod", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataSetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(string));
            localElementDictionary.Add(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(ValuesType));
            localElementDictionary.Add(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(GroupType));
            localElementDictionary.Add(XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(SeriesType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The key values at the group level may be stated explicitly, and all which are not wildcarded listed in GroupKey - they must also all be given a value at the series level. It is not necessary to specify the group key, however, as this may be inferred from the values repeated at the series level. If only documentation (group-level attributes) are being transmitted, however, the GroupKey cannot be omitted. The type attribute contains the name of the declared group in the key family. If any group-level attributes are specified in a delete message, then any valid value supplied for the attribute indicates that the current attribute value should be deleted for the specified attribute.
    ///	
    /// </para>
    /// <para>
    /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
    /// </para>
    /// </summary>
    public partial class GroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SeriesType> SeriesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GroupType(XElement xe) { return XTypedServices.ToXTypedElement<GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GroupKey", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")), new NamedContentModelEntity(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")), new NamedContentModelEntity(XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")));
        }
        
        /// <summary>
        /// <para>
        /// The key values at the group level may be stated explicitly, and all which are not wildcarded listed in GroupKey - they must also all be given a value at the series level. It is not necessary to specify the group key, however, as this may be inferred from the values repeated at the series level. If only documentation (group-level attributes) are being transmitted, however, the GroupKey cannot be omitted. The type attribute contains the name of the declared group in the key family. If any group-level attributes are specified in a delete message, then any valid value supplied for the attribute indicates that the current attribute value should be deleted for the specified attribute.
        ///	
        /// </para>
        /// <para>
        /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType GroupKey {
            get {
                XElement x = this.GetElement(XName.Get("GroupKey", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((ValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("GroupKey", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType Attributes {
            get {
                XElement x = this.GetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((ValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
        /// </para>
        /// </summary>
        public IList<SeriesType> Series {
            get {
                if ((this.SeriesField == null)) {
                    this.SeriesField = new XTypedList<SeriesType>(this, LinqToXsdTypeManager.Instance, XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                }
                return this.SeriesField;
            }
            set {
                if ((value == null)) {
                    this.SeriesField = null;
                }
                else {
                    if ((this.SeriesField == null)) {
                        this.SeriesField = XTypedList<SeriesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<SeriesType>(this.SeriesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GroupKey?, Attributes?, Series*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("GroupKey", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(ValuesType));
            localElementDictionary.Add(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(ValuesType));
            localElementDictionary.Add(XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(SeriesType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesType specifies the structure of a series. This includes all of the key values, values for all the attributes, and the set of observations making up the series content. Messages may transmit only attributes, only data, or both. Regardless, the series key is always required. Key values appear at the Series level in an ordered sequence which corresponds to the key sequence in the key family. A series in a delete message need not supply more than the key, indicating that the entire series identified by that key should be deleted. If series attributes are sent in a delete message, any valid value specified for an attribute indicates that the attribute should be deleted.
    ///	
    /// </para>
    /// <para>
    /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
    /// </para>
    /// </summary>
    public partial class SeriesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ObsType> ObsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SeriesType(XElement xe) { return XTypedServices.ToXTypedElement<SeriesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SeriesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SeriesKey", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")), new NamedContentModelEntity(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")), new NamedContentModelEntity(XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")));
        }
        
        /// <summary>
        /// <para>
        /// SeriesType specifies the structure of a series. This includes all of the key values, values for all the attributes, and the set of observations making up the series content. Messages may transmit only attributes, only data, or both. Regardless, the series key is always required. Key values appear at the Series level in an ordered sequence which corresponds to the key sequence in the key family. A series in a delete message need not supply more than the key, indicating that the entire series identified by that key should be deleted. If series attributes are sent in a delete message, any valid value specified for an attribute indicates that the attribute should be deleted.
        ///	
        /// </para>
        /// <para>
        /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
        /// </para>
        /// </summary>
        public SeriesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
        /// </para>
        /// </summary>
        public SeriesKeyType SeriesKey {
            get {
                XElement x = this.GetElement(XName.Get("SeriesKey", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((SeriesKeyType)(x));
            }
            set {
                this.SetElement(XName.Get("SeriesKey", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType Attributes {
            get {
                XElement x = this.GetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((ValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ObsType> Obs {
            get {
                if ((this.ObsField == null)) {
                    this.ObsField = new XTypedList<ObsType>(this, LinqToXsdTypeManager.Instance, XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                }
                return this.ObsField;
            }
            set {
                if ((value == null)) {
                    this.ObsField = null;
                }
                else {
                    if ((this.ObsField == null)) {
                        this.ObsField = XTypedList<ObsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<ObsType>(this.ObsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SeriesKey, Attributes?, Obs*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SeriesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SeriesKey", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(SeriesKeyType));
            localElementDictionary.Add(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(ValuesType));
            localElementDictionary.Add(XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(ObsType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesKeyType defines the contents of a series key. Each non-time dimension must have a value supplied for it, in the order in which the dimensions are specified in the key family. 
    /// </para>
    /// <para>
    /// Regular expression: (Value+)
    /// </para>
    /// </summary>
    public partial class SeriesKeyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueType> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SeriesKeyType(XElement xe) { return XTypedServices.ToXTypedElement<SeriesKeyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SeriesKeyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")));
        }
        
        /// <summary>
        /// <para>
        /// SeriesKeyType defines the contents of a series key. Each non-time dimension must have a value supplied for it, in the order in which the dimensions are specified in the key family. 
        /// </para>
        /// <para>
        /// Regular expression: (Value+)
        /// </para>
        /// </summary>
        public SeriesKeyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Value+)
        /// </para>
        /// </summary>
        public IList<ValueType> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<ValueType>(this, LinqToXsdTypeManager.Instance, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<ValueType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<ValueType>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SeriesKeyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SeriesKeyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(ValueType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType defines the structure of an observation. This includes a time and observation value, as well as values for each of the attributes assigned at the observation level by the key family. In a delete message, only the time need be given, indicating that the observation identified by the key and time should be deleted. For an update message, both time and observation value are required. If any attributes appear in a delete message, any valid value supplied for an attribute indicates that the current value should be deleted.		
    ///	
    /// </para>
    /// <para>
    /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
    /// </para>
    /// </summary>
    public partial class ObsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ObsType(XElement xe) { return XTypedServices.ToXTypedElement<ObsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")), new NamedContentModelEntity(XName.Get("ObsValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")), new NamedContentModelEntity(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")));
        }
        
        /// <summary>
        /// <para>
        /// ObsType defines the structure of an observation. This includes a time and observation value, as well as values for each of the attributes assigned at the observation level by the key family. In a delete message, only the time need be given, indicating that the observation identified by the key and time should be deleted. For an update message, both time and observation value are required. If any attributes appear in a delete message, any valid value supplied for an attribute indicates that the current value should be deleted.		
        ///	
        /// </para>
        /// <para>
        /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
        /// </para>
        /// </summary>
        public ObsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
        /// </para>
        /// </summary>
        public object Time {
            get {
                XElement x = this.GetElement(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value, "Time", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
        /// </para>
        /// </summary>
        public ObsValueType ObsValue {
            get {
                XElement x = this.GetElement(XName.Get("ObsValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((ObsValueType)(x));
            }
            set {
                this.SetElement(XName.Get("ObsValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType Attributes {
            get {
                XElement x = this.GetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((ValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, ObsValue?, Attributes?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(object));
            localElementDictionary.Add(XName.Get("ObsValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(ObsValueType));
            localElementDictionary.Add(XName.Get("Attributes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(ValuesType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Value+)
    /// </para>
    /// </summary>
    public partial class ValuesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueType> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ValuesType(XElement xe) { return XTypedServices.ToXTypedElement<ValuesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ValuesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Value+)
        /// </para>
        /// </summary>
        public ValuesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Value+)
        /// </para>
        /// </summary>
        public IList<ValueType> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<ValueType>(this, LinqToXsdTypeManager.Instance, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<ValueType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<ValueType>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ValuesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValuesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(ValueType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ValueType is used to assign a single value to a concept, as for attribute values and key values. It has no element content. The startTime attribute is only used if the textFormat of the attribute is of the Timespan type in the key family (in which case the value field takes a duration).	
    ///	
    /// </para>
    /// </summary>
    public partial class ValueType : XTypedElement, IXMetaData {
        
         public static explicit operator ValueType(XElement xe) { return XTypedServices.ToXTypedElement<ValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ValueType is used to assign a single value to a concept, as for attribute values and key values. It has no element content. The startTime attribute is only used if the textFormat of the attribute is of the Timespan type in the key family (in which case the value field takes a duration).	
        ///	
        /// </para>
        /// </summary>
        public ValueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string concept {
            get {
                XAttribute x = this.Attribute(XName.Get("concept", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("concept", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string value {
            get {
                XAttribute x = this.Attribute(XName.Get("value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> startTime {
            get {
                XAttribute x = this.Attribute(XName.Get("startTime", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("startTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValueType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsValueType describes the information set for an observation value. This is associated with the primary measure concept declared in the key family. The startTime attribute is only used if the textFormat of the observation is of the Timespan type in the key family (in which case the value field takes a duration).	
    ///	
    /// </para>
    /// </summary>
    public partial class ObsValueType : XTypedElement, IXMetaData {
        
         public static explicit operator ObsValueType(XElement xe) { return XTypedServices.ToXTypedElement<ObsValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsValueType describes the information set for an observation value. This is associated with the primary measure concept declared in the key family. The startTime attribute is only used if the textFormat of the observation is of the Timespan type in the key family (in which case the value field takes a duration).	
        ///	
        /// </para>
        /// </summary>
        public ObsValueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<double> value {
            get {
                XAttribute x = this.Attribute(XName.Get("value", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> startTime {
            get {
                XAttribute x = this.Attribute(XName.Get("startTime", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("startTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ObsValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObsValueType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataSetType defines the structure of a data set. This consists of a key family reference which contains the ID of the key family, and the attribute values attached at the data set level. A DataSet may be used to transmit documentation (that is, only attribute values), data, or a combination of both. If providing only documentation, you need not send the complete set of attributes. If transmitting only data, the Group may be omitted if desired. Uniqueness constraints are defined for the attributes of the data set. If dataset-level attributes are sent in a delete message, then any valid attribute value will indicate that the current attribute value should be deleted. The keyFamilyURI attribute is provided to allow a URI (typically a URL) to be provided, pointing to an SDMX-ML Structure message describing the key family. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
    ///	
    /// </para>
    /// </summary>
    public partial class DataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DataSetType ContentField;
        
         public static explicit operator DataSet(XElement xe) { return XTypedServices.ToXTypedElement<DataSet, DataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType defines the structure of a data set. This consists of a key family reference which contains the ID of the key family, and the attribute values attached at the data set level. A DataSet may be used to transmit documentation (that is, only attribute values), data, or a combination of both. If providing only documentation, you need not send the complete set of attributes. If transmitting only data, the Group may be omitted if desired. Uniqueness constraints are defined for the attributes of the data set. If dataset-level attributes are sent in a delete message, then any valid attribute value will indicate that the current attribute value should be deleted. The keyFamilyURI attribute is provided to allow a URI (typically a URL) to be provided, pointing to an SDMX-ML Structure message describing the key family. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        ///	
        /// </para>
        /// </summary>
        public DataSet() {
            SetInnerType(new DataSetType());
        }
        
        /// <summary>
        /// <para>
        /// DataSetType defines the structure of a data set. This consists of a key family reference which contains the ID of the key family, and the attribute values attached at the data set level. A DataSet may be used to transmit documentation (that is, only attribute values), data, or a combination of both. If providing only documentation, you need not send the complete set of attributes. If transmitting only data, the Group may be omitted if desired. Uniqueness constraints are defined for the attributes of the data set. If dataset-level attributes are sent in a delete message, then any valid attribute value will indicate that the current attribute value should be deleted. The keyFamilyURI attribute is provided to allow a URI (typically a URL) to be provided, pointing to an SDMX-ML Structure message describing the key family. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        ///	
        /// </para>
        /// </summary>
        public DataSet(DataSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public DataSetType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public string KeyFamilyRef {
            get {
                return this.ContentField.KeyFamilyRef;
            }
            set {
                this.ContentField.KeyFamilyRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public ValuesType Attributes {
            get {
                return this.ContentField.Attributes;
            }
            set {
                this.ContentField.Attributes = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public IList<GroupType> Group {
            get {
                return this.ContentField.Group;
            }
            set {
                this.ContentField.Group = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public IList<SeriesType> Series {
            get {
                return this.ContentField.Series;
            }
            set {
                this.ContentField.Series = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef, Attributes?, (Group* | Series*)*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                return this.ContentField.Annotations;
            }
            set {
                this.ContentField.Annotations = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri keyFamilyURI {
            get {
                return this.ContentField.keyFamilyURI;
            }
            set {
                this.ContentField.keyFamilyURI = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                return this.ContentField.datasetID;
            }
            set {
                this.ContentField.datasetID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                return this.ContentField.dataProviderSchemeAgencyId;
            }
            set {
                this.ContentField.dataProviderSchemeAgencyId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                return this.ContentField.dataProviderSchemeId;
            }
            set {
                this.ContentField.dataProviderSchemeId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                return this.ContentField.dataProviderID;
            }
            set {
                this.ContentField.dataProviderID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                return this.ContentField.dataflowAgencyID;
            }
            set {
                this.ContentField.dataflowAgencyID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                return this.ContentField.dataflowID;
            }
            set {
                this.ContentField.dataflowID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                return this.ContentField.action;
            }
            set {
                this.ContentField.action = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                return this.ContentField.reportingBeginDate;
            }
            set {
                this.ContentField.reportingBeginDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                return this.ContentField.reportingEndDate;
            }
            set {
                this.ContentField.reportingEndDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                return this.ContentField.validFromDate;
            }
            set {
                this.ContentField.validFromDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                return this.ContentField.validToDate;
            }
            set {
                this.ContentField.validToDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                return this.ContentField.publicationYear;
            }
            set {
                this.ContentField.publicationYear = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                return this.ContentField.publicationPeriod;
            }
            set {
                this.ContentField.publicationPeriod = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataSet Load(string xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Parse(string xml) {
            return XTypedServices.Parse<DataSet, DataSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DataSet(((DataSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DataSetType ContentField) {
            this.ContentField = ((DataSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public DataSet DataSet {  get {return rootObject as DataSet; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// The Metadata Set is a set of reported metadata against a set of values for a given full or partial target identifier, as described in a metadata structure definition. Child elements include identification of the relevant metadata structure definition using the MetadataStructureRef and MetadataStructureAgencyRef elements. The ReportRef element includes the ID of the report structure as described in the metadata structure definition. AttributeValueSet is a repeatable child element which allows target identifier keys and their associated metadata attribute values to be reported (this functions like a series element does for data sets). An optional name and annotations may also be supplied. The metadataStructureURI allows for a URI to be provided, pointing to the SDMX-ML Structure Message representation of the referenced metadata structure definition. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
    /// </para>
    /// <para>
    /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
    /// </para>
    /// </summary>
    public partial class MetadataSetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AttributeValueSetType> AttributeValueSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataSetType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataSetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")), new NamedContentModelEntity(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")), new NamedContentModelEntity(XName.Get("MetadataStructureAgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")), new NamedContentModelEntity(XName.Get("ReportRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")), new NamedContentModelEntity(XName.Get("AttributeValueSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")));
        }
        
        /// <summary>
        /// <para>
        /// The Metadata Set is a set of reported metadata against a set of values for a given full or partial target identifier, as described in a metadata structure definition. Child elements include identification of the relevant metadata structure definition using the MetadataStructureRef and MetadataStructureAgencyRef elements. The ReportRef element includes the ID of the report structure as described in the metadata structure definition. AttributeValueSet is a repeatable child element which allows target identifier keys and their associated metadata attribute values to be reported (this functions like a series element does for data sets). An optional name and annotations may also be supplied. The metadataStructureURI allows for a URI to be provided, pointing to the SDMX-ML Structure Message representation of the referenced metadata structure definition. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public MetadataSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public string MetadataStructureRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), value, "MetadataStructureRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public string MetadataStructureAgencyRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureAgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataStructureAgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), value, "MetadataStructureAgencyRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public string ReportRef {
            get {
                XElement x = this.GetElement(XName.Get("ReportRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ReportRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), value, "ReportRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public IList<AttributeValueSetType> AttributeValueSet {
            get {
                if ((this.AttributeValueSetField == null)) {
                    this.AttributeValueSetField = new XTypedList<AttributeValueSetType>(this, LinqToXsdTypeManager.Instance, XName.Get("AttributeValueSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                }
                return this.AttributeValueSetField;
            }
            set {
                if ((value == null)) {
                    this.AttributeValueSetField = null;
                }
                else {
                    if ((this.AttributeValueSetField == null)) {
                        this.AttributeValueSetField = XTypedList<AttributeValueSetType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AttributeValueSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                    }
                    else {
                        XTypedServices.SetList<AttributeValueSetType>(this.AttributeValueSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri metadataStructureURI {
            get {
                XAttribute x = this.Attribute(XName.Get("metadataStructureURI", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("metadataStructureURI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                XAttribute x = this.Attribute(XName.Get("datasetID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("datasetID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeAgencyId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeAgencyId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowAgencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowAgencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                XAttribute x = this.Attribute(XName.Get("action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingBeginDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingBeginDate", this, XName.Get("reportingBeginDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingEndDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingEndDate", this, XName.Get("reportingEndDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validFromDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFromDate", this, XName.Get("validFromDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validToDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validToDate", this, XName.Get("validToDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationYear", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("publicationYear", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationPeriod", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "publicationPeriod", this, XName.Get("publicationPeriod", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataSetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructureAgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(string));
            localElementDictionary.Add(XName.Get("ReportRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(string));
            localElementDictionary.Add(XName.Get("AttributeValueSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(AttributeValueSetType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The attribute value set provides the values for a set of metadata attributes reported against a target identifier key. The TargetRef element contains the value of the metadata attribute's target attribute in the metadata structure definition (that is, the ID of the full or partial target identifier which is the target of the metadata report). TargetValues is an element substructure which provides the specific full or partial target identifier component values, and the ReportedAttribute sub-element allows for values to be reported against the metadata attributes as described in the referenced metadata structure definition for the referenced full or partial targets.
    /// </para>
    /// <para>
    /// Regular expression: (TargetRef, TargetValues, ReportedAttribute+)
    /// </para>
    /// </summary>
    public partial class AttributeValueSetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReportedAttributeType> ReportedAttributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AttributeValueSetType(XElement xe) { return XTypedServices.ToXTypedElement<AttributeValueSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AttributeValueSetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TargetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")), new NamedContentModelEntity(XName.Get("TargetValues", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")), new NamedContentModelEntity(XName.Get("ReportedAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")));
        }
        
        /// <summary>
        /// <para>
        /// The attribute value set provides the values for a set of metadata attributes reported against a target identifier key. The TargetRef element contains the value of the metadata attribute's target attribute in the metadata structure definition (that is, the ID of the full or partial target identifier which is the target of the metadata report). TargetValues is an element substructure which provides the specific full or partial target identifier component values, and the ReportedAttribute sub-element allows for values to be reported against the metadata attributes as described in the referenced metadata structure definition for the referenced full or partial targets.
        /// </para>
        /// <para>
        /// Regular expression: (TargetRef, TargetValues, ReportedAttribute+)
        /// </para>
        /// </summary>
        public AttributeValueSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TargetRef, TargetValues, ReportedAttribute+)
        /// </para>
        /// </summary>
        public string TargetRef {
            get {
                XElement x = this.GetElement(XName.Get("TargetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TargetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), value, "TargetRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TargetRef, TargetValues, ReportedAttribute+)
        /// </para>
        /// </summary>
        public TargetValuesType TargetValues {
            get {
                XElement x = this.GetElement(XName.Get("TargetValues", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                return ((TargetValuesType)(x));
            }
            set {
                this.SetElement(XName.Get("TargetValues", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TargetRef, TargetValues, ReportedAttribute+)
        /// </para>
        /// </summary>
        public IList<ReportedAttributeType> ReportedAttribute {
            get {
                if ((this.ReportedAttributeField == null)) {
                    this.ReportedAttributeField = new XTypedList<ReportedAttributeType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReportedAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                }
                return this.ReportedAttributeField;
            }
            set {
                if ((value == null)) {
                    this.ReportedAttributeField = null;
                }
                else {
                    if ((this.ReportedAttributeField == null)) {
                        this.ReportedAttributeField = XTypedList<ReportedAttributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReportedAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                    }
                    else {
                        XTypedServices.SetList<ReportedAttributeType>(this.ReportedAttributeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AttributeValueSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttributeValueSetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TargetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(string));
            localElementDictionary.Add(XName.Get("TargetValues", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(TargetValuesType));
            localElementDictionary.Add(XName.Get("ReportedAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(ReportedAttributeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Target values contains the specific values for each concept in the full or partial target identifier as described in a metadata structure definition. These values typically come from codelists or other item schemes. Each such value should be presented in the order given in the metadata structure definition, and must use a valid representation for that concept. Concepts are those referenced by the identifier components of the target identifiers.
    /// </para>
    /// <para>
    /// Regular expression: (ComponentValue+)
    /// </para>
    /// </summary>
    public partial class TargetValuesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ComponentValueType> ComponentValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TargetValuesType(XElement xe) { return XTypedServices.ToXTypedElement<TargetValuesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TargetValuesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ComponentValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")));
        }
        
        /// <summary>
        /// <para>
        /// Target values contains the specific values for each concept in the full or partial target identifier as described in a metadata structure definition. These values typically come from codelists or other item schemes. Each such value should be presented in the order given in the metadata structure definition, and must use a valid representation for that concept. Concepts are those referenced by the identifier components of the target identifiers.
        /// </para>
        /// <para>
        /// Regular expression: (ComponentValue+)
        /// </para>
        /// </summary>
        public TargetValuesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ComponentValue+)
        /// </para>
        /// </summary>
        public IList<ComponentValueType> ComponentValue {
            get {
                if ((this.ComponentValueField == null)) {
                    this.ComponentValueField = new XTypedList<ComponentValueType>(this, LinqToXsdTypeManager.Instance, XName.Get("ComponentValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                }
                return this.ComponentValueField;
            }
            set {
                if ((value == null)) {
                    this.ComponentValueField = null;
                }
                else {
                    if ((this.ComponentValueField == null)) {
                        this.ComponentValueField = XTypedList<ComponentValueType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ComponentValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                    }
                    else {
                        XTypedServices.SetList<ComponentValueType>(this.ComponentValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TargetValuesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TargetValuesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ComponentValue", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(ComponentValueType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Component values have an object attribute with an object type value as provided in the metadata structure definition, a component attribute which takes the ID of the identifier component in the metadata structure definition's full target identifier, and a value, which must be a valid value for that concept's representation as described in the metadata structure definition.
    /// </para>
    /// </summary>
    public partial class ComponentValueType : XTypedElement, IXMetaData {
        
         public static explicit operator ComponentValueType(XElement xe) { return XTypedServices.ToXTypedElement<ComponentValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Component values have an object attribute with an object type value as provided in the metadata structure definition, a component attribute which takes the ID of the identifier component in the metadata structure definition's full target identifier, and a value, which must be a valid value for that concept's representation as described in the metadata structure definition.
        /// </para>
        /// </summary>
        public ComponentValueType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @object {
            get {
                XAttribute x = this.Attribute(XName.Get("object", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("object", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string component {
            get {
                XAttribute x = this.Attribute(XName.Get("component", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("component", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ComponentValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ComponentValueType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Reported attributes hold the values which are to be reported against the target specified in the metadata structure definition, and according to the metadata attributes specified for the target referenced in the TargetRef element. Each reported attribute may have Value sub-elements (one per language) if it takes a text or numeric value. The StartTime element is only used if the attribute being represented is of the Timespan type (as described in the corresponding TextFormat element in the metadata structure definition). In this case, the Value takes a duration. Only one such value is allowed in the ReportedAttribute in this case. The types of these values must conform to the limitations described in the metadata structure definition. Also - if permitted by the metadata structure definition - there may be one or more child ReportedAttribute elements. These must be arranged in the nesting hierarchy given in the metadat structure definition. The conceptID attribute provides the id of the concept given in the metadata structure definition to which the reported attribute corresponds.
    /// </para>
    /// <para>
    /// Regular expression: (Value*, StartTime?, ReportedAttribute*, Annotations?)
    /// </para>
    /// </summary>
    public partial class ReportedAttributeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReportedAttributeType> ReportedAttributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReportedAttributeType(XElement xe) { return XTypedServices.ToXTypedElement<ReportedAttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReportedAttributeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")), new NamedContentModelEntity(XName.Get("StartTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")), new NamedContentModelEntity(XName.Get("ReportedAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")));
        }
        
        /// <summary>
        /// <para>
        /// Reported attributes hold the values which are to be reported against the target specified in the metadata structure definition, and according to the metadata attributes specified for the target referenced in the TargetRef element. Each reported attribute may have Value sub-elements (one per language) if it takes a text or numeric value. The StartTime element is only used if the attribute being represented is of the Timespan type (as described in the corresponding TextFormat element in the metadata structure definition). In this case, the Value takes a duration. Only one such value is allowed in the ReportedAttribute in this case. The types of these values must conform to the limitations described in the metadata structure definition. Also - if permitted by the metadata structure definition - there may be one or more child ReportedAttribute elements. These must be arranged in the nesting hierarchy given in the metadat structure definition. The conceptID attribute provides the id of the concept given in the metadata structure definition to which the reported attribute corresponds.
        /// </para>
        /// <para>
        /// Regular expression: (Value*, StartTime?, ReportedAttribute*, Annotations?)
        /// </para>
        /// </summary>
        public ReportedAttributeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Value*, StartTime?, ReportedAttribute*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.ValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Value*, StartTime?, ReportedAttribute*, Annotations?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> StartTime {
            get {
                XElement x = this.GetElement(XName.Get("StartTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("StartTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Value*, StartTime?, ReportedAttribute*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ReportedAttributeType> ReportedAttribute {
            get {
                if ((this.ReportedAttributeField == null)) {
                    this.ReportedAttributeField = new XTypedList<ReportedAttributeType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReportedAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                }
                return this.ReportedAttributeField;
            }
            set {
                if ((value == null)) {
                    this.ReportedAttributeField = null;
                }
                else {
                    if ((this.ReportedAttributeField == null)) {
                        this.ReportedAttributeField = XTypedList<ReportedAttributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReportedAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                    }
                    else {
                        XTypedServices.SetList<ReportedAttributeType>(this.ReportedAttributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Value*, StartTime?, ReportedAttribute*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string conceptID {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReportedAttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReportedAttributeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Value", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("StartTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("ReportedAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(ReportedAttributeType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The Object ID is used to reference a particular Object within the SDMX Information Model's formalization of statistical exchanges.
    /// </para>
    /// </summary>
    public sealed class ObjectIDType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Agency",
                        "ConceptScheme",
                        "Concept",
                        "Codelist",
                        "Code",
                        "KeyFamily",
                        "Component",
                        "KeyDescriptor",
                        "MeasureDescriptor",
                        "AttributeDescriptor",
                        "GroupKeyDescriptor",
                        "Dimension",
                        "Measure",
                        "Attribute",
                        "CategoryScheme",
                        "ReportingTaxonomy",
                        "Category",
                        "OrganisationScheme",
                        "DataProvider",
                        "MetadataStructure",
                        "FullTargetIdentifier",
                        "PartialTargetIdentifier",
                        "MetadataAttribute",
                        "DataFlow",
                        "ProvisionAgreement",
                        "MetadataFlow",
                        "ContentConstraint",
                        "AttachmentConstraint",
                        "DataSet",
                        "XSDataSet",
                        "MetadataSet",
                        "HierarchicalCodelist",
                        "Hierarchy",
                        "StructureSet",
                        "StructureMap",
                        "ComponentMap",
                        "CodelistMap",
                        "CodeMap",
                        "CategorySchemeMap",
                        "CategoryMap",
                        "OrganisationSchemeMap",
                        "OrganisationRoleMap",
                        "ConceptSchemeMap",
                        "ConceptMap",
                        "Process",
                        "ProcessStep"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ObjectIDType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The Metadata Set is a set of reported metadata against a set of values for a given full or partial target identifier, as described in a metadata structure definition. Child elements include identification of the relevant metadata structure definition using the MetadataStructureRef and MetadataStructureAgencyRef elements. The ReportRef element includes the ID of the report structure as described in the metadata structure definition. AttributeValueSet is a repeatable child element which allows target identifier keys and their associated metadata attribute values to be reported (this functions like a series element does for data sets). An optional name and annotations may also be supplied. The metadataStructureURI allows for a URI to be provided, pointing to the SDMX-ML Structure Message representation of the referenced metadata structure definition. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
    /// </para>
    /// </summary>
    public partial class MetadataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MetadataSetType ContentField;
        
         public static explicit operator MetadataSet(XElement xe) { return XTypedServices.ToXTypedElement<MetadataSet, MetadataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The Metadata Set is a set of reported metadata against a set of values for a given full or partial target identifier, as described in a metadata structure definition. Child elements include identification of the relevant metadata structure definition using the MetadataStructureRef and MetadataStructureAgencyRef elements. The ReportRef element includes the ID of the report structure as described in the metadata structure definition. AttributeValueSet is a repeatable child element which allows target identifier keys and their associated metadata attribute values to be reported (this functions like a series element does for data sets). An optional name and annotations may also be supplied. The metadataStructureURI allows for a URI to be provided, pointing to the SDMX-ML Structure Message representation of the referenced metadata structure definition. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public MetadataSet() {
            SetInnerType(new MetadataSetType());
        }
        
        /// <summary>
        /// <para>
        /// The Metadata Set is a set of reported metadata against a set of values for a given full or partial target identifier, as described in a metadata structure definition. Child elements include identification of the relevant metadata structure definition using the MetadataStructureRef and MetadataStructureAgencyRef elements. The ReportRef element includes the ID of the report structure as described in the metadata structure definition. AttributeValueSet is a repeatable child element which allows target identifier keys and their associated metadata attribute values to be reported (this functions like a series element does for data sets). An optional name and annotations may also be supplied. The metadataStructureURI allows for a URI to be provided, pointing to the SDMX-ML Structure Message representation of the referenced metadata structure definition. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public MetadataSet(MetadataSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public MetadataSetType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                return this.ContentField.Name;
            }
            set {
                this.ContentField.Name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public string MetadataStructureRef {
            get {
                return this.ContentField.MetadataStructureRef;
            }
            set {
                this.ContentField.MetadataStructureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public string MetadataStructureAgencyRef {
            get {
                return this.ContentField.MetadataStructureAgencyRef;
            }
            set {
                this.ContentField.MetadataStructureAgencyRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public string ReportRef {
            get {
                return this.ContentField.ReportRef;
            }
            set {
                this.ContentField.ReportRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public IList<AttributeValueSetType> AttributeValueSet {
            get {
                return this.ContentField.AttributeValueSet;
            }
            set {
                this.ContentField.AttributeValueSet = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name*, MetadataStructureRef, MetadataStructureAgencyRef, ReportRef, AttributeValueSet+, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                return this.ContentField.Annotations;
            }
            set {
                this.ContentField.Annotations = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri metadataStructureURI {
            get {
                return this.ContentField.metadataStructureURI;
            }
            set {
                this.ContentField.metadataStructureURI = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                return this.ContentField.datasetID;
            }
            set {
                this.ContentField.datasetID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                return this.ContentField.dataProviderSchemeAgencyId;
            }
            set {
                this.ContentField.dataProviderSchemeAgencyId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                return this.ContentField.dataProviderSchemeId;
            }
            set {
                this.ContentField.dataProviderSchemeId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                return this.ContentField.dataProviderID;
            }
            set {
                this.ContentField.dataProviderID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                return this.ContentField.dataflowAgencyID;
            }
            set {
                this.ContentField.dataflowAgencyID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                return this.ContentField.dataflowID;
            }
            set {
                this.ContentField.dataflowID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                return this.ContentField.action;
            }
            set {
                this.ContentField.action = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                return this.ContentField.reportingBeginDate;
            }
            set {
                this.ContentField.reportingBeginDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                return this.ContentField.reportingEndDate;
            }
            set {
                this.ContentField.reportingEndDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                return this.ContentField.validFromDate;
            }
            set {
                this.ContentField.validFromDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                return this.ContentField.validToDate;
            }
            set {
                this.ContentField.validToDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                return this.ContentField.publicationYear;
            }
            set {
                this.ContentField.publicationYear = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                return this.ContentField.publicationPeriod;
            }
            set {
                this.ContentField.publicationPeriod = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MetadataSet Load(string xmlFile) {
            return XTypedServices.Load<MetadataSet, MetadataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MetadataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MetadataSet, MetadataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MetadataSet Parse(string xml) {
            return XTypedServices.Parse<MetadataSet, MetadataSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MetadataSet(((MetadataSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(MetadataSetType ContentField) {
            this.ContentField = ((MetadataSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public MetadataSet MetadataSet {  get {return rootObject as MetadataSet; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(MetadataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.message {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// The Message is an abstract type which is used by all of the messages, to allow inheritance of common features. It also provides uniqueness constraints for the header fields.
    /// </para>
    /// <para>
    /// Regular expression: (Header)
    /// </para>
    /// </summary>
    public abstract partial class MessageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MessageType(XElement xe) {  return (MessageType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MessageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// The Message is an abstract type which is used by all of the messages, to allow inheritance of common features. It also provides uniqueness constraints for the header fields.
        /// </para>
        /// <para>
        /// Regular expression: (Header)
        /// </para>
        /// </summary>
        public MessageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header)
        /// </para>
        /// </summary>
        public HeaderType Header {
            get {
                XElement x = this.GetElement(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((HeaderType)(x));
            }
            set {
                this.SetElement(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// StructureType defines the contents of a structure message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
    /// </para>
    /// </summary>
    public partial class StructureType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StructureType(XElement xe) { return XTypedServices.ToXTypedElement<StructureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// StructureType defines the contents of a structure message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public StructureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType OrganisationSchemes {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType)(x));
            }
            set {
                this.SetElement(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType Dataflows {
            get {
                XElement x = this.GetElement(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType)(x));
            }
            set {
                this.SetElement(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType Metadataflows {
            get {
                XElement x = this.GetElement(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType)(x));
            }
            set {
                this.SetElement(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType CategorySchemes {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType)(x));
            }
            set {
                this.SetElement(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType CodeLists {
            get {
                XElement x = this.GetElement(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType)(x));
            }
            set {
                this.SetElement(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType HierarchicalCodelists {
            get {
                XElement x = this.GetElement(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType)(x));
            }
            set {
                this.SetElement(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType Concepts {
            get {
                XElement x = this.GetElement(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType)(x));
            }
            set {
                this.SetElement(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType MetadataStructureDefinitions {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType KeyFamilies {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType)(x));
            }
            set {
                this.SetElement(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType StructureSets {
            get {
                XElement x = this.GetElement(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType)(x));
            }
            set {
                this.SetElement(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType ReportingTaxonomies {
            get {
                XElement x = this.GetElement(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType)(x));
            }
            set {
                this.SetElement(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType Processes {
            get {
                XElement x = this.GetElement(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType)(x));
            }
            set {
                this.SetElement(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType));
            localElementDictionary.Add(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType));
            localElementDictionary.Add(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType));
            localElementDictionary.Add(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType));
            localElementDictionary.Add(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType));
            localElementDictionary.Add(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType));
            localElementDictionary.Add(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType));
            localElementDictionary.Add(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType));
            localElementDictionary.Add(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType));
            localElementDictionary.Add(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType));
            localElementDictionary.Add(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType));
            localElementDictionary.Add(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// GenericDataType defines the contents of a GenericData message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, DataSet)
    /// </para>
    /// </summary>
    public partial class GenericDataType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GenericDataType(XElement xe) { return XTypedServices.ToXTypedElement<GenericDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GenericDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// GenericDataType defines the contents of a GenericData message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public GenericDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSetType DataSet {
            get {
                XElement x = this.GetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSetType)(x));
            }
            set {
                this.SetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GenericDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GenericDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSetType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// UtilityDataType defines the contents of a UtilityData message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, DataSet)
    /// </para>
    /// </summary>
    public partial class UtilityDataType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UtilityDataType(XElement xe) { return XTypedServices.ToXTypedElement<UtilityDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UtilityDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility")));
        }
        
        /// <summary>
        /// <para>
        /// UtilityDataType defines the contents of a UtilityData message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public UtilityDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet DataSet {
            get {
                XElement x = this.GetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet)(x));
            }
            set {
                this.SetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UtilityDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UtilityDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CompactDataType defines the contents of a CompactData message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, DataSet)
    /// </para>
    /// </summary>
    public partial class CompactDataType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CompactDataType(XElement xe) { return XTypedServices.ToXTypedElement<CompactDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CompactDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact")));
        }
        
        /// <summary>
        /// <para>
        /// CompactDataType defines the contents of a CompactData message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public CompactDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet DataSet {
            get {
                XElement x = this.GetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet)(x));
            }
            set {
                this.SetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CompactDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CompactDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CrossSectionalDataType defines the contents of a CrossSectionalData message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, DataSet)
    /// </para>
    /// </summary>
    public partial class CrossSectionalDataType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CrossSectionalDataType(XElement xe) { return XTypedServices.ToXTypedElement<CrossSectionalDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CrossSectionalDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross")));
        }
        
        /// <summary>
        /// <para>
        /// CrossSectionalDataType defines the contents of a CrossSectionalData message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public CrossSectionalDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet DataSet {
            get {
                XElement x = this.GetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet)(x));
            }
            set {
                this.SetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CrossSectionalDataType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrossSectionalDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// GenericMetadataType defines the contents of a Generic Metadata message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, MetadataSet)
    /// </para>
    /// </summary>
    public partial class GenericMetadataType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GenericMetadataType(XElement xe) { return XTypedServices.ToXTypedElement<GenericMetadataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GenericMetadataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata")));
        }
        
        /// <summary>
        /// <para>
        /// GenericMetadataType defines the contents of a Generic Metadata message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, MetadataSet)
        /// </para>
        /// </summary>
        public GenericMetadataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, MetadataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet MetadataSet {
            get {
                XElement x = this.GetElement(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GenericMetadataType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GenericMetadataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MetadataReportType defines the contents of a metadata structure definition-specific Metadata Report message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, MetadataSet)
    /// </para>
    /// </summary>
    public partial class MetadataReportType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataReportType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataReportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataReportType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport")));
        }
        
        /// <summary>
        /// <para>
        /// MetadataReportType defines the contents of a metadata structure definition-specific Metadata Report message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, MetadataSet)
        /// </para>
        /// </summary>
        public MetadataReportType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, MetadataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet MetadataSet {
            get {
                XElement x = this.GetElement(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataReportType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataReportType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// QueryMessageType defines the contents of a QueryMessage.
    /// </para>
    /// <para>
    /// Regular expression: (Header, Query)
    /// </para>
    /// </summary>
    public partial class QueryMessageType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QueryMessageType(XElement xe) { return XTypedServices.ToXTypedElement<QueryMessageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryMessageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// QueryMessageType defines the contents of a QueryMessage.
        /// </para>
        /// <para>
        /// Regular expression: (Header, Query)
        /// </para>
        /// </summary>
        public QueryMessageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, Query)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.QueryType Query {
            get {
                XElement x = this.GetElement(XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.QueryType)(x));
            }
            set {
                this.SetElement(XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryMessageType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryMessageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.QueryType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a type which describes a structure for holding all of the various dedicated registry interface message types.
    /// </para>
    /// <para>
    /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
    /// </para>
    /// </summary>
    public partial class RegistryInterfaceType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator RegistryInterfaceType(XElement xe) { return XTypedServices.ToXTypedElement<RegistryInterfaceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RegistryInterfaceType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// This is a type which describes a structure for holding all of the various dedicated registry interface message types.
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public RegistryInterfaceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitSubscriptionRequestType SubmitSubscriptionRequest {
            get {
                XElement x = this.GetElement(XName.Get("SubmitSubscriptionRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitSubscriptionRequestType)(x));
            }
            set {
                this.SetElement(XName.Get("SubmitSubscriptionRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitSubscriptionResponseType SubmitSubscriptionResponse {
            get {
                XElement x = this.GetElement(XName.Get("SubmitSubscriptionResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitSubscriptionResponseType)(x));
            }
            set {
                this.SetElement(XName.Get("SubmitSubscriptionResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.NotifyRegistryEventType NotifyRegistryEvent {
            get {
                XElement x = this.GetElement(XName.Get("NotifyRegistryEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.NotifyRegistryEventType)(x));
            }
            set {
                this.SetElement(XName.Get("NotifyRegistryEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitRegistrationRequestType SubmitRegistrationRequest {
            get {
                XElement x = this.GetElement(XName.Get("SubmitRegistrationRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitRegistrationRequestType)(x));
            }
            set {
                this.SetElement(XName.Get("SubmitRegistrationRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitRegistrationResponseType SubmitRegistrationResponse {
            get {
                XElement x = this.GetElement(XName.Get("SubmitRegistrationResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitRegistrationResponseType)(x));
            }
            set {
                this.SetElement(XName.Get("SubmitRegistrationResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryRegistrationRequestType QueryRegistrationRequest {
            get {
                XElement x = this.GetElement(XName.Get("QueryRegistrationRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryRegistrationRequestType)(x));
            }
            set {
                this.SetElement(XName.Get("QueryRegistrationRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryRegistrationResponseType QueryRegistrationResponse {
            get {
                XElement x = this.GetElement(XName.Get("QueryRegistrationResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryRegistrationResponseType)(x));
            }
            set {
                this.SetElement(XName.Get("QueryRegistrationResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitStructureRequestType SubmitStructureRequest {
            get {
                XElement x = this.GetElement(XName.Get("SubmitStructureRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitStructureRequestType)(x));
            }
            set {
                this.SetElement(XName.Get("SubmitStructureRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitStructureResponseType SubmitStructureResponse {
            get {
                XElement x = this.GetElement(XName.Get("SubmitStructureResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitStructureResponseType)(x));
            }
            set {
                this.SetElement(XName.Get("SubmitStructureResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryStructureRequestType QueryStructureRequest {
            get {
                XElement x = this.GetElement(XName.Get("QueryStructureRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryStructureRequestType)(x));
            }
            set {
                this.SetElement(XName.Get("QueryStructureRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryStructureResponseType QueryStructureResponse {
            get {
                XElement x = this.GetElement(XName.Get("QueryStructureResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryStructureResponseType)(x));
            }
            set {
                this.SetElement(XName.Get("QueryStructureResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitProvisioningRequestType SubmitProvisioningRequest {
            get {
                XElement x = this.GetElement(XName.Get("SubmitProvisioningRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitProvisioningRequestType)(x));
            }
            set {
                this.SetElement(XName.Get("SubmitProvisioningRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitProvisioningResponseType SubmitProvisioningResponse {
            get {
                XElement x = this.GetElement(XName.Get("SubmitProvisioningResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitProvisioningResponseType)(x));
            }
            set {
                this.SetElement(XName.Get("SubmitProvisioningResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryProvisioningRequestType QueryProvisioningRequest {
            get {
                XElement x = this.GetElement(XName.Get("QueryProvisioningRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryProvisioningRequestType)(x));
            }
            set {
                this.SetElement(XName.Get("QueryProvisioningRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryProvisioningResponseType QueryProvisioningResponse {
            get {
                XElement x = this.GetElement(XName.Get("QueryProvisioningResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryProvisioningResponseType)(x));
            }
            set {
                this.SetElement(XName.Get("QueryProvisioningResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RegistryInterfaceType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RegistryInterfaceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("SubmitSubscriptionRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitSubscriptionRequestType));
            localElementDictionary.Add(XName.Get("SubmitSubscriptionResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitSubscriptionResponseType));
            localElementDictionary.Add(XName.Get("NotifyRegistryEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.NotifyRegistryEventType));
            localElementDictionary.Add(XName.Get("SubmitRegistrationRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitRegistrationRequestType));
            localElementDictionary.Add(XName.Get("SubmitRegistrationResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitRegistrationResponseType));
            localElementDictionary.Add(XName.Get("QueryRegistrationRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryRegistrationRequestType));
            localElementDictionary.Add(XName.Get("QueryRegistrationResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryRegistrationResponseType));
            localElementDictionary.Add(XName.Get("SubmitStructureRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitStructureRequestType));
            localElementDictionary.Add(XName.Get("SubmitStructureResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitStructureResponseType));
            localElementDictionary.Add(XName.Get("QueryStructureRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryStructureRequestType));
            localElementDictionary.Add(XName.Get("QueryStructureResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryStructureResponseType));
            localElementDictionary.Add(XName.Get("SubmitProvisioningRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitProvisioningRequestType));
            localElementDictionary.Add(XName.Get("SubmitProvisioningResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitProvisioningResponseType));
            localElementDictionary.Add(XName.Get("QueryProvisioningRequest", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryProvisioningRequestType));
            localElementDictionary.Add(XName.Get("QueryProvisioningResponse", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryProvisioningResponseType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// MessageGroupType defines the contents of a MessageGroup message.
    /// </para>
    /// <para>
    /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
    /// </para>
    /// </summary>
    public partial class MessageGroupType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.MessageType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet> DataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet> DataSet1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet> DataSet2Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet> DataSet3Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet> MetadataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet> MetadataSet1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator MessageGroupType(XElement xe) { return XTypedServices.ToXTypedElement<MessageGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MessageGroupType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// MessageGroupType defines the contents of a MessageGroup message.
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public MessageGroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet> DataSet {
            get {
                if ((this.DataSetField == null)) {
                    this.DataSetField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet>(this, LinqToXsdTypeManager.Instance, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                }
                return this.DataSetField;
            }
            set {
                if ((value == null)) {
                    this.DataSetField = null;
                }
                else {
                    if ((this.DataSetField == null)) {
                        this.DataSetField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet>(this.DataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet> DataSet1 {
            get {
                if ((this.DataSet1Field == null)) {
                    this.DataSet1Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet>(this, LinqToXsdTypeManager.Instance, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"));
                }
                return this.DataSet1Field;
            }
            set {
                if ((value == null)) {
                    this.DataSet1Field = null;
                }
                else {
                    if ((this.DataSet1Field == null)) {
                        this.DataSet1Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet>(this.DataSet1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet> DataSet2 {
            get {
                if ((this.DataSet2Field == null)) {
                    this.DataSet2Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet>(this, LinqToXsdTypeManager.Instance, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"));
                }
                return this.DataSet2Field;
            }
            set {
                if ((value == null)) {
                    this.DataSet2Field = null;
                }
                else {
                    if ((this.DataSet2Field == null)) {
                        this.DataSet2Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet>(this.DataSet2Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet> DataSet3 {
            get {
                if ((this.DataSet3Field == null)) {
                    this.DataSet3Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet>(this, LinqToXsdTypeManager.Instance, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"));
                }
                return this.DataSet3Field;
            }
            set {
                if ((value == null)) {
                    this.DataSet3Field = null;
                }
                else {
                    if ((this.DataSet3Field == null)) {
                        this.DataSet3Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet>(this.DataSet3Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet> MetadataSet {
            get {
                if ((this.MetadataSetField == null)) {
                    this.MetadataSetField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                }
                return this.MetadataSetField;
            }
            set {
                if ((value == null)) {
                    this.MetadataSetField = null;
                }
                else {
                    if ((this.MetadataSetField == null)) {
                        this.MetadataSetField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet>(this.MetadataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet> MetadataSet1 {
            get {
                if ((this.MetadataSet1Field == null)) {
                    this.MetadataSet1Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"));
                }
                return this.MetadataSet1Field;
            }
            set {
                if ((value == null)) {
                    this.MetadataSet1Field = null;
                }
                else {
                    if ((this.MetadataSet1Field == null)) {
                        this.MetadataSet1Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet>(this.MetadataSet1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageGroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MessageGroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(HeaderType));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/compact"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet));
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/cross"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet));
            localElementDictionary.Add(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/genericmetadata"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet));
            localElementDictionary.Add(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// HeaderType defines the header fields used for all messages. ID identifies a data flow definition, which, when combined with time, uniquely identifies the data set. Test indicates whather the message is for test purposes or not. Truncated is used in data messages which are responding to Query messages, and is set to true only if the response has been truncated to meet size limits suggested by the defaultLimit attribute in the Query mesage.  Name provides a name for the transmission. Prepared is the date prepared. Sender is information about the sender, and Receiver is information about the receiver. Agency provides the code identifier/abbreviation for the maintenance agency of a data set. Data set id provides an identifier for a contained data set. Action code provides a code for determining whether the enclosed message is an Update or Delete message (not to be used with the UtilityData message). KeyFamilyRef is used to reference a key family for a contained data set, using its id. (This information is required at the DataSet level for some messages, but is provided here as a convenience for those messages which do not require it.) KeyFamilyAgency specifies the agency of the key family using its coded id.  Fields which refer to a contained data set need not be used if the message contains a query or structural information - these messages provide specific fields for holding this information. The ones here are not to be used as defaults. Extracted is a time-stamp from the system rendering the data; ReportingBegin and ReportingEnd provide the time period covered by the message (in the case of data). Source provides human-readable information about the source of the data.
    /// </para>
    /// <para>
    /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
    /// </para>
    /// </summary>
    public partial class HeaderType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyType> SenderField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartyType> ReceiverField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> SourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HeaderType(XElement xe) { return XTypedServices.ToXTypedElement<HeaderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HeaderType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Test", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Truncated", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Prepared", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Sender", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Receiver", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("KeyFamilyAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("DataSetAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("DataSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("DataSetAction", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Extracted", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("ReportingBegin", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("ReportingEnd", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Source", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// HeaderType defines the header fields used for all messages. ID identifies a data flow definition, which, when combined with time, uniquely identifies the data set. Test indicates whather the message is for test purposes or not. Truncated is used in data messages which are responding to Query messages, and is set to true only if the response has been truncated to meet size limits suggested by the defaultLimit attribute in the Query mesage.  Name provides a name for the transmission. Prepared is the date prepared. Sender is information about the sender, and Receiver is information about the receiver. Agency provides the code identifier/abbreviation for the maintenance agency of a data set. Data set id provides an identifier for a contained data set. Action code provides a code for determining whether the enclosed message is an Update or Delete message (not to be used with the UtilityData message). KeyFamilyRef is used to reference a key family for a contained data set, using its id. (This information is required at the DataSet level for some messages, but is provided here as a convenience for those messages which do not require it.) KeyFamilyAgency specifies the agency of the key family using its coded id.  Fields which refer to a contained data set need not be used if the message contains a query or structural information - these messages provide specific fields for holding this information. The ones here are not to be used as defaults. Extracted is a time-stamp from the system rendering the data; ReportingBegin and ReportingEnd provide the time period covered by the message (in the case of data). Source provides human-readable information about the source of the data.
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public HeaderType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, "ID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public bool Test {
            get {
                XElement x = this.GetElement(XName.Get("Test", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("Test", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> Truncated {
            get {
                XElement x = this.GetElement(XName.Get("Truncated", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("Truncated", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object Prepared {
            get {
                XElement x = this.GetElement(XName.Get("Prepared", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.HeaderTimeType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("Prepared", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, "Prepared", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.HeaderTimeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<PartyType> Sender {
            get {
                if ((this.SenderField == null)) {
                    this.SenderField = new XTypedList<PartyType>(this, LinqToXsdTypeManager.Instance, XName.Get("Sender", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.SenderField;
            }
            set {
                if ((value == null)) {
                    this.SenderField = null;
                }
                else {
                    if ((this.SenderField == null)) {
                        this.SenderField = XTypedList<PartyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Sender", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<PartyType>(this.SenderField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<PartyType> Receiver {
            get {
                if ((this.ReceiverField == null)) {
                    this.ReceiverField = new XTypedList<PartyType>(this, LinqToXsdTypeManager.Instance, XName.Get("Receiver", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.ReceiverField;
            }
            set {
                if ((value == null)) {
                    this.ReceiverField = null;
                }
                else {
                    if ((this.ReceiverField == null)) {
                        this.ReceiverField = XTypedList<PartyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Receiver", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<PartyType>(this.ReceiverField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string KeyFamilyRef {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string KeyFamilyAgency {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElement(XName.Get("KeyFamilyAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetAgency {
            get {
                XElement x = this.GetElement(XName.Get("DataSetAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataSetAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetID {
            get {
                XElement x = this.GetElement(XName.Get("DataSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetAction {
            get {
                XElement x = this.GetElement(XName.Get("DataSetAction", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataSetAction", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, "DataSetAction", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ActionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> Extracted {
            get {
                XElement x = this.GetElement(XName.Get("Extracted", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("Extracted", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object ReportingBegin {
            get {
                XElement x = this.GetElement(XName.Get("ReportingBegin", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.HeaderTimeType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("ReportingBegin", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, "ReportingBegin", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.HeaderTimeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object ReportingEnd {
            get {
                XElement x = this.GetElement(XName.Get("ReportingEnd", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.HeaderTimeType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("ReportingEnd", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), value, "ReportingEnd", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.message.HeaderTimeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Source {
            get {
                if ((this.SourceField == null)) {
                    this.SourceField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Source", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.SourceField;
            }
            set {
                if ((value == null)) {
                    this.SourceField = null;
                }
                else {
                    if ((this.SourceField == null)) {
                        this.SourceField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Source", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.SourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HeaderType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HeaderType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("Test", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(bool));
            localElementDictionary.Add(XName.Get("Truncated", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(bool));
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Prepared", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(object));
            localElementDictionary.Add(XName.Get("Sender", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(PartyType));
            localElementDictionary.Add(XName.Get("Receiver", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(PartyType));
            localElementDictionary.Add(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamilyAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("DataSetAgency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("DataSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("DataSetAction", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("Extracted", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("ReportingBegin", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(object));
            localElementDictionary.Add(XName.Get("ReportingEnd", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(object));
            localElementDictionary.Add(XName.Get("Source", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// PartyType defines the information which is sent about various parties such as senders and receivers of messages. The Name is the ID of the party, and Contact provides contact details.
    /// </para>
    /// <para>
    /// Regular expression: (Name*, Contact*)
    /// </para>
    /// </summary>
    public partial class PartyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContactType> ContactField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PartyType(XElement xe) { return XTypedServices.ToXTypedElement<PartyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PartyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")), new NamedContentModelEntity(XName.Get("Contact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message")));
        }
        
        /// <summary>
        /// <para>
        /// PartyType defines the information which is sent about various parties such as senders and receivers of messages. The Name is the ID of the party, and Contact provides contact details.
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Contact*)
        /// </para>
        /// </summary>
        public PartyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Contact*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Contact*)
        /// </para>
        /// </summary>
        public IList<ContactType> Contact {
            get {
                if ((this.ContactField == null)) {
                    this.ContactField = new XTypedList<ContactType>(this, LinqToXsdTypeManager.Instance, XName.Get("Contact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.ContactField;
            }
            set {
                if ((value == null)) {
                    this.ContactField = null;
                }
                else {
                    if ((this.ContactField == null)) {
                        this.ContactField = XTypedList<ContactType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Contact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<ContactType>(this.ContactField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PartyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PartyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Contact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(ContactType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ContactType provides defines the contact information about a party. The Name provides a human-readable name.
    /// </para>
    /// <para>
    /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
    /// </para>
    /// </summary>
    public partial class ContactType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DepartmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> RoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> TelephoneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> FaxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> X400Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> URIField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> EmailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ContactType(XElement xe) { return XTypedServices.ToXTypedElement<ContactType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContactType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// ContactType provides defines the contact information about a party. The Name provides a human-readable name.
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public ContactType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Department {
            get {
                if ((this.DepartmentField == null)) {
                    this.DepartmentField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.DepartmentField;
            }
            set {
                if ((value == null)) {
                    this.DepartmentField = null;
                }
                else {
                    if ((this.DepartmentField == null)) {
                        this.DepartmentField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DepartmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Role {
            get {
                if ((this.RoleField == null)) {
                    this.RoleField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.RoleField;
            }
            set {
                if ((value == null)) {
                    this.RoleField = null;
                }
                else {
                    if ((this.RoleField == null)) {
                        this.RoleField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.RoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Telephone {
            get {
                if ((this.TelephoneField == null)) {
                    this.TelephoneField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.TelephoneField;
            }
            set {
                if ((value == null)) {
                    this.TelephoneField = null;
                }
                else {
                    if ((this.TelephoneField == null)) {
                        this.TelephoneField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.TelephoneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Fax {
            get {
                if ((this.FaxField == null)) {
                    this.FaxField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.FaxField;
            }
            set {
                if ((value == null)) {
                    this.FaxField = null;
                }
                else {
                    if ((this.FaxField == null)) {
                        this.FaxField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.FaxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> X400 {
            get {
                if ((this.X400Field == null)) {
                    this.X400Field = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.X400Field;
            }
            set {
                if ((value == null)) {
                    this.X400Field = null;
                }
                else {
                    if ((this.X400Field == null)) {
                        this.X400Field = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.X400Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<System.Uri> URI {
            get {
                if ((this.URIField == null)) {
                    this.URIField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.URIField;
            }
            set {
                if ((value == null)) {
                    this.URIField = null;
                }
                else {
                    if ((this.URIField == null)) {
                        this.URIField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.URIField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Email {
            get {
                if ((this.EmailField == null)) {
                    this.EmailField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                }
                return this.EmailField;
            }
            set {
                if ((value == null)) {
                    this.EmailField = null;
                }
                else {
                    if ((this.EmailField == null)) {
                        this.EmailField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.EmailField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContactType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContactType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(string));
            localElementDictionary.Add(XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Provides a union type of xs:date and xs:dateTime for the header fields in the message.
    /// </para>
    /// </summary>
    public sealed class HeaderTimeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), null)});
        
        private HeaderTimeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// StructureType defines the contents of a structure message.
    /// </para>
    /// </summary>
    public partial class Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StructureType ContentField;
        
         public static explicit operator Structure(XElement xe) { return XTypedServices.ToXTypedElement<Structure, StructureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// StructureType defines the contents of a structure message.
        /// </para>
        /// </summary>
        public Structure() {
            SetInnerType(new StructureType());
        }
        
        /// <summary>
        /// <para>
        /// StructureType defines the contents of a structure message.
        /// </para>
        /// </summary>
        public Structure(StructureType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public StructureType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType OrganisationSchemes {
            get {
                return this.ContentField.OrganisationSchemes;
            }
            set {
                this.ContentField.OrganisationSchemes = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType Dataflows {
            get {
                return this.ContentField.Dataflows;
            }
            set {
                this.ContentField.Dataflows = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType Metadataflows {
            get {
                return this.ContentField.Metadataflows;
            }
            set {
                this.ContentField.Metadataflows = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType CategorySchemes {
            get {
                return this.ContentField.CategorySchemes;
            }
            set {
                this.ContentField.CategorySchemes = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType CodeLists {
            get {
                return this.ContentField.CodeLists;
            }
            set {
                this.ContentField.CodeLists = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType HierarchicalCodelists {
            get {
                return this.ContentField.HierarchicalCodelists;
            }
            set {
                this.ContentField.HierarchicalCodelists = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType Concepts {
            get {
                return this.ContentField.Concepts;
            }
            set {
                this.ContentField.Concepts = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType MetadataStructureDefinitions {
            get {
                return this.ContentField.MetadataStructureDefinitions;
            }
            set {
                this.ContentField.MetadataStructureDefinitions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType KeyFamilies {
            get {
                return this.ContentField.KeyFamilies;
            }
            set {
                this.ContentField.KeyFamilies = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType StructureSets {
            get {
                return this.ContentField.StructureSets;
            }
            set {
                this.ContentField.StructureSets = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType ReportingTaxonomies {
            get {
                return this.ContentField.ReportingTaxonomies;
            }
            set {
                this.ContentField.ReportingTaxonomies = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Header, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType Processes {
            get {
                return this.ContentField.Processes;
            }
            set {
                this.ContentField.Processes = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Structure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Structure Load(string xmlFile) {
            return XTypedServices.Load<Structure, StructureType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Structure Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Structure, StructureType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Structure Parse(string xml) {
            return XTypedServices.Parse<Structure, StructureType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Structure(((StructureType)(this.Content.Clone())));
        }
        
        private void SetInnerType(StructureType ContentField) {
            this.ContentField = ((StructureType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GenericDataType defines the contents of a GenericData message.
    /// </para>
    /// </summary>
    public partial class GenericData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GenericDataType ContentField;
        
         public static explicit operator GenericData(XElement xe) { return XTypedServices.ToXTypedElement<GenericData, GenericDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GenericDataType defines the contents of a GenericData message.
        /// </para>
        /// </summary>
        public GenericData() {
            SetInnerType(new GenericDataType());
        }
        
        /// <summary>
        /// <para>
        /// GenericDataType defines the contents of a GenericData message.
        /// </para>
        /// </summary>
        public GenericData(GenericDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public GenericDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSetType DataSet {
            get {
                return this.ContentField.DataSet;
            }
            set {
                this.ContentField.DataSet = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GenericData", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericData Load(string xmlFile) {
            return XTypedServices.Load<GenericData, GenericDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericData, GenericDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericData Parse(string xml) {
            return XTypedServices.Parse<GenericData, GenericDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericData(((GenericDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GenericDataType ContentField) {
            this.ContentField = ((GenericDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// UtilityDataType defines the contents of a UtilityData message.
    /// </para>
    /// </summary>
    public partial class UtilityData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UtilityDataType ContentField;
        
         public static explicit operator UtilityData(XElement xe) { return XTypedServices.ToXTypedElement<UtilityData, UtilityDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// UtilityDataType defines the contents of a UtilityData message.
        /// </para>
        /// </summary>
        public UtilityData() {
            SetInnerType(new UtilityDataType());
        }
        
        /// <summary>
        /// <para>
        /// UtilityDataType defines the contents of a UtilityData message.
        /// </para>
        /// </summary>
        public UtilityData(UtilityDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UtilityDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet DataSet {
            get {
                return this.ContentField.DataSet;
            }
            set {
                this.ContentField.DataSet = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UtilityData", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UtilityData Load(string xmlFile) {
            return XTypedServices.Load<UtilityData, UtilityDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UtilityData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UtilityData, UtilityDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UtilityData Parse(string xml) {
            return XTypedServices.Parse<UtilityData, UtilityDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UtilityData(((UtilityDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UtilityDataType ContentField) {
            this.ContentField = ((UtilityDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// CompactDataType defines the contents of a CompactData message.
    /// </para>
    /// </summary>
    public partial class CompactData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CompactDataType ContentField;
        
         public static explicit operator CompactData(XElement xe) { return XTypedServices.ToXTypedElement<CompactData, CompactDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// CompactDataType defines the contents of a CompactData message.
        /// </para>
        /// </summary>
        public CompactData() {
            SetInnerType(new CompactDataType());
        }
        
        /// <summary>
        /// <para>
        /// CompactDataType defines the contents of a CompactData message.
        /// </para>
        /// </summary>
        public CompactData(CompactDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public CompactDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet DataSet {
            get {
                return this.ContentField.DataSet;
            }
            set {
                this.ContentField.DataSet = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CompactData", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CompactData Load(string xmlFile) {
            return XTypedServices.Load<CompactData, CompactDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CompactData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CompactData, CompactDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CompactData Parse(string xml) {
            return XTypedServices.Parse<CompactData, CompactDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new CompactData(((CompactDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(CompactDataType ContentField) {
            this.ContentField = ((CompactDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// CrossSectionalDataType defines the contents of a CrossSectionalData message.
    /// </para>
    /// </summary>
    public partial class CrossSectionalData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CrossSectionalDataType ContentField;
        
         public static explicit operator CrossSectionalData(XElement xe) { return XTypedServices.ToXTypedElement<CrossSectionalData, CrossSectionalDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// CrossSectionalDataType defines the contents of a CrossSectionalData message.
        /// </para>
        /// </summary>
        public CrossSectionalData() {
            SetInnerType(new CrossSectionalDataType());
        }
        
        /// <summary>
        /// <para>
        /// CrossSectionalDataType defines the contents of a CrossSectionalData message.
        /// </para>
        /// </summary>
        public CrossSectionalData(CrossSectionalDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public CrossSectionalDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, DataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet DataSet {
            get {
                return this.ContentField.DataSet;
            }
            set {
                this.ContentField.DataSet = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CrossSectionalData", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CrossSectionalData Load(string xmlFile) {
            return XTypedServices.Load<CrossSectionalData, CrossSectionalDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CrossSectionalData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CrossSectionalData, CrossSectionalDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CrossSectionalData Parse(string xml) {
            return XTypedServices.Parse<CrossSectionalData, CrossSectionalDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new CrossSectionalData(((CrossSectionalDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(CrossSectionalDataType ContentField) {
            this.ContentField = ((CrossSectionalDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GenericMetadataType defines the contents of a Generic Metadata message.
    /// </para>
    /// </summary>
    public partial class GenericMetadata : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GenericMetadataType ContentField;
        
         public static explicit operator GenericMetadata(XElement xe) { return XTypedServices.ToXTypedElement<GenericMetadata, GenericMetadataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GenericMetadataType defines the contents of a Generic Metadata message.
        /// </para>
        /// </summary>
        public GenericMetadata() {
            SetInnerType(new GenericMetadataType());
        }
        
        /// <summary>
        /// <para>
        /// GenericMetadataType defines the contents of a Generic Metadata message.
        /// </para>
        /// </summary>
        public GenericMetadata(GenericMetadataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public GenericMetadataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, MetadataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet MetadataSet {
            get {
                return this.ContentField.MetadataSet;
            }
            set {
                this.ContentField.MetadataSet = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GenericMetadata", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericMetadata Load(string xmlFile) {
            return XTypedServices.Load<GenericMetadata, GenericMetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericMetadata Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericMetadata, GenericMetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericMetadata Parse(string xml) {
            return XTypedServices.Parse<GenericMetadata, GenericMetadataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericMetadata(((GenericMetadataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GenericMetadataType ContentField) {
            this.ContentField = ((GenericMetadataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// MetadataReportType defines the contents of a metadata structure definition-specific Metadata Report message.
    /// </para>
    /// </summary>
    public partial class MetadataReport : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MetadataReportType ContentField;
        
         public static explicit operator MetadataReport(XElement xe) { return XTypedServices.ToXTypedElement<MetadataReport, MetadataReportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// MetadataReportType defines the contents of a metadata structure definition-specific Metadata Report message.
        /// </para>
        /// </summary>
        public MetadataReport() {
            SetInnerType(new MetadataReportType());
        }
        
        /// <summary>
        /// <para>
        /// MetadataReportType defines the contents of a metadata structure definition-specific Metadata Report message.
        /// </para>
        /// </summary>
        public MetadataReport(MetadataReportType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public MetadataReportType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, MetadataSet)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet MetadataSet {
            get {
                return this.ContentField.MetadataSet;
            }
            set {
                this.ContentField.MetadataSet = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataReport", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MetadataReport Load(string xmlFile) {
            return XTypedServices.Load<MetadataReport, MetadataReportType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MetadataReport Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MetadataReport, MetadataReportType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MetadataReport Parse(string xml) {
            return XTypedServices.Parse<MetadataReport, MetadataReportType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MetadataReport(((MetadataReportType)(this.Content.Clone())));
        }
        
        private void SetInnerType(MetadataReportType ContentField) {
            this.ContentField = ((MetadataReportType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a type which describes a structure for holding all of the various dedicated registry interface message types.
    /// </para>
    /// </summary>
    public partial class RegistryInterface : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegistryInterfaceType ContentField;
        
         public static explicit operator RegistryInterface(XElement xe) { return XTypedServices.ToXTypedElement<RegistryInterface, RegistryInterfaceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// This is a type which describes a structure for holding all of the various dedicated registry interface message types.
        /// </para>
        /// </summary>
        public RegistryInterface() {
            SetInnerType(new RegistryInterfaceType());
        }
        
        /// <summary>
        /// <para>
        /// This is a type which describes a structure for holding all of the various dedicated registry interface message types.
        /// </para>
        /// </summary>
        public RegistryInterface(RegistryInterfaceType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public RegistryInterfaceType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitSubscriptionRequestType SubmitSubscriptionRequest {
            get {
                return this.ContentField.SubmitSubscriptionRequest;
            }
            set {
                this.ContentField.SubmitSubscriptionRequest = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitSubscriptionResponseType SubmitSubscriptionResponse {
            get {
                return this.ContentField.SubmitSubscriptionResponse;
            }
            set {
                this.ContentField.SubmitSubscriptionResponse = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.NotifyRegistryEventType NotifyRegistryEvent {
            get {
                return this.ContentField.NotifyRegistryEvent;
            }
            set {
                this.ContentField.NotifyRegistryEvent = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitRegistrationRequestType SubmitRegistrationRequest {
            get {
                return this.ContentField.SubmitRegistrationRequest;
            }
            set {
                this.ContentField.SubmitRegistrationRequest = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitRegistrationResponseType SubmitRegistrationResponse {
            get {
                return this.ContentField.SubmitRegistrationResponse;
            }
            set {
                this.ContentField.SubmitRegistrationResponse = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryRegistrationRequestType QueryRegistrationRequest {
            get {
                return this.ContentField.QueryRegistrationRequest;
            }
            set {
                this.ContentField.QueryRegistrationRequest = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryRegistrationResponseType QueryRegistrationResponse {
            get {
                return this.ContentField.QueryRegistrationResponse;
            }
            set {
                this.ContentField.QueryRegistrationResponse = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitStructureRequestType SubmitStructureRequest {
            get {
                return this.ContentField.SubmitStructureRequest;
            }
            set {
                this.ContentField.SubmitStructureRequest = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitStructureResponseType SubmitStructureResponse {
            get {
                return this.ContentField.SubmitStructureResponse;
            }
            set {
                this.ContentField.SubmitStructureResponse = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryStructureRequestType QueryStructureRequest {
            get {
                return this.ContentField.QueryStructureRequest;
            }
            set {
                this.ContentField.QueryStructureRequest = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryStructureResponseType QueryStructureResponse {
            get {
                return this.ContentField.QueryStructureResponse;
            }
            set {
                this.ContentField.QueryStructureResponse = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitProvisioningRequestType SubmitProvisioningRequest {
            get {
                return this.ContentField.SubmitProvisioningRequest;
            }
            set {
                this.ContentField.SubmitProvisioningRequest = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.SubmitProvisioningResponseType SubmitProvisioningResponse {
            get {
                return this.ContentField.SubmitProvisioningResponse;
            }
            set {
                this.ContentField.SubmitProvisioningResponse = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryProvisioningRequestType QueryProvisioningRequest {
            get {
                return this.ContentField.QueryProvisioningRequest;
            }
            set {
                this.ContentField.QueryProvisioningRequest = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (SubmitSubscriptionRequest | SubmitSubscriptionResponse | NotifyRegistryEvent | SubmitRegistrationRequest | SubmitRegistrationResponse | QueryRegistrationRequest | QueryRegistrationResponse | SubmitStructureRequest | SubmitStructureResponse | QueryStructureRequest | QueryStructureResponse | SubmitProvisioningRequest | SubmitProvisioningResponse | QueryProvisioningRequest | QueryProvisioningResponse))
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryProvisioningResponseType QueryProvisioningResponse {
            get {
                return this.ContentField.QueryProvisioningResponse;
            }
            set {
                this.ContentField.QueryProvisioningResponse = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RegistryInterface", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RegistryInterface Load(string xmlFile) {
            return XTypedServices.Load<RegistryInterface, RegistryInterfaceType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static RegistryInterface Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RegistryInterface, RegistryInterfaceType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static RegistryInterface Parse(string xml) {
            return XTypedServices.Parse<RegistryInterface, RegistryInterfaceType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new RegistryInterface(((RegistryInterfaceType)(this.Content.Clone())));
        }
        
        private void SetInnerType(RegistryInterfaceType ContentField) {
            this.ContentField = ((RegistryInterfaceType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// QueryMessageType defines the contents of a QueryMessage.
    /// </para>
    /// </summary>
    public partial class QueryMessage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private QueryMessageType ContentField;
        
         public static explicit operator QueryMessage(XElement xe) { return XTypedServices.ToXTypedElement<QueryMessage, QueryMessageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// QueryMessageType defines the contents of a QueryMessage.
        /// </para>
        /// </summary>
        public QueryMessage() {
            SetInnerType(new QueryMessageType());
        }
        
        /// <summary>
        /// <para>
        /// QueryMessageType defines the contents of a QueryMessage.
        /// </para>
        /// </summary>
        public QueryMessage(QueryMessageType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public QueryMessageType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Header, Query)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.query.QueryType Query {
            get {
                return this.ContentField.Query;
            }
            set {
                this.ContentField.Query = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static QueryMessage Load(string xmlFile) {
            return XTypedServices.Load<QueryMessage, QueryMessageType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static QueryMessage Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<QueryMessage, QueryMessageType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static QueryMessage Parse(string xml) {
            return XTypedServices.Parse<QueryMessage, QueryMessageType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new QueryMessage(((QueryMessageType)(this.Content.Clone())));
        }
        
        private void SetInnerType(QueryMessageType ContentField) {
            this.ContentField = ((QueryMessageType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// MessageGroupType defines the contents of a MessageGroup message.
    /// </para>
    /// </summary>
    public partial class MessageGroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MessageGroupType ContentField;
        
         public static explicit operator MessageGroup(XElement xe) { return XTypedServices.ToXTypedElement<MessageGroup, MessageGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// MessageGroupType defines the contents of a MessageGroup message.
        /// </para>
        /// </summary>
        public MessageGroup() {
            SetInnerType(new MessageGroupType());
        }
        
        /// <summary>
        /// <para>
        /// MessageGroupType defines the contents of a MessageGroup message.
        /// </para>
        /// </summary>
        public MessageGroup(MessageGroupType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public MessageGroupType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.generic.DataSet> DataSet {
            get {
                return this.ContentField.DataSet;
            }
            set {
                this.ContentField.DataSet = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility.DataSet> DataSet1 {
            get {
                return this.ContentField.DataSet1;
            }
            set {
                this.ContentField.DataSet1 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact.DataSet> DataSet2 {
            get {
                return this.ContentField.DataSet2;
            }
            set {
                this.ContentField.DataSet2 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.cross.DataSet> DataSet3 {
            get {
                return this.ContentField.DataSet3;
            }
            set {
                this.ContentField.DataSet3 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.genericmetadata.MetadataSet> MetadataSet {
            get {
                return this.ContentField.MetadataSet;
            }
            set {
                this.ContentField.MetadataSet = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Header, (DataSet+ | DataSet1+ | DataSet2+ | DataSet3+ | MetadataSet+ | MetadataSet1+))
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport.MetadataSet> MetadataSet1 {
            get {
                return this.ContentField.MetadataSet1;
            }
            set {
                this.ContentField.MetadataSet1 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                return this.ContentField.id;
            }
            set {
                this.ContentField.id = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MessageGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MessageGroup Load(string xmlFile) {
            return XTypedServices.Load<MessageGroup, MessageGroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MessageGroup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MessageGroup, MessageGroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MessageGroup Parse(string xml) {
            return XTypedServices.Parse<MessageGroup, MessageGroupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MessageGroup(((MessageGroupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(MessageGroupType ContentField) {
            this.ContentField = ((MessageGroupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// HeaderType defines the header fields used for all messages. ID identifies a data flow definition, which, when combined with time, uniquely identifies the data set. Test indicates whather the message is for test purposes or not. Truncated is used in data messages which are responding to Query messages, and is set to true only if the response has been truncated to meet size limits suggested by the defaultLimit attribute in the Query mesage.  Name provides a name for the transmission. Prepared is the date prepared. Sender is information about the sender, and Receiver is information about the receiver. Agency provides the code identifier/abbreviation for the maintenance agency of a data set. Data set id provides an identifier for a contained data set. Action code provides a code for determining whether the enclosed message is an Update or Delete message (not to be used with the UtilityData message). KeyFamilyRef is used to reference a key family for a contained data set, using its id. (This information is required at the DataSet level for some messages, but is provided here as a convenience for those messages which do not require it.) KeyFamilyAgency specifies the agency of the key family using its coded id.  Fields which refer to a contained data set need not be used if the message contains a query or structural information - these messages provide specific fields for holding this information. The ones here are not to be used as defaults. Extracted is a time-stamp from the system rendering the data; ReportingBegin and ReportingEnd provide the time period covered by the message (in the case of data). Source provides human-readable information about the source of the data.
    /// </para>
    /// </summary>
    public partial class Header : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HeaderType ContentField;
        
         public static explicit operator Header(XElement xe) { return XTypedServices.ToXTypedElement<Header, HeaderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// HeaderType defines the header fields used for all messages. ID identifies a data flow definition, which, when combined with time, uniquely identifies the data set. Test indicates whather the message is for test purposes or not. Truncated is used in data messages which are responding to Query messages, and is set to true only if the response has been truncated to meet size limits suggested by the defaultLimit attribute in the Query mesage.  Name provides a name for the transmission. Prepared is the date prepared. Sender is information about the sender, and Receiver is information about the receiver. Agency provides the code identifier/abbreviation for the maintenance agency of a data set. Data set id provides an identifier for a contained data set. Action code provides a code for determining whether the enclosed message is an Update or Delete message (not to be used with the UtilityData message). KeyFamilyRef is used to reference a key family for a contained data set, using its id. (This information is required at the DataSet level for some messages, but is provided here as a convenience for those messages which do not require it.) KeyFamilyAgency specifies the agency of the key family using its coded id.  Fields which refer to a contained data set need not be used if the message contains a query or structural information - these messages provide specific fields for holding this information. The ones here are not to be used as defaults. Extracted is a time-stamp from the system rendering the data; ReportingBegin and ReportingEnd provide the time period covered by the message (in the case of data). Source provides human-readable information about the source of the data.
        /// </para>
        /// </summary>
        public Header() {
            SetInnerType(new HeaderType());
        }
        
        /// <summary>
        /// <para>
        /// HeaderType defines the header fields used for all messages. ID identifies a data flow definition, which, when combined with time, uniquely identifies the data set. Test indicates whather the message is for test purposes or not. Truncated is used in data messages which are responding to Query messages, and is set to true only if the response has been truncated to meet size limits suggested by the defaultLimit attribute in the Query mesage.  Name provides a name for the transmission. Prepared is the date prepared. Sender is information about the sender, and Receiver is information about the receiver. Agency provides the code identifier/abbreviation for the maintenance agency of a data set. Data set id provides an identifier for a contained data set. Action code provides a code for determining whether the enclosed message is an Update or Delete message (not to be used with the UtilityData message). KeyFamilyRef is used to reference a key family for a contained data set, using its id. (This information is required at the DataSet level for some messages, but is provided here as a convenience for those messages which do not require it.) KeyFamilyAgency specifies the agency of the key family using its coded id.  Fields which refer to a contained data set need not be used if the message contains a query or structural information - these messages provide specific fields for holding this information. The ones here are not to be used as defaults. Extracted is a time-stamp from the system rendering the data; ReportingBegin and ReportingEnd provide the time period covered by the message (in the case of data). Source provides human-readable information about the source of the data.
        /// </para>
        /// </summary>
        public Header(HeaderType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public HeaderType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public bool Test {
            get {
                return this.ContentField.Test;
            }
            set {
                this.ContentField.Test = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public System.Nullable<bool> Truncated {
            get {
                return this.ContentField.Truncated;
            }
            set {
                this.ContentField.Truncated = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                return this.ContentField.Name;
            }
            set {
                this.ContentField.Name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object Prepared {
            get {
                return this.ContentField.Prepared;
            }
            set {
                this.ContentField.Prepared = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<PartyType> Sender {
            get {
                return this.ContentField.Sender;
            }
            set {
                this.ContentField.Sender = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<PartyType> Receiver {
            get {
                return this.ContentField.Receiver;
            }
            set {
                this.ContentField.Receiver = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string KeyFamilyRef {
            get {
                return this.ContentField.KeyFamilyRef;
            }
            set {
                this.ContentField.KeyFamilyRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string KeyFamilyAgency {
            get {
                return this.ContentField.KeyFamilyAgency;
            }
            set {
                this.ContentField.KeyFamilyAgency = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetAgency {
            get {
                return this.ContentField.DataSetAgency;
            }
            set {
                this.ContentField.DataSetAgency = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetID {
            get {
                return this.ContentField.DataSetID;
            }
            set {
                this.ContentField.DataSetID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public string DataSetAction {
            get {
                return this.ContentField.DataSetAction;
            }
            set {
                this.ContentField.DataSetAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> Extracted {
            get {
                return this.ContentField.Extracted;
            }
            set {
                this.ContentField.Extracted = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object ReportingBegin {
            get {
                return this.ContentField.ReportingBegin;
            }
            set {
                this.ContentField.ReportingBegin = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public object ReportingEnd {
            get {
                return this.ContentField.ReportingEnd;
            }
            set {
                this.ContentField.ReportingEnd = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ID, Test, Truncated?, Name*, Prepared, Sender+, Receiver*, KeyFamilyRef?, KeyFamilyAgency?, DataSetAgency?, DataSetID?, DataSetAction?, Extracted?, ReportingBegin?, ReportingEnd?, Source*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Source {
            get {
                return this.ContentField.Source;
            }
            set {
                this.ContentField.Source = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Header", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Header Load(string xmlFile) {
            return XTypedServices.Load<Header, HeaderType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Header Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Header, HeaderType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Header Parse(string xml) {
            return XTypedServices.Parse<Header, HeaderType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Header(((HeaderType)(this.Content.Clone())));
        }
        
        private void SetInnerType(HeaderType ContentField) {
            this.ContentField = ((HeaderType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public Structure Structure {  get {return rootObject as Structure; } }

    public GenericData GenericData {  get {return rootObject as GenericData; } }

    public UtilityData UtilityData {  get {return rootObject as UtilityData; } }

    public CompactData CompactData {  get {return rootObject as CompactData; } }

    public CrossSectionalData CrossSectionalData {  get {return rootObject as CrossSectionalData; } }

    public GenericMetadata GenericMetadata {  get {return rootObject as GenericMetadata; } }

    public MetadataReport MetadataReport {  get {return rootObject as MetadataReport; } }

    public RegistryInterface RegistryInterface {  get {return rootObject as RegistryInterface; } }

    public QueryMessage QueryMessage {  get {return rootObject as QueryMessage; } }

    public MessageGroup MessageGroup {  get {return rootObject as MessageGroup; } }

    public Header Header {  get {return rootObject as Header; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Structure root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UtilityData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CompactData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CrossSectionalData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericMetadata root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MetadataReport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RegistryInterface root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(QueryMessage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MessageGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Header root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// OrganisationSchemesType contains one or more OrganisationSchemes.
    /// </para>
    /// <para>
    /// Regular expression: (OrganisationScheme+)
    /// </para>
    /// </summary>
    public partial class OrganisationSchemesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationSchemeType> OrganisationSchemeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrganisationSchemesType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationSchemesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationSchemesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OrganisationScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// OrganisationSchemesType contains one or more OrganisationSchemes.
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationScheme+)
        /// </para>
        /// </summary>
        public OrganisationSchemesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationScheme+)
        /// </para>
        /// </summary>
        public IList<OrganisationSchemeType> OrganisationScheme {
            get {
                if ((this.OrganisationSchemeField == null)) {
                    this.OrganisationSchemeField = new XTypedList<OrganisationSchemeType>(this, LinqToXsdTypeManager.Instance, XName.Get("OrganisationScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.OrganisationSchemeField;
            }
            set {
                if ((value == null)) {
                    this.OrganisationSchemeField = null;
                }
                else {
                    if ((this.OrganisationSchemeField == null)) {
                        this.OrganisationSchemeField = XTypedList<OrganisationSchemeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OrganisationScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<OrganisationSchemeType>(this.OrganisationSchemeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrganisationSchemesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationSchemesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("OrganisationScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(OrganisationSchemeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// OrganisationSchemeType contains the details of an OrganisationScheme. In OrganisationSchemes, the organisation roles of agency, data provider, and data consumer may be specified. A single organisation may play more than one role. Name is an element which provides for a human-readable name for the organization. Description may be used to provide a longer, human-readable description. the is attribute provides a formal ID for the organisation scheme; the version attribute specifies a particular version. If blank, it is assumed that the version is "1.0". The uri attributre specifies the location of a valid SDMC Structure Message containing the full details of the organisation sc`heme, and is required if the isExternalReference attribute has a value of true. If isExternalReference has a value of false, full details must be provided in the current instance of the OrganisationScheme element. The urn attribute provides a formal SDMX Registry URL - see the Logical Registry Specification for specific requirements. An agencyID must be provided, identifying the maintenance agency of the organisation scheme. Also, if the organisation scheme is final, the isFinal attribute must have a value of true - otherwise, it will be assumed to be non-final. (All production schemes must be made final - that is, unchangeable without versioning.) The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, Agencies*, DataProviders*, DataConsumers*, Annotations?)
    /// </para>
    /// </summary>
    public partial class OrganisationSchemeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AgenciesType> AgenciesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataProvidersType> DataProvidersField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataConsumersType> DataConsumersField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrganisationSchemeType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationSchemeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationSchemeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Agencies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataProviders", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataConsumers", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// OrganisationSchemeType contains the details of an OrganisationScheme. In OrganisationSchemes, the organisation roles of agency, data provider, and data consumer may be specified. A single organisation may play more than one role. Name is an element which provides for a human-readable name for the organization. Description may be used to provide a longer, human-readable description. the is attribute provides a formal ID for the organisation scheme; the version attribute specifies a particular version. If blank, it is assumed that the version is "1.0". The uri attributre specifies the location of a valid SDMC Structure Message containing the full details of the organisation sc`heme, and is required if the isExternalReference attribute has a value of true. If isExternalReference has a value of false, full details must be provided in the current instance of the OrganisationScheme element. The urn attribute provides a formal SDMX Registry URL - see the Logical Registry Specification for specific requirements. An agencyID must be provided, identifying the maintenance agency of the organisation scheme. Also, if the organisation scheme is final, the isFinal attribute must have a value of true - otherwise, it will be assumed to be non-final. (All production schemes must be made final - that is, unchangeable without versioning.) The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Agencies*, DataProviders*, DataConsumers*, Annotations?)
        /// </para>
        /// </summary>
        public OrganisationSchemeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Agencies*, DataProviders*, DataConsumers*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Agencies*, DataProviders*, DataConsumers*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Agencies*, DataProviders*, DataConsumers*, Annotations?)
        /// </para>
        /// </summary>
        public IList<AgenciesType> Agencies {
            get {
                if ((this.AgenciesField == null)) {
                    this.AgenciesField = new XTypedList<AgenciesType>(this, LinqToXsdTypeManager.Instance, XName.Get("Agencies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.AgenciesField;
            }
            set {
                if ((value == null)) {
                    this.AgenciesField = null;
                }
                else {
                    if ((this.AgenciesField == null)) {
                        this.AgenciesField = XTypedList<AgenciesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Agencies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<AgenciesType>(this.AgenciesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Agencies*, DataProviders*, DataConsumers*, Annotations?)
        /// </para>
        /// </summary>
        public IList<DataProvidersType> DataProviders {
            get {
                if ((this.DataProvidersField == null)) {
                    this.DataProvidersField = new XTypedList<DataProvidersType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataProviders", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DataProvidersField;
            }
            set {
                if ((value == null)) {
                    this.DataProvidersField = null;
                }
                else {
                    if ((this.DataProvidersField == null)) {
                        this.DataProvidersField = XTypedList<DataProvidersType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataProviders", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<DataProvidersType>(this.DataProvidersField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Agencies*, DataProviders*, DataConsumers*, Annotations?)
        /// </para>
        /// </summary>
        public IList<DataConsumersType> DataConsumers {
            get {
                if ((this.DataConsumersField == null)) {
                    this.DataConsumersField = new XTypedList<DataConsumersType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataConsumers", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DataConsumersField;
            }
            set {
                if ((value == null)) {
                    this.DataConsumersField = null;
                }
                else {
                    if ((this.DataConsumersField == null)) {
                        this.DataConsumersField = XTypedList<DataConsumersType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataConsumers", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<DataConsumersType>(this.DataConsumersField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Agencies*, DataProviders*, DataConsumers*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrganisationSchemeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationSchemeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Agencies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(AgenciesType));
            localElementDictionary.Add(XName.Get("DataProviders", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(DataProvidersType));
            localElementDictionary.Add(XName.Get("DataConsumers", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(DataConsumersType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataProvidersType contains one or more data providers. Data providers are those who report or disseminate data sets or metadata sets.
    /// </para>
    /// <para>
    /// Regular expression: (DataProvider+)
    /// </para>
    /// </summary>
    public partial class DataProvidersType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationType> DataProviderField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataProvidersType(XElement xe) { return XTypedServices.ToXTypedElement<DataProvidersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataProvidersType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// DataProvidersType contains one or more data providers. Data providers are those who report or disseminate data sets or metadata sets.
        /// </para>
        /// <para>
        /// Regular expression: (DataProvider+)
        /// </para>
        /// </summary>
        public DataProvidersType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataProvider+)
        /// </para>
        /// </summary>
        public IList<OrganisationType> DataProvider {
            get {
                if ((this.DataProviderField == null)) {
                    this.DataProviderField = new XTypedList<OrganisationType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DataProviderField;
            }
            set {
                if ((value == null)) {
                    this.DataProviderField = null;
                }
                else {
                    if ((this.DataProviderField == null)) {
                        this.DataProviderField = XTypedList<OrganisationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<OrganisationType>(this.DataProviderField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataProvidersType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataProvidersType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(OrganisationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataConsumersType contains one or more data consumers. Data consumers collect or use disseminated data sets and metadata sets.
    /// </para>
    /// <para>
    /// Regular expression: (DataConsumer+)
    /// </para>
    /// </summary>
    public partial class DataConsumersType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationType> DataConsumerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataConsumersType(XElement xe) { return XTypedServices.ToXTypedElement<DataConsumersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataConsumersType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataConsumer", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// DataConsumersType contains one or more data consumers. Data consumers collect or use disseminated data sets and metadata sets.
        /// </para>
        /// <para>
        /// Regular expression: (DataConsumer+)
        /// </para>
        /// </summary>
        public DataConsumersType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataConsumer+)
        /// </para>
        /// </summary>
        public IList<OrganisationType> DataConsumer {
            get {
                if ((this.DataConsumerField == null)) {
                    this.DataConsumerField = new XTypedList<OrganisationType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataConsumer", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DataConsumerField;
            }
            set {
                if ((value == null)) {
                    this.DataConsumerField = null;
                }
                else {
                    if ((this.DataConsumerField == null)) {
                        this.DataConsumerField = XTypedList<OrganisationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataConsumer", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<OrganisationType>(this.DataConsumerField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataConsumersType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataConsumersType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataConsumer", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(OrganisationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// AgenciesType contains one or more Agencies. Agencies are those organisations which act as the maintainers of structural definitions of various types. Agencies are often supplied as part of an organisation scheme, but may also be supplied independently using this element.
    /// </para>
    /// <para>
    /// Regular expression: (Agency+)
    /// </para>
    /// </summary>
    public partial class AgenciesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationType> AgencyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AgenciesType(XElement xe) { return XTypedServices.ToXTypedElement<AgenciesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AgenciesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// AgenciesType contains one or more Agencies. Agencies are those organisations which act as the maintainers of structural definitions of various types. Agencies are often supplied as part of an organisation scheme, but may also be supplied independently using this element.
        /// </para>
        /// <para>
        /// Regular expression: (Agency+)
        /// </para>
        /// </summary>
        public AgenciesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Agency+)
        /// </para>
        /// </summary>
        public IList<OrganisationType> Agency {
            get {
                if ((this.AgencyField == null)) {
                    this.AgencyField = new XTypedList<OrganisationType>(this, LinqToXsdTypeManager.Instance, XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.AgencyField;
            }
            set {
                if ((value == null)) {
                    this.AgencyField = null;
                }
                else {
                    if ((this.AgencyField == null)) {
                        this.AgencyField = XTypedList<OrganisationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<OrganisationType>(this.AgencyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AgenciesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AgenciesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Agency", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(OrganisationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// OrganisationType provides a structure for describing agencies, data providers, and data consumers and their contact information. The id attribute carries a code identifying the agency. The version attribute indicates the version of the agency description. The uri attribute provides a uri for an alternate way of identifying the agency information (typically a URL resolving to an agency described in SDMX-ML). Name is an element which provides for a human-readable name for the organization. Description provides for a longer human-readable description of the organisation, which may be provided in multiple, parallel language-equivalent forms. MaintenanceContact provides contact information for the agency when acting as a MaintenanceAgency; CollectorContact does the same when the agency is acting as a statistics collector; DisseminatorContact for when the agency functions as a statistics disseminator; and ReporterContact for when the Agency is functioning as a statistics reporter. OtherContact is used to describe any other role. Note that the Role field in the contact information structure should only be specified for OtherContact. It is allowable to reference full Agency information by using (at a minimum) only the id, name, and uri fields, with the uri pointing to an external description in a valid SDMX-ML Structure message which provides more complete information. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true". The urn attribute holds a valid SDMX Registry URN (see SDMX Registry Specification). The parentOrganisation attribute holds the id of a parent organisation of the same type from the same scheme, indicating that the organisation in question is a department or other sub-division of the parent organisation. Annotations may be provided using the Annotations element, in multiple, parallel-language form.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*, Annotations?)
    /// </para>
    /// </summary>
    public partial class OrganisationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContactType> OtherContactField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrganisationType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("MaintenanceContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CollectorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DisseminatorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ReporterContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("OtherContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// OrganisationType provides a structure for describing agencies, data providers, and data consumers and their contact information. The id attribute carries a code identifying the agency. The version attribute indicates the version of the agency description. The uri attribute provides a uri for an alternate way of identifying the agency information (typically a URL resolving to an agency described in SDMX-ML). Name is an element which provides for a human-readable name for the organization. Description provides for a longer human-readable description of the organisation, which may be provided in multiple, parallel language-equivalent forms. MaintenanceContact provides contact information for the agency when acting as a MaintenanceAgency; CollectorContact does the same when the agency is acting as a statistics collector; DisseminatorContact for when the agency functions as a statistics disseminator; and ReporterContact for when the Agency is functioning as a statistics reporter. OtherContact is used to describe any other role. Note that the Role field in the contact information structure should only be specified for OtherContact. It is allowable to reference full Agency information by using (at a minimum) only the id, name, and uri fields, with the uri pointing to an external description in a valid SDMX-ML Structure message which provides more complete information. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true". The urn attribute holds a valid SDMX Registry URN (see SDMX Registry Specification). The parentOrganisation attribute holds the id of a parent organisation of the same type from the same scheme, indicating that the organisation in question is a department or other sub-division of the parent organisation. Annotations may be provided using the Annotations element, in multiple, parallel-language form.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*, Annotations?)
        /// </para>
        /// </summary>
        public OrganisationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*, Annotations?)
        /// </para>
        /// </summary>
        public ContactType MaintenanceContact {
            get {
                XElement x = this.GetElement(XName.Get("MaintenanceContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((ContactType)(x));
            }
            set {
                this.SetElement(XName.Get("MaintenanceContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*, Annotations?)
        /// </para>
        /// </summary>
        public ContactType CollectorContact {
            get {
                XElement x = this.GetElement(XName.Get("CollectorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((ContactType)(x));
            }
            set {
                this.SetElement(XName.Get("CollectorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*, Annotations?)
        /// </para>
        /// </summary>
        public ContactType DisseminatorContact {
            get {
                XElement x = this.GetElement(XName.Get("DisseminatorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((ContactType)(x));
            }
            set {
                this.SetElement(XName.Get("DisseminatorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*, Annotations?)
        /// </para>
        /// </summary>
        public ContactType ReporterContact {
            get {
                XElement x = this.GetElement(XName.Get("ReporterContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((ContactType)(x));
            }
            set {
                this.SetElement(XName.Get("ReporterContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ContactType> OtherContact {
            get {
                if ((this.OtherContactField == null)) {
                    this.OtherContactField = new XTypedList<ContactType>(this, LinqToXsdTypeManager.Instance, XName.Get("OtherContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.OtherContactField;
            }
            set {
                if ((value == null)) {
                    this.OtherContactField = null;
                }
                else {
                    if ((this.OtherContactField == null)) {
                        this.OtherContactField = XTypedList<ContactType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OtherContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ContactType>(this.OtherContactField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MaintenanceContact?, CollectorContact?, DisseminatorContact?, ReporterContact?, OtherContact*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string parentOrganisation {
            get {
                XAttribute x = this.Attribute(XName.Get("parentOrganisation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("parentOrganisation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrganisationType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("MaintenanceContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ContactType));
            localElementDictionary.Add(XName.Get("CollectorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ContactType));
            localElementDictionary.Add(XName.Get("DisseminatorContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ContactType));
            localElementDictionary.Add(XName.Get("ReporterContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ContactType));
            localElementDictionary.Add(XName.Get("OtherContact", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ContactType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ContactType provides defines the contact information about a party. The id element is used to carry user id information for the contact, whereas Name provides a human-readable name.
    /// </para>
    /// <para>
    /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
    /// </para>
    /// </summary>
    public partial class ContactType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DepartmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> RoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> TelephoneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> FaxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> X400Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> URIField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> EmailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ContactType(XElement xe) { return XTypedServices.ToXTypedElement<ContactType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContactType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// ContactType provides defines the contact information about a party. The id element is used to carry user id information for the contact, whereas Name provides a human-readable name.
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public ContactType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public string id {
            get {
                XElement x = this.GetElement(XName.Get("id", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("id", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "id", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Department {
            get {
                if ((this.DepartmentField == null)) {
                    this.DepartmentField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DepartmentField;
            }
            set {
                if ((value == null)) {
                    this.DepartmentField = null;
                }
                else {
                    if ((this.DepartmentField == null)) {
                        this.DepartmentField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DepartmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Role {
            get {
                if ((this.RoleField == null)) {
                    this.RoleField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.RoleField;
            }
            set {
                if ((value == null)) {
                    this.RoleField = null;
                }
                else {
                    if ((this.RoleField == null)) {
                        this.RoleField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.RoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Telephone {
            get {
                if ((this.TelephoneField == null)) {
                    this.TelephoneField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.TelephoneField;
            }
            set {
                if ((value == null)) {
                    this.TelephoneField = null;
                }
                else {
                    if ((this.TelephoneField == null)) {
                        this.TelephoneField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.TelephoneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Fax {
            get {
                if ((this.FaxField == null)) {
                    this.FaxField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.FaxField;
            }
            set {
                if ((value == null)) {
                    this.FaxField = null;
                }
                else {
                    if ((this.FaxField == null)) {
                        this.FaxField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.FaxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> X400 {
            get {
                if ((this.X400Field == null)) {
                    this.X400Field = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.X400Field;
            }
            set {
                if ((value == null)) {
                    this.X400Field = null;
                }
                else {
                    if ((this.X400Field == null)) {
                        this.X400Field = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.X400Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<System.Uri> URI {
            get {
                if ((this.URIField == null)) {
                    this.URIField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.URIField;
            }
            set {
                if ((value == null)) {
                    this.URIField = null;
                }
                else {
                    if ((this.URIField == null)) {
                        this.URIField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.URIField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, id?, Department*, Role*, (Telephone | Fax | X400 | URI | Email)*)
        /// </para>
        /// </summary>
        public IList<string> Email {
            get {
                if ((this.EmailField == null)) {
                    this.EmailField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.EmailField;
            }
            set {
                if ((value == null)) {
                    this.EmailField = null;
                }
                else {
                    if ((this.EmailField == null)) {
                        this.EmailField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.EmailField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContactType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContactType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("id", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Department", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Role", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Telephone", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Fax", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("X400", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("URI", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("Email", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataflowsType contains one or more data flows.
    /// </para>
    /// <para>
    /// Regular expression: (Dataflow+)
    /// </para>
    /// </summary>
    public partial class DataflowsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataflowType> DataflowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataflowsType(XElement xe) { return XTypedServices.ToXTypedElement<DataflowsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataflowsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// DataflowsType contains one or more data flows.
        /// </para>
        /// <para>
        /// Regular expression: (Dataflow+)
        /// </para>
        /// </summary>
        public DataflowsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Dataflow+)
        /// </para>
        /// </summary>
        public IList<DataflowType> Dataflow {
            get {
                if ((this.DataflowField == null)) {
                    this.DataflowField = new XTypedList<DataflowType>(this, LinqToXsdTypeManager.Instance, XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DataflowField;
            }
            set {
                if ((value == null)) {
                    this.DataflowField = null;
                }
                else {
                    if ((this.DataflowField == null)) {
                        this.DataflowField = XTypedList<DataflowType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<DataflowType>(this.DataflowField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataflowsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataflowsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(DataflowType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataflowType describes the structure of a data flow. A human-readable name must be provided, and may be given in several language-specific variations. A longer human-readable description (also in multiple language-specific versions) may be provided. A reference must be made to a key family, and to a category within a category scheme, using the KeyFamilyRef and CategoryRef elements, unless the Dataflow is a reference to an external data flow, in which case a url must be provided in the uri attribute, and the isExternalReference attribute must be set to true.. Annotations may be provided in the Annotations element. An id unique to the maintaining agency (identified in the agencyID attribute) must be supplied in the "id" attribute;  a version may be specified, and is assumed to be "1.0" if not supplied. The urn attribute may contain a valid registry URN (as per the SDMX Registry Specification). If the dataflow is final, the isFinal attribute must have a value of true - any production dataflow must be final (that is, it cannot be changed without versioning). The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, KeyFamilyRef?, CategoryRef*, Annotations?)
    /// </para>
    /// </summary>
    public partial class DataflowType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryRefType> CategoryRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataflowType(XElement xe) { return XTypedServices.ToXTypedElement<DataflowType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataflowType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategoryRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// DataflowType describes the structure of a data flow. A human-readable name must be provided, and may be given in several language-specific variations. A longer human-readable description (also in multiple language-specific versions) may be provided. A reference must be made to a key family, and to a category within a category scheme, using the KeyFamilyRef and CategoryRef elements, unless the Dataflow is a reference to an external data flow, in which case a url must be provided in the uri attribute, and the isExternalReference attribute must be set to true.. Annotations may be provided in the Annotations element. An id unique to the maintaining agency (identified in the agencyID attribute) must be supplied in the "id" attribute;  a version may be specified, and is assumed to be "1.0" if not supplied. The urn attribute may contain a valid registry URN (as per the SDMX Registry Specification). If the dataflow is final, the isFinal attribute must have a value of true - any production dataflow must be final (that is, it cannot be changed without versioning). The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, KeyFamilyRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public DataflowType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, KeyFamilyRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, KeyFamilyRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, KeyFamilyRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public KeyFamilyRefType KeyFamilyRef {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((KeyFamilyRefType)(x));
            }
            set {
                this.SetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, KeyFamilyRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public IList<CategoryRefType> CategoryRef {
            get {
                if ((this.CategoryRefField == null)) {
                    this.CategoryRefField = new XTypedList<CategoryRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("CategoryRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CategoryRefField;
            }
            set {
                if ((value == null)) {
                    this.CategoryRefField = null;
                }
                else {
                    if ((this.CategoryRefField == null)) {
                        this.CategoryRefField = XTypedList<CategoryRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CategoryRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CategoryRefType>(this.CategoryRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, KeyFamilyRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataflowType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataflowType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(KeyFamilyRefType));
            localElementDictionary.Add(XName.Get("CategoryRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategoryRefType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyFamilyRefType provides a reference to a key-family (data set structure definition). At a minimum, either (a) The key family ID must be provided, as assigned to the key family by the agency whose ID is the value of KeyFamilyAgencyID. A version must also be provided; OR (b) a valid SDMX Registry URN must be provided in the URN element (see SDMX Registry Specification)
    /// </para>
    /// <para>
    /// Regular expression: (URN?, KeyFamilyID?, KeyFamilyAgencyID?, Version?)
    /// </para>
    /// </summary>
    public partial class KeyFamilyRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator KeyFamilyRefType(XElement xe) { return XTypedServices.ToXTypedElement<KeyFamilyRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeyFamilyRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("KeyFamilyAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// KeyFamilyRefType provides a reference to a key-family (data set structure definition). At a minimum, either (a) The key family ID must be provided, as assigned to the key family by the agency whose ID is the value of KeyFamilyAgencyID. A version must also be provided; OR (b) a valid SDMX Registry URN must be provided in the URN element (see SDMX Registry Specification)
        /// </para>
        /// <para>
        /// Regular expression: (URN?, KeyFamilyID?, KeyFamilyAgencyID?, Version?)
        /// </para>
        /// </summary>
        public KeyFamilyRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, KeyFamilyID?, KeyFamilyAgencyID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, KeyFamilyID?, KeyFamilyAgencyID?, Version?)
        /// </para>
        /// </summary>
        public string KeyFamilyID {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "KeyFamilyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, KeyFamilyID?, KeyFamilyAgencyID?, Version?)
        /// </para>
        /// </summary>
        public string KeyFamilyAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("KeyFamilyAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "KeyFamilyAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, KeyFamilyID?, KeyFamilyAgencyID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyFamilyRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeyFamilyRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamilyAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CategoryRefType provides a reference to a category. At a minimum, either a value for CategorySchemeAgencyID, CategorySchemeID, and CategoryID must be provided, or a valid SDMX Registry URN must be provided in the URN element (see SDMX Registry Specification).
    /// </para>
    /// <para>
    /// Regular expression: (URN?, CategorySchemeID?, CategorySchemeAgencyID?, CategorySchemeVersion?, CategoryID?)
    /// </para>
    /// </summary>
    public partial class CategoryRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategoryRefType(XElement xe) { return XTypedServices.ToXTypedElement<CategoryRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategoryRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategorySchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategorySchemeVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CategoryRefType provides a reference to a category. At a minimum, either a value for CategorySchemeAgencyID, CategorySchemeID, and CategoryID must be provided, or a valid SDMX Registry URN must be provided in the URN element (see SDMX Registry Specification).
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CategorySchemeID?, CategorySchemeAgencyID?, CategorySchemeVersion?, CategoryID?)
        /// </para>
        /// </summary>
        public CategoryRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CategorySchemeID?, CategorySchemeAgencyID?, CategorySchemeVersion?, CategoryID?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CategorySchemeID?, CategorySchemeAgencyID?, CategorySchemeVersion?, CategoryID?)
        /// </para>
        /// </summary>
        public string CategorySchemeID {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "CategorySchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CategorySchemeID?, CategorySchemeAgencyID?, CategorySchemeVersion?, CategoryID?)
        /// </para>
        /// </summary>
        public string CategorySchemeAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CategorySchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "CategorySchemeAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CategorySchemeID?, CategorySchemeAgencyID?, CategorySchemeVersion?, CategoryID?)
        /// </para>
        /// </summary>
        public string CategorySchemeVersion {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemeVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("CategorySchemeVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CategorySchemeID?, CategorySchemeAgencyID?, CategorySchemeVersion?, CategoryID?)
        /// </para>
        /// </summary>
        public CategoryIDType CategoryID {
            get {
                XElement x = this.GetElement(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((CategoryIDType)(x));
            }
            set {
                this.SetElement(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategoryRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategoryRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("CategorySchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("CategorySchemeVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategoryIDType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CategoryIDType describes a structure which can provide a path inside a hierarchical category scheme. Each node (category) of the referenced scheme is represented by a CategoryID element, with sub-categories represented by the child CategoryID element. Each CategoryID element must be given a node identifier in the ID field, which corresponds to the ID of the category. It is not necessary to represent the full category path with the nesting structure if each node within the hierarchical category scheme has a unique id.
    /// </para>
    /// <para>
    /// Regular expression: (ID, CategoryVersion?, CategoryID?)
    /// </para>
    /// </summary>
    public partial class CategoryIDType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategoryIDType(XElement xe) { return XTypedServices.ToXTypedElement<CategoryIDType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategoryIDType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategoryVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CategoryIDType describes a structure which can provide a path inside a hierarchical category scheme. Each node (category) of the referenced scheme is represented by a CategoryID element, with sub-categories represented by the child CategoryID element. Each CategoryID element must be given a node identifier in the ID field, which corresponds to the ID of the category. It is not necessary to represent the full category path with the nesting structure if each node within the hierarchical category scheme has a unique id.
        /// </para>
        /// <para>
        /// Regular expression: (ID, CategoryVersion?, CategoryID?)
        /// </para>
        /// </summary>
        public CategoryIDType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ID, CategoryVersion?, CategoryID?)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "ID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, CategoryVersion?, CategoryID?)
        /// </para>
        /// </summary>
        public string CategoryVersion {
            get {
                XElement x = this.GetElement(XName.Get("CategoryVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("CategoryVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ID, CategoryVersion?, CategoryID?)
        /// </para>
        /// </summary>
        public CategoryIDType CategoryID {
            get {
                XElement x = this.GetElement(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((CategoryIDType)(x));
            }
            set {
                this.SetElement(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategoryIDType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategoryIDType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("CategoryVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategoryIDType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MetadataflowsType contains one or more metadata flows.
    /// </para>
    /// <para>
    /// Regular expression: (Metadataflow+)
    /// </para>
    /// </summary>
    public partial class MetadataflowsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataflowType> MetadataflowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataflowsType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataflowsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataflowsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// MetadataflowsType contains one or more metadata flows.
        /// </para>
        /// <para>
        /// Regular expression: (Metadataflow+)
        /// </para>
        /// </summary>
        public MetadataflowsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Metadataflow+)
        /// </para>
        /// </summary>
        public IList<MetadataflowType> Metadataflow {
            get {
                if ((this.MetadataflowField == null)) {
                    this.MetadataflowField = new XTypedList<MetadataflowType>(this, LinqToXsdTypeManager.Instance, XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.MetadataflowField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowField = null;
                }
                else {
                    if ((this.MetadataflowField == null)) {
                        this.MetadataflowField = XTypedList<MetadataflowType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<MetadataflowType>(this.MetadataflowField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataflowsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataflowsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataflowType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MetadataflowType describes the structure of a metadata flow. A human-readable name must be provided, and may be given in several language-specific variations. A longer human-readable description (also in multiple language-specific versions) may be provided. A reference must be made to a metadata structure definition, and to a category within a category scheme, using the MetadataStructureRef and CategoryRef elements. If the Metadataflow is an external reference, this is indicated by setting the isExternalReference attribute to true, and providing a url where the full description can be found in the form of a valid SDMX-ML structure message. In this case, only the id and name must be provided. Annotations may be provided in the Annotations element. An id unique to the maintaining agency (identified in the agencyID attribute) must be supplied in the "id" attribute;  a version may be specified, and is assumed to be "1.0" if not supplied. The urn attribute may contain a valid registry URN (as per the SDMX Registry Specification). If the metadata flow is final, the isFinal attribute must have a value of true - any production metadata flow must be final (that is, it cannot be changed without versioning). The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, MetadataStructureRef?, CategoryRef*, Annotations?)
    /// </para>
    /// </summary>
    public partial class MetadataflowType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryRefType> CategoryRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataflowType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataflowType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataflowType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategoryRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// MetadataflowType describes the structure of a metadata flow. A human-readable name must be provided, and may be given in several language-specific variations. A longer human-readable description (also in multiple language-specific versions) may be provided. A reference must be made to a metadata structure definition, and to a category within a category scheme, using the MetadataStructureRef and CategoryRef elements. If the Metadataflow is an external reference, this is indicated by setting the isExternalReference attribute to true, and providing a url where the full description can be found in the form of a valid SDMX-ML structure message. In this case, only the id and name must be provided. Annotations may be provided in the Annotations element. An id unique to the maintaining agency (identified in the agencyID attribute) must be supplied in the "id" attribute;  a version may be specified, and is assumed to be "1.0" if not supplied. The urn attribute may contain a valid registry URN (as per the SDMX Registry Specification). If the metadata flow is final, the isFinal attribute must have a value of true - any production metadata flow must be final (that is, it cannot be changed without versioning). The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataStructureRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public MetadataflowType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataStructureRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataStructureRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataStructureRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public MetadataStructureRefType MetadataStructureRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((MetadataStructureRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataStructureRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public IList<CategoryRefType> CategoryRef {
            get {
                if ((this.CategoryRefField == null)) {
                    this.CategoryRefField = new XTypedList<CategoryRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("CategoryRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CategoryRefField;
            }
            set {
                if ((value == null)) {
                    this.CategoryRefField = null;
                }
                else {
                    if ((this.CategoryRefField == null)) {
                        this.CategoryRefField = XTypedList<CategoryRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CategoryRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CategoryRefType>(this.CategoryRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataStructureRef?, CategoryRef*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataflowType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataflowType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataStructureRefType));
            localElementDictionary.Add(XName.Get("CategoryRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategoryRefType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MetadataStructureRefType provides a reference to a metadata structure definition. The ID must be provided, as assigned to the metadata structure definition by the agency whose ID is the value of MetadataStructureAgencyID. A version must also be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, MetadataStructureID?, MetadataStructureAgencyID?, Version?)
    /// </para>
    /// </summary>
    public partial class MetadataStructureRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataStructureRefType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataStructureRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataStructureRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("MetadataStructureAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// MetadataStructureRefType provides a reference to a metadata structure definition. The ID must be provided, as assigned to the metadata structure definition by the agency whose ID is the value of MetadataStructureAgencyID. A version must also be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, MetadataStructureID?, MetadataStructureAgencyID?, Version?)
        /// </para>
        /// </summary>
        public MetadataStructureRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, MetadataStructureID?, MetadataStructureAgencyID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, MetadataStructureID?, MetadataStructureAgencyID?, Version?)
        /// </para>
        /// </summary>
        public string MetadataStructureID {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "MetadataStructureID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, MetadataStructureID?, MetadataStructureAgencyID?, Version?)
        /// </para>
        /// </summary>
        public string MetadataStructureAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataStructureAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "MetadataStructureAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, MetadataStructureID?, MetadataStructureAgencyID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataStructureRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataStructureRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructureAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CategorySchemesType contains one or more category schemes.
    /// </para>
    /// <para>
    /// Regular expression: (CategoryScheme+)
    /// </para>
    /// </summary>
    public partial class CategorySchemesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategorySchemeType> CategorySchemeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategorySchemesType(XElement xe) { return XTypedServices.ToXTypedElement<CategorySchemesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategorySchemesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CategoryScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CategorySchemesType contains one or more category schemes.
        /// </para>
        /// <para>
        /// Regular expression: (CategoryScheme+)
        /// </para>
        /// </summary>
        public CategorySchemesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CategoryScheme+)
        /// </para>
        /// </summary>
        public IList<CategorySchemeType> CategoryScheme {
            get {
                if ((this.CategorySchemeField == null)) {
                    this.CategorySchemeField = new XTypedList<CategorySchemeType>(this, LinqToXsdTypeManager.Instance, XName.Get("CategoryScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CategorySchemeField;
            }
            set {
                if ((value == null)) {
                    this.CategorySchemeField = null;
                }
                else {
                    if ((this.CategorySchemeField == null)) {
                        this.CategorySchemeField = XTypedList<CategorySchemeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CategoryScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CategorySchemeType>(this.CategorySchemeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategorySchemesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategorySchemesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CategoryScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategorySchemeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CategorySchemeType describes the structure of a category scheme. This is a simple, levelled hierarchy. The scheme itself is given a human-readable name (which may be in multiple language-specific versions), and may optionally have a human-readable description (also in multiple, landuage-specific versions). Annotations may be provided in the Annotations element. The Category element represents a set of nested categories which describe a simple classification hierarchy. The CategoryScheme must have an agency specified in teh agency attribute, and a unique ID provided for all of the category schemes of that agency in the id attribute. A version may also be supplied - if ommitted, the version is understood to be "1.0". If the isFinal attribute has a value of true, the category scheme  is final and cannot be changed without versioning. All production category schemes must be final. The urn attribute holds a valid registry URN (see the SDMX Registry Specification). If the isExternalReference attribute has a value of true, then the uri attribute must have a value which provides the location of a valid SDMX Structure message providing full details of the Category Scheme. Otherwise, all details must be provided here. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, Category*, Annotations?)
    /// </para>
    /// </summary>
    public partial class CategorySchemeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategorySchemeType(XElement xe) { return XTypedServices.ToXTypedElement<CategorySchemeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategorySchemeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CategorySchemeType describes the structure of a category scheme. This is a simple, levelled hierarchy. The scheme itself is given a human-readable name (which may be in multiple language-specific versions), and may optionally have a human-readable description (also in multiple, landuage-specific versions). Annotations may be provided in the Annotations element. The Category element represents a set of nested categories which describe a simple classification hierarchy. The CategoryScheme must have an agency specified in teh agency attribute, and a unique ID provided for all of the category schemes of that agency in the id attribute. A version may also be supplied - if ommitted, the version is understood to be "1.0". If the isFinal attribute has a value of true, the category scheme  is final and cannot be changed without versioning. All production category schemes must be final. The urn attribute holds a valid registry URN (see the SDMX Registry Specification). If the isExternalReference attribute has a value of true, then the uri attribute must have a value which provides the location of a valid SDMX Structure message providing full details of the Category Scheme. Otherwise, all details must be provided here. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public CategorySchemeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<CategoryType> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.CategoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategorySchemeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategorySchemeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The category is given a human-readable name (which may be in multiple language-specific versions), and may optionally have a human-readable description (also in multiple, landuage-specific versions). Annotations may be provided in the Annotations element. References to dataflows and metadataflows may be provided. The Category element represents a set of nested categories which are child categories. The Category must have a unique ID within the Category Scheme provided in the id attribute. A version may also be supplied - if ommitted, the version is understood to be "1.0". The urn attribute holds a valid registry URN (see the SDMX Registry Specification).
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
    /// </para>
    /// </summary>
    public partial class CategoryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataflowRefType> DataflowRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataflowRefType> MetadataflowRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategoryType(XElement xe) { return XTypedServices.ToXTypedElement<CategoryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategoryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        ///  The category is given a human-readable name (which may be in multiple language-specific versions), and may optionally have a human-readable description (also in multiple, landuage-specific versions). Annotations may be provided in the Annotations element. References to dataflows and metadataflows may be provided. The Category element represents a set of nested categories which are child categories. The Category must have a unique ID within the Category Scheme provided in the id attribute. A version may also be supplied - if ommitted, the version is understood to be "1.0". The urn attribute holds a valid registry URN (see the SDMX Registry Specification).
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public CategoryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<DataflowRefType> DataflowRef {
            get {
                if ((this.DataflowRefField == null)) {
                    this.DataflowRefField = new XTypedList<DataflowRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DataflowRefField;
            }
            set {
                if ((value == null)) {
                    this.DataflowRefField = null;
                }
                else {
                    if ((this.DataflowRefField == null)) {
                        this.DataflowRefField = XTypedList<DataflowRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<DataflowRefType>(this.DataflowRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<MetadataflowRefType> MetadataflowRef {
            get {
                if ((this.MetadataflowRefField == null)) {
                    this.MetadataflowRefField = new XTypedList<MetadataflowRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.MetadataflowRefField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowRefField = null;
                }
                else {
                    if ((this.MetadataflowRefField == null)) {
                        this.MetadataflowRefField = XTypedList<MetadataflowRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<MetadataflowRefType>(this.MetadataflowRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<CategoryType> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.CategoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategoryType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategoryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CodelistsType contains one or more codelists. It also defines uniqueness constraints for codelist IDs.
    /// </para>
    /// <para>
    /// Regular expression: (CodeList*)
    /// </para>
    /// </summary>
    public partial class CodeListsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodeListType> CodeListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodeListsType(XElement xe) { return XTypedServices.ToXTypedElement<CodeListsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeListsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CodeList", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CodelistsType contains one or more codelists. It also defines uniqueness constraints for codelist IDs.
        /// </para>
        /// <para>
        /// Regular expression: (CodeList*)
        /// </para>
        /// </summary>
        public CodeListsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CodeList*)
        /// </para>
        /// </summary>
        public IList<CodeListType> CodeList {
            get {
                if ((this.CodeListField == null)) {
                    this.CodeListField = new XTypedList<CodeListType>(this, LinqToXsdTypeManager.Instance, XName.Get("CodeList", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CodeListField;
            }
            set {
                if ((value == null)) {
                    this.CodeListField = null;
                }
                else {
                    if ((this.CodeListField == null)) {
                        this.CodeListField = XTypedList<CodeListType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CodeList", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CodeListType>(this.CodeListField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodeListsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeListsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CodeList", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CodeListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CodeListType defines the contents of a codelist. This includes an ID, the agency which maintains the codelist, its version, and a URL where it is located. Elements are provided for supplying a name and the codes. It is acceptable to provide only the id, name, and uri fields at a minimum, with the uri pointing to an SDMX Structure message containing complete details on the codelist. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true". The urn attribute holds a valiud SDMX Registry URN (see SDMX Registry Specification). The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, Code*, Annotations?)
    /// </para>
    /// </summary>
    public partial class CodeListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodeType> CodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodeListType(XElement xe) { return XTypedServices.ToXTypedElement<CodeListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Code", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CodeListType defines the contents of a codelist. This includes an ID, the agency which maintains the codelist, its version, and a URL where it is located. Elements are provided for supplying a name and the codes. It is acceptable to provide only the id, name, and uri fields at a minimum, with the uri pointing to an SDMX Structure message containing complete details on the codelist. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true". The urn attribute holds a valiud SDMX Registry URN (see SDMX Registry Specification). The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Code*, Annotations?)
        /// </para>
        /// </summary>
        public CodeListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Code*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Code*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Code*, Annotations?)
        /// </para>
        /// </summary>
        public IList<CodeType> Code {
            get {
                if ((this.CodeField == null)) {
                    this.CodeField = new XTypedList<CodeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Code", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CodeField;
            }
            set {
                if ((value == null)) {
                    this.CodeField = null;
                }
                else {
                    if ((this.CodeField == null)) {
                        this.CodeField = XTypedList<CodeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Code", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CodeType>(this.CodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Code*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodeListType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Code", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CodeType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CodeType defines the structure of a code. This allows for plain-text descriptions as element content, and the coded value as the value attribute. (Short descriptions or other presentational information may be added using Annotations with an indicative type field [eg, "ShortDescription"]). The urn attribute supplies a valid SDMX Registry URN (see the SDMX Registry Specification).The parentCode attribute provides the ability to describe simple hierarchies within a single codelist, by referenceing the id value of another code in the same codelist.
    /// </para>
    /// <para>
    /// Regular expression: (Description+, Annotations?)
    /// </para>
    /// </summary>
    public partial class CodeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodeType(XElement xe) { return XTypedServices.ToXTypedElement<CodeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CodeType defines the structure of a code. This allows for plain-text descriptions as element content, and the coded value as the value attribute. (Short descriptions or other presentational information may be added using Annotations with an indicative type field [eg, "ShortDescription"]). The urn attribute supplies a valid SDMX Registry URN (see the SDMX Registry Specification).The parentCode attribute provides the ability to describe simple hierarchies within a single codelist, by referenceing the id value of another code in the same codelist.
        /// </para>
        /// <para>
        /// Regular expression: (Description+, Annotations?)
        /// </para>
        /// </summary>
        public CodeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Description+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description+, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string value {
            get {
                XAttribute x = this.Attribute(XName.Get("value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XAttribute x = this.Attribute(XName.Get("parentCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("parentCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// HierarchicalCodelistsType contains one or more sets of structural information about the hierarchies within a codelist (hierarchical codelists). This corresponds to complex hierarchical codelists within the SDMX Information Model - very simple hierarchies can be described within the regular Codelist, using the parentCode attribute. 
    /// </para>
    /// <para>
    /// Regular expression: (HierarchicalCodelist+)
    /// </para>
    /// </summary>
    public partial class HierarchicalCodelistsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HierarchicalCodelistType> HierarchicalCodelistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HierarchicalCodelistsType(XElement xe) { return XTypedServices.ToXTypedElement<HierarchicalCodelistsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HierarchicalCodelistsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("HierarchicalCodelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// HierarchicalCodelistsType contains one or more sets of structural information about the hierarchies within a codelist (hierarchical codelists). This corresponds to complex hierarchical codelists within the SDMX Information Model - very simple hierarchies can be described within the regular Codelist, using the parentCode attribute. 
        /// </para>
        /// <para>
        /// Regular expression: (HierarchicalCodelist+)
        /// </para>
        /// </summary>
        public HierarchicalCodelistsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (HierarchicalCodelist+)
        /// </para>
        /// </summary>
        public IList<HierarchicalCodelistType> HierarchicalCodelist {
            get {
                if ((this.HierarchicalCodelistField == null)) {
                    this.HierarchicalCodelistField = new XTypedList<HierarchicalCodelistType>(this, LinqToXsdTypeManager.Instance, XName.Get("HierarchicalCodelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.HierarchicalCodelistField;
            }
            set {
                if ((value == null)) {
                    this.HierarchicalCodelistField = null;
                }
                else {
                    if ((this.HierarchicalCodelistField == null)) {
                        this.HierarchicalCodelistField = XTypedList<HierarchicalCodelistType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HierarchicalCodelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<HierarchicalCodelistType>(this.HierarchicalCodelistField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HierarchicalCodelistsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HierarchicalCodelistsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("HierarchicalCodelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(HierarchicalCodelistType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A hierarchical codelist references a Codelist, and supplies the extra structural metadata to assemble the codes into a hierarchy. A human-readable name must be supplied, and multiple language-specific variants may be provided. A longer human-readable description may be provided, and may also be presented as a set of language-specific variants. The CodelistRef element references a codelist, and may indicate more than one. Annotations may be provided in the Annotaions element. An ID unique for the agency specified in the agency attribute must be assigned, using the id attribute. A version may be provided using the version attribute - if no value is provided, it is assumed to be "1.0". A valid SDMX Registry URN may be provided in the urn attribute, as specified in the SDMX Registry Specification. If the isExternalReference attribute has a value of true, the uri attribute must specify the location of a valid SDMX Structure Message which provides the full details of the hierarchical codelist; otherwise, all details must be present. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, CodelistRef*, Hierarchy*, Annotations?)
    /// </para>
    /// </summary>
    public partial class HierarchicalCodelistType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistRefType> CodelistRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HierarchyType> HierarchyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HierarchicalCodelistType(XElement xe) { return XTypedServices.ToXTypedElement<HierarchicalCodelistType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HierarchicalCodelistType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Hierarchy", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// A hierarchical codelist references a Codelist, and supplies the extra structural metadata to assemble the codes into a hierarchy. A human-readable name must be supplied, and multiple language-specific variants may be provided. A longer human-readable description may be provided, and may also be presented as a set of language-specific variants. The CodelistRef element references a codelist, and may indicate more than one. Annotations may be provided in the Annotaions element. An ID unique for the agency specified in the agency attribute must be assigned, using the id attribute. A version may be provided using the version attribute - if no value is provided, it is assumed to be "1.0". A valid SDMX Registry URN may be provided in the urn attribute, as specified in the SDMX Registry Specification. If the isExternalReference attribute has a value of true, the uri attribute must specify the location of a valid SDMX Structure Message which provides the full details of the hierarchical codelist; otherwise, all details must be present. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodelistRef*, Hierarchy*, Annotations?)
        /// </para>
        /// </summary>
        public HierarchicalCodelistType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodelistRef*, Hierarchy*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodelistRef*, Hierarchy*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodelistRef*, Hierarchy*, Annotations?)
        /// </para>
        /// </summary>
        public IList<CodelistRefType> CodelistRef {
            get {
                if ((this.CodelistRefField == null)) {
                    this.CodelistRefField = new XTypedList<CodelistRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CodelistRefField;
            }
            set {
                if ((value == null)) {
                    this.CodelistRefField = null;
                }
                else {
                    if ((this.CodelistRefField == null)) {
                        this.CodelistRefField = XTypedList<CodelistRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CodelistRefType>(this.CodelistRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodelistRef*, Hierarchy*, Annotations?)
        /// </para>
        /// </summary>
        public IList<HierarchyType> Hierarchy {
            get {
                if ((this.HierarchyField == null)) {
                    this.HierarchyField = new XTypedList<HierarchyType>(this, LinqToXsdTypeManager.Instance, XName.Get("Hierarchy", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.HierarchyField;
            }
            set {
                if ((value == null)) {
                    this.HierarchyField = null;
                }
                else {
                    if ((this.HierarchyField == null)) {
                        this.HierarchyField = XTypedList<HierarchyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Hierarchy", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<HierarchyType>(this.HierarchyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodelistRef*, Hierarchy*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HierarchicalCodelistType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HierarchicalCodelistType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CodelistRefType));
            localElementDictionary.Add(XName.Get("Hierarchy", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(HierarchyType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The recursive CodeRef element is used to assemble the codes in the codelist(s) referenced by the parent hierarchical codelist into a hierarchy. The Level element is used to describe the levels of a levelled hierarchy, which may be referenced from each of the CodeRefs in the Hierarchy. A human-readable name must be assigned, which may be provided in multiple, parallel-language versions. A longer, human-readable Description may also be provided, which can also have multiple parallel-language versions. Annotations may be provided with the Annotations element. The id attribute provides a unique id for the hierarchy. The urn attribute can be used to specify the hierarchy with a valid SDMX Registry URN (see the SDMX Registry Specification). The version attribute specifies a version (understood to be "1.0" if not specified), and isFinal, once given a value of true, indicates that nothing may be changed without also changing the version number. validFrom and validTo are inclusive dates indicating the relevant period of the hierarchy.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, CodeRef*, Level*, Annotations?)
    /// </para>
    /// </summary>
    public partial class HierarchyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodeRefType> CodeRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LevelType> LevelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HierarchyType(XElement xe) { return XTypedServices.ToXTypedElement<HierarchyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HierarchyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Level", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// The recursive CodeRef element is used to assemble the codes in the codelist(s) referenced by the parent hierarchical codelist into a hierarchy. The Level element is used to describe the levels of a levelled hierarchy, which may be referenced from each of the CodeRefs in the Hierarchy. A human-readable name must be assigned, which may be provided in multiple, parallel-language versions. A longer, human-readable Description may also be provided, which can also have multiple parallel-language versions. Annotations may be provided with the Annotations element. The id attribute provides a unique id for the hierarchy. The urn attribute can be used to specify the hierarchy with a valid SDMX Registry URN (see the SDMX Registry Specification). The version attribute specifies a version (understood to be "1.0" if not specified), and isFinal, once given a value of true, indicates that nothing may be changed without also changing the version number. validFrom and validTo are inclusive dates indicating the relevant period of the hierarchy.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodeRef*, Level*, Annotations?)
        /// </para>
        /// </summary>
        public HierarchyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodeRef*, Level*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodeRef*, Level*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodeRef*, Level*, Annotations?)
        /// </para>
        /// </summary>
        public IList<CodeRefType> CodeRef {
            get {
                if ((this.CodeRefField == null)) {
                    this.CodeRefField = new XTypedList<CodeRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("CodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CodeRefField;
            }
            set {
                if ((value == null)) {
                    this.CodeRefField = null;
                }
                else {
                    if ((this.CodeRefField == null)) {
                        this.CodeRefField = XTypedList<CodeRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CodeRefType>(this.CodeRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodeRef*, Level*, Annotations?)
        /// </para>
        /// </summary>
        public IList<LevelType> Level {
            get {
                if ((this.LevelField == null)) {
                    this.LevelField = new XTypedList<LevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("Level", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.LevelField;
            }
            set {
                if ((value == null)) {
                    this.LevelField = null;
                }
                else {
                    if ((this.LevelField == null)) {
                        this.LevelField = XTypedList<LevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Level", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<LevelType>(this.LevelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CodeRef*, Level*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HierarchyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HierarchyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("CodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CodeRefType));
            localElementDictionary.Add(XName.Get("Level", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(LevelType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// LevelType describes a level in a hierarchical codelist. The Order element specifies where the level is in a levelled hierarchy, starting with the value "1" for the top level, and going sequentially from there using whole integers. CodingType specifies the text formatting of the codes at that level. A human-readable name must be assigned, which may be provided in multiple, parallel-language versions. A longer, human-readable Description may also be provided, which can also have multiple parallel-language versions. Annotations may be provided with the Annotations element. The id attribute provides a unique id for the hierarchy. The urn attribute can be used to specify the hierarchy with a valid SDMX Registry URN (see the SDMX Registry Specification).
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, Order, CodingType?, Annotations?)
    /// </para>
    /// </summary>
    public partial class LevelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator LevelType(XElement xe) { return XTypedServices.ToXTypedElement<LevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Order", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CodingType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// LevelType describes a level in a hierarchical codelist. The Order element specifies where the level is in a levelled hierarchy, starting with the value "1" for the top level, and going sequentially from there using whole integers. CodingType specifies the text formatting of the codes at that level. A human-readable name must be assigned, which may be provided in multiple, parallel-language versions. A longer, human-readable Description may also be provided, which can also have multiple parallel-language versions. Annotations may be provided with the Annotations element. The id attribute provides a unique id for the hierarchy. The urn attribute can be used to specify the hierarchy with a valid SDMX Registry URN (see the SDMX Registry Specification).
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Order, CodingType?, Annotations?)
        /// </para>
        /// </summary>
        public LevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Order, CodingType?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Order, CodingType?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Order, CodingType?, Annotations?)
        /// </para>
        /// </summary>
        public decimal Order {
            get {
                XElement x = this.GetElement(XName.Get("Order", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(XName.Get("Order", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Order, CodingType?, Annotations?)
        /// </para>
        /// </summary>
        public TextFormatType CodingType {
            get {
                XElement x = this.GetElement(XName.Get("CodingType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("CodingType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Order, CodingType?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LevelType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Order", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(decimal));
            localElementDictionary.Add(XName.Get("CodingType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The CodelistRefType provides the structure for a codelist reference. (Note that this is structured differently than a similarly-named type in the Registry namespace.) At a minimum, either: AgencyID has the ID of an agency as a value; CodelistID takes the ID of a codelist maintained by that agency; and Version specifies the version of the codelist; or URN supplies a valid SDMX Registry URN (see the SDMX Registry Specification). Alias is used to carry the identifier for the referenced codelist, so that codes from that list can be easily referenced by the CodeRefs contained in the parent Hierarchy, without having to repeat the agency and version for each reference. The Alias must be unique within the parent Hierarchical Codelist.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?, Alias?)
    /// </para>
    /// </summary>
    public partial class CodelistRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodelistRefType(XElement xe) { return XTypedServices.ToXTypedElement<CodelistRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodelistRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Alias", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// The CodelistRefType provides the structure for a codelist reference. (Note that this is structured differently than a similarly-named type in the Registry namespace.) At a minimum, either: AgencyID has the ID of an agency as a value; CodelistID takes the ID of a codelist maintained by that agency; and Version specifies the version of the codelist; or URN supplies a valid SDMX Registry URN (see the SDMX Registry Specification). Alias is used to carry the identifier for the referenced codelist, so that codes from that list can be easily referenced by the CodeRefs contained in the parent Hierarchy, without having to repeat the agency and version for each reference. The Alias must be unique within the parent Hierarchical Codelist.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?, Alias?)
        /// </para>
        /// </summary>
        public CodelistRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?, Alias?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?, Alias?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?, Alias?)
        /// </para>
        /// </summary>
        public string CodelistID {
            get {
                XElement x = this.GetElement(XName.Get("CodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "CodelistID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?, Alias?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?, Alias?)
        /// </para>
        /// </summary>
        public string Alias {
            get {
                XElement x = this.GetElement(XName.Get("Alias", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Alias", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "Alias", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodelistRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodelistRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("CodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Alias", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The CodeRefType provides the structure for a codelist reference. At a minimum, either a URN value (a valid SDMX Registry URN as specified in teh SDMX Registry Specification) must be supplied, or a ColdelistAliasRef and a CodeID must be specified. CodelistAliasRef references an alias assigned in a CodelistRef element in the containing hierarchical codelist.CodeRef references a code from the codelist identified at the level of the parent hierarchical codelist. Codes are arranged in a hierarchy by reference. Note that it is possible to reference a single code such that it has multiple parents within the hierarchy. Further, the hierarchy may or may not be a levelled one. CodeID holds the ID of the code in the codelist referenced by the hierarchical codelist. CodeRef references a code. LevelRef holds the id of a Level described in the same parent Hierarchical Codelist. NodeAliasID allows for an ID to be assigned to the use of the particular code at that specific point in the hierarchy. This value is unique within the hierarchy being created, and is used to map the hierarchy against external structures. Version holds the version number of the referenced code, to support management of complex hierarchies. Along with this field are the ValidFrom and ValidTo dates, which are inclusive dates during which the code is valid within the parent hierarchy.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
    /// </para>
    /// </summary>
    public partial class CodeRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodeRefType> CodeRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodeRefType(XElement xe) { return XTypedServices.ToXTypedElement<CodeRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CodelistAliasRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CodeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("LevelRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("NodeAliasID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ValidFrom", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ValidTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// The CodeRefType provides the structure for a codelist reference. At a minimum, either a URN value (a valid SDMX Registry URN as specified in teh SDMX Registry Specification) must be supplied, or a ColdelistAliasRef and a CodeID must be specified. CodelistAliasRef references an alias assigned in a CodelistRef element in the containing hierarchical codelist.CodeRef references a code from the codelist identified at the level of the parent hierarchical codelist. Codes are arranged in a hierarchy by reference. Note that it is possible to reference a single code such that it has multiple parents within the hierarchy. Further, the hierarchy may or may not be a levelled one. CodeID holds the ID of the code in the codelist referenced by the hierarchical codelist. CodeRef references a code. LevelRef holds the id of a Level described in the same parent Hierarchical Codelist. NodeAliasID allows for an ID to be assigned to the use of the particular code at that specific point in the hierarchy. This value is unique within the hierarchy being created, and is used to map the hierarchy against external structures. Version holds the version number of the referenced code, to support management of complex hierarchies. Along with this field are the ValidFrom and ValidTo dates, which are inclusive dates during which the code is valid within the parent hierarchy.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
        /// </para>
        /// </summary>
        public CodeRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
        /// </para>
        /// </summary>
        public string CodelistAliasRef {
            get {
                XElement x = this.GetElement(XName.Get("CodelistAliasRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CodelistAliasRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "CodelistAliasRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
        /// </para>
        /// </summary>
        public string CodeID {
            get {
                XElement x = this.GetElement(XName.Get("CodeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CodeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "CodeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
        /// </para>
        /// </summary>
        public IList<CodeRefType> CodeRef {
            get {
                if ((this.CodeRefField == null)) {
                    this.CodeRefField = new XTypedList<CodeRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("CodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CodeRefField;
            }
            set {
                if ((value == null)) {
                    this.CodeRefField = null;
                }
                else {
                    if ((this.CodeRefField == null)) {
                        this.CodeRefField = XTypedList<CodeRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CodeRefType>(this.CodeRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
        /// </para>
        /// </summary>
        public string LevelRef {
            get {
                XElement x = this.GetElement(XName.Get("LevelRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LevelRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "LevelRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
        /// </para>
        /// </summary>
        public string NodeAliasID {
            get {
                XElement x = this.GetElement(XName.Get("NodeAliasID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("NodeAliasID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
        /// </para>
        /// </summary>
        public object ValidFrom {
            get {
                XElement x = this.GetElement(XName.Get("ValidFrom", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("ValidFrom", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "ValidFrom", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, CodelistAliasRef?, CodeID?, CodeRef*, LevelRef?, NodeAliasID?, Version?, ValidFrom?, ValidTo?)
        /// </para>
        /// </summary>
        public object ValidTo {
            get {
                XElement x = this.GetElement(XName.Get("ValidTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("ValidTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "ValidTo", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("CodelistAliasRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("CodeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("CodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CodeRefType));
            localElementDictionary.Add(XName.Get("LevelRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("NodeAliasID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("ValidFrom", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(object));
            localElementDictionary.Add(XName.Get("ValidTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(object));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The ConceptsType describes an XML type which contains information about sets of concepts and their relationships, each of which is described in a ConceptScheme element. This section replaces the section of the version 1.0 SDMXStructure message which provides details about concepts. As such, it is backward-compatible, and may be used to contain a simple list of concepts as per the 1.0 SDMX-ML specification.
    /// </para>
    /// <para>
    /// Regular expression: (Concept*, ConceptScheme*, Annotations?)
    /// </para>
    /// </summary>
    public partial class ConceptsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConceptType> ConceptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConceptSchemeType> ConceptSchemeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptsType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ConceptScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// The ConceptsType describes an XML type which contains information about sets of concepts and their relationships, each of which is described in a ConceptScheme element. This section replaces the section of the version 1.0 SDMXStructure message which provides details about concepts. As such, it is backward-compatible, and may be used to contain a simple list of concepts as per the 1.0 SDMX-ML specification.
        /// </para>
        /// <para>
        /// Regular expression: (Concept*, ConceptScheme*, Annotations?)
        /// </para>
        /// </summary>
        public ConceptsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Concept*, ConceptScheme*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ConceptType> Concept {
            get {
                if ((this.ConceptField == null)) {
                    this.ConceptField = new XTypedList<ConceptType>(this, LinqToXsdTypeManager.Instance, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ConceptField;
            }
            set {
                if ((value == null)) {
                    this.ConceptField = null;
                }
                else {
                    if ((this.ConceptField == null)) {
                        this.ConceptField = XTypedList<ConceptType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ConceptType>(this.ConceptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Concept*, ConceptScheme*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ConceptSchemeType> ConceptScheme {
            get {
                if ((this.ConceptSchemeField == null)) {
                    this.ConceptSchemeField = new XTypedList<ConceptSchemeType>(this, LinqToXsdTypeManager.Instance, XName.Get("ConceptScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ConceptSchemeField;
            }
            set {
                if ((value == null)) {
                    this.ConceptSchemeField = null;
                }
                else {
                    if ((this.ConceptSchemeField == null)) {
                        this.ConceptSchemeField = XTypedList<ConceptSchemeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ConceptScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ConceptSchemeType>(this.ConceptSchemeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Concept*, ConceptScheme*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ConceptType));
            localElementDictionary.Add(XName.Get("ConceptScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ConceptSchemeType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ConceptType specifies the information provided for a single concept. This includes a name, as element content, and an ID. It is possible to use the uri field to point to the location of an SDMX-ML Structure message which contains a more detailed version of the concept. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true". In this case, all details of the concept are assumed to be found externally, and inline characteristics provided through child elements and the coreRepresentation and coreRepresentationAgency attributes are to be ignored. The coreRepresentation and coreRepresentationAgency attributes can identify a codelist which is a default representation of the concept. Uncoded default representations (or information about the textual aspects of coded default representations) can be provided with the TextFormat child element of the concept. Semantic relationships between concepts which occur within a single concept scheme can be captured with the parent and parentAgency attributes - these identify the concept of which the current concept is a qualification (in the ISO 11179 sense) or subclass. When used outside of a containing ConceptScheme, these attributes may be ignored. If a coreRepresentation and core RepresentationAgency are not provided, but are provided in the indicated parent, then the default representation is inherited from the specified parent concept. Note that all concepts within a concept scheme must be uniquely identified by their id - each concept scheme has only one agency for all its concepts. The agency attribute here is provided for backward-compatibility with version 1.0 of the standards, and it must not be used for concepts which are child elements of a concept scheme.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class ConceptType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ConceptType specifies the information provided for a single concept. This includes a name, as element content, and an ID. It is possible to use the uri field to point to the location of an SDMX-ML Structure message which contains a more detailed version of the concept. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true". In this case, all details of the concept are assumed to be found externally, and inline characteristics provided through child elements and the coreRepresentation and coreRepresentationAgency attributes are to be ignored. The coreRepresentation and coreRepresentationAgency attributes can identify a codelist which is a default representation of the concept. Uncoded default representations (or information about the textual aspects of coded default representations) can be provided with the TextFormat child element of the concept. Semantic relationships between concepts which occur within a single concept scheme can be captured with the parent and parentAgency attributes - these identify the concept of which the current concept is a qualification (in the ISO 11179 sense) or subclass. When used outside of a containing ConceptScheme, these attributes may be ignored. If a coreRepresentation and core RepresentationAgency are not provided, but are provided in the indicated parent, then the default representation is inherited from the specified parent concept. Note that all concepts within a concept scheme must be uniquely identified by their id - each concept scheme has only one agency for all its concepts. The agency attribute here is provided for backward-compatibility with version 1.0 of the standards, and it must not be used for concepts which are child elements of a concept scheme.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public ConceptType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public TextFormatType TextFormat {
            get {
                XElement x = this.GetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string coreRepresentation {
            get {
                XAttribute x = this.Attribute(XName.Get("coreRepresentation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("coreRepresentation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string coreRepresentationAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("coreRepresentationAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("coreRepresentationAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string parent {
            get {
                XAttribute x = this.Attribute(XName.Get("parent", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("parent", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string parentAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("parentAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("parentAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ConceptSchemeType describes the structure of a ConceptScheme element, which is the preferred form (as of version 2.0) of presenting the concepts used in other SDMX constructs. ConceptSchemes may be included inline (that is, with all details provided in the instance or may be referenced externally. It is possible to use the uri field to point to the location of an SDMX-ML Structure message which contains a more detailed version of the concept. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true". A Name may be provided as a child element (in multiple parallel language versions) and an ID and version and agency information may be provided. ConceptSchemes represent a collection of concepts which are used to describe a meaningful set of distinct concepts, to be used in the reporting of data or metadata. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, Concept*, Annotations?)
    /// </para>
    /// </summary>
    public partial class ConceptSchemeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConceptType> ConceptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptSchemeType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptSchemeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptSchemeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ConceptSchemeType describes the structure of a ConceptScheme element, which is the preferred form (as of version 2.0) of presenting the concepts used in other SDMX constructs. ConceptSchemes may be included inline (that is, with all details provided in the instance or may be referenced externally. It is possible to use the uri field to point to the location of an SDMX-ML Structure message which contains a more detailed version of the concept. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true". A Name may be provided as a child element (in multiple parallel language versions) and an ID and version and agency information may be provided. ConceptSchemes represent a collection of concepts which are used to describe a meaningful set of distinct concepts, to be used in the reporting of data or metadata. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Concept*, Annotations?)
        /// </para>
        /// </summary>
        public ConceptSchemeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Concept*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Concept*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Concept*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ConceptType> Concept {
            get {
                if ((this.ConceptField == null)) {
                    this.ConceptField = new XTypedList<ConceptType>(this, LinqToXsdTypeManager.Instance, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ConceptField;
            }
            set {
                if ((value == null)) {
                    this.ConceptField = null;
                }
                else {
                    if ((this.ConceptField == null)) {
                        this.ConceptField = XTypedList<ConceptType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ConceptType>(this.ConceptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Concept*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptSchemeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptSchemeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ConceptType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MetadataStructureDefinitionsType describes one or more metadata structure definitions.
    /// </para>
    /// <para>
    /// Regular expression: (MetadataStructureDefinition+)
    /// </para>
    /// </summary>
    public partial class MetadataStructureDefinitionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataStructureDefinitionType> MetadataStructureDefinitionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataStructureDefinitionsType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataStructureDefinitionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataStructureDefinitionsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MetadataStructureDefinition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// MetadataStructureDefinitionsType describes one or more metadata structure definitions.
        /// </para>
        /// <para>
        /// Regular expression: (MetadataStructureDefinition+)
        /// </para>
        /// </summary>
        public MetadataStructureDefinitionsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MetadataStructureDefinition+)
        /// </para>
        /// </summary>
        public IList<MetadataStructureDefinitionType> MetadataStructureDefinition {
            get {
                if ((this.MetadataStructureDefinitionField == null)) {
                    this.MetadataStructureDefinitionField = new XTypedList<MetadataStructureDefinitionType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataStructureDefinition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.MetadataStructureDefinitionField;
            }
            set {
                if ((value == null)) {
                    this.MetadataStructureDefinitionField = null;
                }
                else {
                    if ((this.MetadataStructureDefinitionField == null)) {
                        this.MetadataStructureDefinitionField = XTypedList<MetadataStructureDefinitionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataStructureDefinition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<MetadataStructureDefinitionType>(this.MetadataStructureDefinitionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataStructureDefinitionsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataStructureDefinitionsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MetadataStructureDefinition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataStructureDefinitionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A metadata structure definition performs several functions: it groups sets of objects into "targets" against which reference metadata may be reported. Targets define the structure of the reference metadata "keys" which identify specific types of reported metadata, and describe the valid values for populating the keys. Also, metadata structure definitions provide a presentational organization of concepts for reporting purposes. The structure of a reference metadata report is derived from this presentational structure. Also, representations - unless defaults from the concepts are used - must be indicated as part of this presentational structure. Attributes allow the assignment of an ID, an agency, a version, and a uri. It is possible to use the uri field to point to the location of an SDMX-ML Structure message which contains a more detailed version of the metadata structure definition. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true". When an external reference is being made, none of the child elements should be included. Otherwise, both TargetIdentifiers and at least one ReportStructure must be included. The urn attribute holds a valid SDMX registry URN (see the SDMX Registry Specification). The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, TargetIdentifiers?, ReportStructure*, Annotations?)
    /// </para>
    /// </summary>
    public partial class MetadataStructureDefinitionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReportStructureType> ReportStructureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataStructureDefinitionType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataStructureDefinitionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataStructureDefinitionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TargetIdentifiers", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ReportStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// A metadata structure definition performs several functions: it groups sets of objects into "targets" against which reference metadata may be reported. Targets define the structure of the reference metadata "keys" which identify specific types of reported metadata, and describe the valid values for populating the keys. Also, metadata structure definitions provide a presentational organization of concepts for reporting purposes. The structure of a reference metadata report is derived from this presentational structure. Also, representations - unless defaults from the concepts are used - must be indicated as part of this presentational structure. Attributes allow the assignment of an ID, an agency, a version, and a uri. It is possible to use the uri field to point to the location of an SDMX-ML Structure message which contains a more detailed version of the metadata structure definition. (This is termed an "external reference".) If an external reference is being made, the isExternalReference attribute must be set to "true". When an external reference is being made, none of the child elements should be included. Otherwise, both TargetIdentifiers and at least one ReportStructure must be included. The urn attribute holds a valid SDMX registry URN (see the SDMX Registry Specification). The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetIdentifiers?, ReportStructure*, Annotations?)
        /// </para>
        /// </summary>
        public MetadataStructureDefinitionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetIdentifiers?, ReportStructure*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetIdentifiers?, ReportStructure*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetIdentifiers?, ReportStructure*, Annotations?)
        /// </para>
        /// </summary>
        public TargetIdentifiersType TargetIdentifiers {
            get {
                XElement x = this.GetElement(XName.Get("TargetIdentifiers", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TargetIdentifiersType)(x));
            }
            set {
                this.SetElement(XName.Get("TargetIdentifiers", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetIdentifiers?, ReportStructure*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ReportStructureType> ReportStructure {
            get {
                if ((this.ReportStructureField == null)) {
                    this.ReportStructureField = new XTypedList<ReportStructureType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReportStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ReportStructureField;
            }
            set {
                if ((value == null)) {
                    this.ReportStructureField = null;
                }
                else {
                    if ((this.ReportStructureField == null)) {
                        this.ReportStructureField = XTypedList<ReportStructureType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReportStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ReportStructureType>(this.ReportStructureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetIdentifiers?, ReportStructure*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataStructureDefinitionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataStructureDefinitionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("TargetIdentifiers", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TargetIdentifiersType));
            localElementDictionary.Add(XName.Get("ReportStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ReportStructureType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TargetIdentifiers are the set of objects against which reference metadata is reported (data providers, data flows, data or metadata structures, etc.). There are two types of TargetIdentifiers: the "full" target identifier, which lists every object used to attach metadata to in the metadata structure definition, and the partial target identifiers, which indicate sub-sets of those concepts against which reference metadata may be reported. It is sometimes the case that metadata will also be reported against the full target identifier. 
    ///			
    ///			An example of this is as follows: we might wish to collect some metadata concepts such as contact information for some of the objects described by the SDMX Information Model - for each instance of a metadata flow or a data provider, for example. Our concepts would be the concepts associated with contact information: CONTACT_NAME, CONTACT_PHONE_NUMBER, etc. We would determine how these concepts are associated with the objects in the model: do we want a contact for each data provider broken out by data flow? Or do we want only a single contact reported for each data provider (who might provide several data flows)? Each object or combination of objects we need to have metadata reported for becomes a partial target identifier, unless it happens to contain the full target identifier, in which case we use that instead. Thus, our valid partial target identifiers here would be "data flow" and "data provider", because "data flow by data provider" is a full target identifier. For each target identifier, we could have some set of our concepts reported.
    /// </para>
    /// <para>
    /// Regular expression: (FullTargetIdentifier, PartialTargetIdentifier*, Annotations?)
    /// </para>
    /// </summary>
    public partial class TargetIdentifiersType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PartialTargetIdentifierType> PartialTargetIdentifierField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TargetIdentifiersType(XElement xe) { return XTypedServices.ToXTypedElement<TargetIdentifiersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TargetIdentifiersType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FullTargetIdentifier", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("PartialTargetIdentifier", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// TargetIdentifiers are the set of objects against which reference metadata is reported (data providers, data flows, data or metadata structures, etc.). There are two types of TargetIdentifiers: the "full" target identifier, which lists every object used to attach metadata to in the metadata structure definition, and the partial target identifiers, which indicate sub-sets of those concepts against which reference metadata may be reported. It is sometimes the case that metadata will also be reported against the full target identifier. 
        ///			
        ///			An example of this is as follows: we might wish to collect some metadata concepts such as contact information for some of the objects described by the SDMX Information Model - for each instance of a metadata flow or a data provider, for example. Our concepts would be the concepts associated with contact information: CONTACT_NAME, CONTACT_PHONE_NUMBER, etc. We would determine how these concepts are associated with the objects in the model: do we want a contact for each data provider broken out by data flow? Or do we want only a single contact reported for each data provider (who might provide several data flows)? Each object or combination of objects we need to have metadata reported for becomes a partial target identifier, unless it happens to contain the full target identifier, in which case we use that instead. Thus, our valid partial target identifiers here would be "data flow" and "data provider", because "data flow by data provider" is a full target identifier. For each target identifier, we could have some set of our concepts reported.
        /// </para>
        /// <para>
        /// Regular expression: (FullTargetIdentifier, PartialTargetIdentifier*, Annotations?)
        /// </para>
        /// </summary>
        public TargetIdentifiersType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FullTargetIdentifier, PartialTargetIdentifier*, Annotations?)
        /// </para>
        /// </summary>
        public FullTargetIdentifierType FullTargetIdentifier {
            get {
                XElement x = this.GetElement(XName.Get("FullTargetIdentifier", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((FullTargetIdentifierType)(x));
            }
            set {
                this.SetElement(XName.Get("FullTargetIdentifier", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FullTargetIdentifier, PartialTargetIdentifier*, Annotations?)
        /// </para>
        /// </summary>
        public IList<PartialTargetIdentifierType> PartialTargetIdentifier {
            get {
                if ((this.PartialTargetIdentifierField == null)) {
                    this.PartialTargetIdentifierField = new XTypedList<PartialTargetIdentifierType>(this, LinqToXsdTypeManager.Instance, XName.Get("PartialTargetIdentifier", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.PartialTargetIdentifierField;
            }
            set {
                if ((value == null)) {
                    this.PartialTargetIdentifierField = null;
                }
                else {
                    if ((this.PartialTargetIdentifierField == null)) {
                        this.PartialTargetIdentifierField = XTypedList<PartialTargetIdentifierType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PartialTargetIdentifier", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<PartialTargetIdentifierType>(this.PartialTargetIdentifierField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FullTargetIdentifier, PartialTargetIdentifier*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TargetIdentifiersType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TargetIdentifiersType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FullTargetIdentifier", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(FullTargetIdentifierType));
            localElementDictionary.Add(XName.Get("PartialTargetIdentifier", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(PartialTargetIdentifierType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The full target identifier provides details on all of the objects against which metadata can be reported. The full target identifier is made up of a set of identifier components - each getting its own child element - which are similar to the dimensions of a key family: each one indicates that a value will be provided by the metadata reporter to identify and describe the metadata being reported. A human-readable name must be provided, which may be provided in multiple, parallel-language versions. A longer, human-readable name may also be provided in multiple, language-parallel versions. Annotations may be provided.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, IdentifierComponent*, Annotations?)
    /// </para>
    /// </summary>
    public partial class FullTargetIdentifierType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IdentifierComponentType> IdentifierComponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FullTargetIdentifierType(XElement xe) { return XTypedServices.ToXTypedElement<FullTargetIdentifierType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FullTargetIdentifierType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("IdentifierComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// The full target identifier provides details on all of the objects against which metadata can be reported. The full target identifier is made up of a set of identifier components - each getting its own child element - which are similar to the dimensions of a key family: each one indicates that a value will be provided by the metadata reporter to identify and describe the metadata being reported. A human-readable name must be provided, which may be provided in multiple, parallel-language versions. A longer, human-readable name may also be provided in multiple, language-parallel versions. Annotations may be provided.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, IdentifierComponent*, Annotations?)
        /// </para>
        /// </summary>
        public FullTargetIdentifierType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, IdentifierComponent*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, IdentifierComponent*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, IdentifierComponent*, Annotations?)
        /// </para>
        /// </summary>
        public IList<IdentifierComponentType> IdentifierComponent {
            get {
                if ((this.IdentifierComponentField == null)) {
                    this.IdentifierComponentField = new XTypedList<IdentifierComponentType>(this, LinqToXsdTypeManager.Instance, XName.Get("IdentifierComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.IdentifierComponentField;
            }
            set {
                if ((value == null)) {
                    this.IdentifierComponentField = null;
                }
                else {
                    if ((this.IdentifierComponentField == null)) {
                        this.IdentifierComponentField = XTypedList<IdentifierComponentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IdentifierComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<IdentifierComponentType>(this.IdentifierComponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, IdentifierComponent*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FullTargetIdentifierType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FullTargetIdentifierType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("IdentifierComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(IdentifierComponentType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// An identifier component describes the use of an object within the full target identifier set. An identifier component must be one of the formally-recognized object classes found in the SDMX Information Model: the sub-element TargetObjectClass provides a way of indicating which objects will be used in reporting metadata, and will indicate how those objects are to be identified by the metadata reporters (which value sets will be allowed for each identification field for each object). The RepresentationScheme child element is used to indicate the valid range of values for the providing taget identifiers in reported metadata.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, TargetObjectClass, RepresentationScheme?, Annotations?)
    /// </para>
    /// </summary>
    public partial class IdentifierComponentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator IdentifierComponentType(XElement xe) { return XTypedServices.ToXTypedElement<IdentifierComponentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IdentifierComponentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TargetObjectClass", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("RepresentationScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// An identifier component describes the use of an object within the full target identifier set. An identifier component must be one of the formally-recognized object classes found in the SDMX Information Model: the sub-element TargetObjectClass provides a way of indicating which objects will be used in reporting metadata, and will indicate how those objects are to be identified by the metadata reporters (which value sets will be allowed for each identification field for each object). The RepresentationScheme child element is used to indicate the valid range of values for the providing taget identifiers in reported metadata.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetObjectClass, RepresentationScheme?, Annotations?)
        /// </para>
        /// </summary>
        public IdentifierComponentType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetObjectClass, RepresentationScheme?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetObjectClass, RepresentationScheme?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetObjectClass, RepresentationScheme?, Annotations?)
        /// </para>
        /// </summary>
        public string TargetObjectClass {
            get {
                XElement x = this.GetElement(XName.Get("TargetObjectClass", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TargetObjectClass", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "TargetObjectClass", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ObjectIDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetObjectClass, RepresentationScheme?, Annotations?)
        /// </para>
        /// </summary>
        public RepresentationSchemeType RepresentationScheme {
            get {
                XElement x = this.GetElement(XName.Get("RepresentationScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((RepresentationSchemeType)(x));
            }
            set {
                this.SetElement(XName.Get("RepresentationScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, TargetObjectClass, RepresentationScheme?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("IdentifierComponentType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IdentifierComponentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("TargetObjectClass", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("RepresentationScheme", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(RepresentationSchemeType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Partial target identifiers are subsets of the full target identifier. They are themselves given an identifier, so that they can be referenced by the metadata attributes of a report. A human-readable name must be provided, which may be provided in multiple, parallel-language versions. A longer, human-readable name may also be provided in multiple, language-parallel versions. Annotations may be provided.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, IdentifierComponentRef*, Annotations?)
    /// </para>
    /// </summary>
    public partial class PartialTargetIdentifierType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> IdentifierComponentRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PartialTargetIdentifierType(XElement xe) { return XTypedServices.ToXTypedElement<PartialTargetIdentifierType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PartialTargetIdentifierType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("IdentifierComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// Partial target identifiers are subsets of the full target identifier. They are themselves given an identifier, so that they can be referenced by the metadata attributes of a report. A human-readable name must be provided, which may be provided in multiple, parallel-language versions. A longer, human-readable name may also be provided in multiple, language-parallel versions. Annotations may be provided.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, IdentifierComponentRef*, Annotations?)
        /// </para>
        /// </summary>
        public PartialTargetIdentifierType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, IdentifierComponentRef*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, IdentifierComponentRef*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, IdentifierComponentRef*, Annotations?)
        /// </para>
        /// </summary>
        public IList<string> IdentifierComponentRef {
            get {
                if ((this.IdentifierComponentRefField == null)) {
                    this.IdentifierComponentRefField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("IdentifierComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.IdentifierComponentRefField;
            }
            set {
                if ((value == null)) {
                    this.IdentifierComponentRefField = null;
                }
                else {
                    if ((this.IdentifierComponentRefField == null)) {
                        this.IdentifierComponentRefField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("IdentifierComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.IdentifierComponentRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, IdentifierComponentRef*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PartialTargetIdentifierType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PartialTargetIdentifierType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("IdentifierComponentRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The Object ID is used to reference a particular Object within the SDMX Information Model's formalization of statistical exchanges.
    /// </para>
    /// </summary>
    public sealed class ObjectIDType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Agency",
                        "ConceptScheme",
                        "Concept",
                        "Codelist",
                        "Code",
                        "KeyFamily",
                        "Component",
                        "KeyDescriptor",
                        "MeasureDescriptor",
                        "AttributeDescriptor",
                        "GroupKeyDescriptor",
                        "Dimension",
                        "Measure",
                        "Attribute",
                        "CategoryScheme",
                        "ReportingTaxonomy",
                        "Category",
                        "OrganisationScheme",
                        "DataProvider",
                        "MetadataStructure",
                        "FullTargetIdentifier",
                        "PartialTargetIdentifier",
                        "MetadataAttribute",
                        "DataFlow",
                        "ProvisionAgreement",
                        "MetadataFlow",
                        "ContentConstraint",
                        "AttachmentConstraint",
                        "DataSet",
                        "XSDataSet",
                        "MetadataSet",
                        "HierarchicalCodelist",
                        "Hierarchy",
                        "StructureSet",
                        "StructureMap",
                        "ComponentMap",
                        "CodelistMap",
                        "CodeMap",
                        "CategorySchemeMap",
                        "CategoryMap",
                        "OrganisationSchemeMap",
                        "OrganisationRoleMap",
                        "ConceptSchemeMap",
                        "ConceptMap",
                        "Process",
                        "ProcessStep"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ObjectIDType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Representation schemes indicated which values are valid for identifying objects within each class. For any given representation scheme, two IDs must be provided: the RepresentationScheme must have an ID as assigned to it by it representationSchemeAgency, whose ID must also be provided. The type of the representation scheme is expressed in the representationSchemeType attribute.
    /// </para>
    /// </summary>
    public partial class RepresentationSchemeType : XTypedElement, IXMetaData {
        
         public static explicit operator RepresentationSchemeType(XElement xe) { return XTypedServices.ToXTypedElement<RepresentationSchemeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Representation schemes indicated which values are valid for identifying objects within each class. For any given representation scheme, two IDs must be provided: the RepresentationScheme must have an ID as assigned to it by it representationSchemeAgency, whose ID must also be provided. The type of the representation scheme is expressed in the representationSchemeType attribute.
        /// </para>
        /// </summary>
        public RepresentationSchemeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string representationScheme {
            get {
                XAttribute x = this.Attribute(XName.Get("representationScheme", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("representationScheme", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string representationSchemeAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("representationSchemeAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("representationSchemeAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string representationSchemeType1 {
            get {
                XAttribute x = this.Attribute(XName.Get("representationSchemeType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("representationSchemeType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RepresentationSchemeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RepresentationSchemeType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The report structure describes the presentation of the reported concepts, and associates them with target identifiers, full or partial. It can be given a name and/or annotations. It must be given an ID, using the id attribute, which must be unique within the MetadataStructureDefinition element. It contains one or more MetadataAttribute elements, each of which may either hold a value, or may have subordinate MetadataAttribute elements. The target attribute holds the ID of a full or partial identifier, which is the identifier of the target against which the metadata attributes are reported.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, MetadataAttribute+, Annotations?)
    /// </para>
    /// </summary>
    public partial class ReportStructureType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataAttributeType> MetadataAttributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReportStructureType(XElement xe) { return XTypedServices.ToXTypedElement<ReportStructureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReportStructureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("MetadataAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// The report structure describes the presentation of the reported concepts, and associates them with target identifiers, full or partial. It can be given a name and/or annotations. It must be given an ID, using the id attribute, which must be unique within the MetadataStructureDefinition element. It contains one or more MetadataAttribute elements, each of which may either hold a value, or may have subordinate MetadataAttribute elements. The target attribute holds the ID of a full or partial identifier, which is the identifier of the target against which the metadata attributes are reported.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataAttribute+, Annotations?)
        /// </para>
        /// </summary>
        public ReportStructureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataAttribute+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataAttribute+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataAttribute+, Annotations?)
        /// </para>
        /// </summary>
        public IList<MetadataAttributeType> MetadataAttribute {
            get {
                if ((this.MetadataAttributeField == null)) {
                    this.MetadataAttributeField = new XTypedList<MetadataAttributeType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.MetadataAttributeField;
            }
            set {
                if ((value == null)) {
                    this.MetadataAttributeField = null;
                }
                else {
                    if ((this.MetadataAttributeField == null)) {
                        this.MetadataAttributeField = XTypedList<MetadataAttributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<MetadataAttributeType>(this.MetadataAttributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, MetadataAttribute+, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string target {
            get {
                XAttribute x = this.Attribute(XName.Get("target", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("target", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReportStructureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReportStructureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("MetadataAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataAttributeType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Metadata attributes are those concepts - whether taking a coded or uncoded value, or made up of child concepts, or both - which are reported against a full or partial target identifier. If there are nested metadata attributes, these concepts are subordinate to the parent metadata attribute - that is, for the purposes of presentation, the parent concept is made up of the child concepts. This hierarchy is strictly presentational, for the purposes of structuring reports. If the metadata attribute can have a coded or uncoded value, then the charateristics of the value are indicated with the TextFormat child element. If the value is coded, then the representationScheme and representationSchemeAgency attributes must hold values: the representationScheme attribute takes the ID of a representation scheme, and the representationSchemeAgency takes the ID of the agency which maintains that scheme. The conceptRef attribute holds the ID of the metadata attribute's concept. The conceptAgency attribute takes the agency ID of the concept referenced in conceptRef. The conceptSchemeRef attribute holds the ID value of the concept scheme from which the concept is taken, and the conceptSchemeAgency holds the ID of the agency that maintains the concept scheme referenced in the conceptSchemeRef attribute. The useageStatus attribute indicates whether provision of the metadata attribute is conditional or mandatory.
    /// </para>
    /// <para>
    /// Regular expression: (MetadataAttribute*, TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class MetadataAttributeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataAttributeType> MetadataAttributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataAttributeType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataAttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataAttributeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MetadataAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// Metadata attributes are those concepts - whether taking a coded or uncoded value, or made up of child concepts, or both - which are reported against a full or partial target identifier. If there are nested metadata attributes, these concepts are subordinate to the parent metadata attribute - that is, for the purposes of presentation, the parent concept is made up of the child concepts. This hierarchy is strictly presentational, for the purposes of structuring reports. If the metadata attribute can have a coded or uncoded value, then the charateristics of the value are indicated with the TextFormat child element. If the value is coded, then the representationScheme and representationSchemeAgency attributes must hold values: the representationScheme attribute takes the ID of a representation scheme, and the representationSchemeAgency takes the ID of the agency which maintains that scheme. The conceptRef attribute holds the ID of the metadata attribute's concept. The conceptAgency attribute takes the agency ID of the concept referenced in conceptRef. The conceptSchemeRef attribute holds the ID value of the concept scheme from which the concept is taken, and the conceptSchemeAgency holds the ID of the agency that maintains the concept scheme referenced in the conceptSchemeRef attribute. The useageStatus attribute indicates whether provision of the metadata attribute is conditional or mandatory.
        /// </para>
        /// <para>
        /// Regular expression: (MetadataAttribute*, TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public MetadataAttributeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MetadataAttribute*, TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public IList<MetadataAttributeType> MetadataAttribute {
            get {
                if ((this.MetadataAttributeField == null)) {
                    this.MetadataAttributeField = new XTypedList<MetadataAttributeType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.MetadataAttributeField;
            }
            set {
                if ((value == null)) {
                    this.MetadataAttributeField = null;
                }
                else {
                    if ((this.MetadataAttributeField == null)) {
                        this.MetadataAttributeField = XTypedList<MetadataAttributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<MetadataAttributeType>(this.MetadataAttributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MetadataAttribute*, TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public TextFormatType TextFormat {
            get {
                XElement x = this.GetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MetadataAttribute*, TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string conceptRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string representationScheme {
            get {
                XAttribute x = this.Attribute(XName.Get("representationScheme", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("representationScheme", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string representationSchemeAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("representationSchemeAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("representationSchemeAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string usageStatus {
            get {
                XAttribute x = this.Attribute(XName.Get("usageStatus", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("usageStatus", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataAttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataAttributeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MetadataAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataAttributeType));
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TextFormatType defines the information for describing a text format. If the TextType attribute is not specified, any valid characters may be included in the text field. (It corresponds to the xs:string datatype of W3C XML Schema.) The textType attribute provides a description of the data type, and may place restrictions on the values of the other attributes, referred to as "facets". The isSequence attribute indicates whether the values are intended to be ordered, and it may work in combination with the interval attribute. The minLength and maxLength attributes specify the minimum and maximum lengths of the value in characters. startValue and endValue are used for inclusive and exclusive ranges, indicating what the bounds of the range are. The interval attribute specifies the permitted interval between two values. The timeInterval attribute indicates the permitted duration between two time expressions. The decimals attribute indicates the number of characters allowed after the decimal separator. The pattern attribute holds any regular expression permitted in the simila facet in W3C XML Schema.
    /// </para>
    /// </summary>
    public partial class TextFormatType : XTypedElement, IXMetaData {
        
         public static explicit operator TextFormatType(XElement xe) { return XTypedServices.ToXTypedElement<TextFormatType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// TextFormatType defines the information for describing a text format. If the TextType attribute is not specified, any valid characters may be included in the text field. (It corresponds to the xs:string datatype of W3C XML Schema.) The textType attribute provides a description of the data type, and may place restrictions on the values of the other attributes, referred to as "facets". The isSequence attribute indicates whether the values are intended to be ordered, and it may work in combination with the interval attribute. The minLength and maxLength attributes specify the minimum and maximum lengths of the value in characters. startValue and endValue are used for inclusive and exclusive ranges, indicating what the bounds of the range are. The interval attribute specifies the permitted interval between two values. The timeInterval attribute indicates the permitted duration between two time expressions. The decimals attribute indicates the number of characters allowed after the decimal separator. The pattern attribute holds any regular expression permitted in the simila facet in W3C XML Schema.
        /// </para>
        /// </summary>
        public TextFormatType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string textType {
            get {
                XAttribute x = this.Attribute(XName.Get("textType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("textType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isSequence {
            get {
                XAttribute x = this.Attribute(XName.Get("isSequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isSequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> minLength {
            get {
                XAttribute x = this.Attribute(XName.Get("minLength", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("minLength", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> maxLength {
            get {
                XAttribute x = this.Attribute(XName.Get("maxLength", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("maxLength", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<double> startValue {
            get {
                XAttribute x = this.Attribute(XName.Get("startValue", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("startValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<double> endValue {
            get {
                XAttribute x = this.Attribute(XName.Get("endValue", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("endValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<double> interval {
            get {
                XAttribute x = this.Attribute(XName.Get("interval", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("interval", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.TimeSpan> timeInterval {
            get {
                XAttribute x = this.Attribute(XName.Get("timeInterval", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("timeInterval", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> decimals {
            get {
                XAttribute x = this.Attribute(XName.Get("decimals", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("decimals", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string pattern {
            get {
                XAttribute x = this.Attribute(XName.Get("pattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("pattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TextFormatType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextFormatType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// TextTypeType provides an enumerated list of the types of characters allowed in a TextFormat field.
    /// </para>
    /// </summary>
    public sealed class TextTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "String",
                        "BigInteger",
                        "Integer",
                        "Long",
                        "Short",
                        "Decimal",
                        "Float",
                        "Double",
                        "Boolean",
                        "DateTime",
                        "Date",
                        "Time",
                        "Year",
                        "Month",
                        "Day",
                        "MonthDay",
                        "YearMonth",
                        "Duration",
                        "URI",
                        "Timespan",
                        "Count",
                        "InclusiveValueRange",
                        "ExclusiveValueRange",
                        "Incremental",
                        "ObservationalTimePeriod"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private TextTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// UsageStatus provides a list of enumerated types for indicating whether reporting a given metadata attribute is mandatory or conditional.
    /// </para>
    /// </summary>
    public sealed class UsageStatusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Mandatory",
                        "Conditional"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private UsageStatusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Representation scheme type provides an enumerated list of valid types of representation schemes.
    /// </para>
    /// </summary>
    public sealed class RepresentationSchemeTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Codelist",
                        "Concept",
                        "Category",
                        "Organisation",
                        "External"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private RepresentationSchemeTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyFamiliesType defines the structure for describing one or more key families. It also provides uniqueness constraints for each of the key family IDs.
    /// </para>
    /// <para>
    /// Regular expression: (KeyFamily+)
    /// </para>
    /// </summary>
    public partial class KeyFamiliesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<KeyFamilyType> KeyFamilyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator KeyFamiliesType(XElement xe) { return XTypedServices.ToXTypedElement<KeyFamiliesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeyFamiliesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// KeyFamiliesType defines the structure for describing one or more key families. It also provides uniqueness constraints for each of the key family IDs.
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily+)
        /// </para>
        /// </summary>
        public KeyFamiliesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily+)
        /// </para>
        /// </summary>
        public IList<KeyFamilyType> KeyFamily {
            get {
                if ((this.KeyFamilyField == null)) {
                    this.KeyFamilyField = new XTypedList<KeyFamilyType>(this, LinqToXsdTypeManager.Instance, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.KeyFamilyField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyField = null;
                }
                else {
                    if ((this.KeyFamilyField == null)) {
                        this.KeyFamilyField = XTypedList<KeyFamilyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<KeyFamilyType>(this.KeyFamilyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyFamiliesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeyFamiliesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(KeyFamilyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyFamilyType defines the structure of a key-family description. This includes the name and a set of components (attributes and dimensions) as element content, and an ID, agency, version, and the URL where located as attributes. The urn attribute holds a valid SDMX Registry URN, as per the SDMX Registry spec. The isFinal attribute, once set to true, indicates that no changes may be made without versioning. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version. If the isExternalReference attribute is true, then the uri attribute must be provided, giving a location where a valid structure message can be found containing the full details of the key family.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, Components?, Annotations?)
    /// </para>
    /// </summary>
    public partial class KeyFamilyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator KeyFamilyType(XElement xe) { return XTypedServices.ToXTypedElement<KeyFamilyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeyFamilyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Components", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// KeyFamilyType defines the structure of a key-family description. This includes the name and a set of components (attributes and dimensions) as element content, and an ID, agency, version, and the URL where located as attributes. The urn attribute holds a valid SDMX Registry URN, as per the SDMX Registry spec. The isFinal attribute, once set to true, indicates that no changes may be made without versioning. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version. If the isExternalReference attribute is true, then the uri attribute must be provided, giving a location where a valid structure message can be found containing the full details of the key family.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Components?, Annotations?)
        /// </para>
        /// </summary>
        public KeyFamilyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Components?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Components?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Components?, Annotations?)
        /// </para>
        /// </summary>
        public ComponentsType Components {
            get {
                XElement x = this.GetElement(XName.Get("Components", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((ComponentsType)(x));
            }
            set {
                this.SetElement(XName.Get("Components", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Components?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyFamilyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeyFamilyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Components", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ComponentsType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ComponentsType describes the dimensions, groups, attributes, and measures of the key family. If TimeDimension is included in the key family - which it must be if time series formats for the data (GenericData, CompactData, and UtilityData formats) are to be used - then there must also be a frequency dimension. 
    /// </para>
    /// <para>
    /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
    /// </para>
    /// </summary>
    public partial class ComponentsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DimensionType> DimensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroupType> GroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CrossSectionalMeasureType> CrossSectionalMeasureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AttributeType> AttributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ComponentsType(XElement xe) { return XTypedServices.ToXTypedElement<ComponentsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ComponentsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TimeDimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("PrimaryMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CrossSectionalMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ComponentsType describes the dimensions, groups, attributes, and measures of the key family. If TimeDimension is included in the key family - which it must be if time series formats for the data (GenericData, CompactData, and UtilityData formats) are to be used - then there must also be a frequency dimension. 
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public ComponentsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public IList<DimensionType> Dimension {
            get {
                if ((this.DimensionField == null)) {
                    this.DimensionField = new XTypedList<DimensionType>(this, LinqToXsdTypeManager.Instance, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DimensionField;
            }
            set {
                if ((value == null)) {
                    this.DimensionField = null;
                }
                else {
                    if ((this.DimensionField == null)) {
                        this.DimensionField = XTypedList<DimensionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<DimensionType>(this.DimensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public TimeDimensionType TimeDimension {
            get {
                XElement x = this.GetElement(XName.Get("TimeDimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TimeDimensionType)(x));
            }
            set {
                this.SetElement(XName.Get("TimeDimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public IList<GroupType> Group {
            get {
                if ((this.GroupField == null)) {
                    this.GroupField = new XTypedList<GroupType>(this, LinqToXsdTypeManager.Instance, XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.GroupField;
            }
            set {
                if ((value == null)) {
                    this.GroupField = null;
                }
                else {
                    if ((this.GroupField == null)) {
                        this.GroupField = XTypedList<GroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<GroupType>(this.GroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public PrimaryMeasureType PrimaryMeasure {
            get {
                XElement x = this.GetElement(XName.Get("PrimaryMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((PrimaryMeasureType)(x));
            }
            set {
                this.SetElement(XName.Get("PrimaryMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public IList<CrossSectionalMeasureType> CrossSectionalMeasure {
            get {
                if ((this.CrossSectionalMeasureField == null)) {
                    this.CrossSectionalMeasureField = new XTypedList<CrossSectionalMeasureType>(this, LinqToXsdTypeManager.Instance, XName.Get("CrossSectionalMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CrossSectionalMeasureField;
            }
            set {
                if ((value == null)) {
                    this.CrossSectionalMeasureField = null;
                }
                else {
                    if ((this.CrossSectionalMeasureField == null)) {
                        this.CrossSectionalMeasureField = XTypedList<CrossSectionalMeasureType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CrossSectionalMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CrossSectionalMeasureType>(this.CrossSectionalMeasureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Dimension*, TimeDimension?, Group*, PrimaryMeasure, CrossSectionalMeasure*, Attribute*)
        /// </para>
        /// </summary>
        public IList<AttributeType> Attribute {
            get {
                if ((this.AttributeField == null)) {
                    this.AttributeField = new XTypedList<AttributeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.AttributeField;
            }
            set {
                if ((value == null)) {
                    this.AttributeField = null;
                }
                else {
                    if ((this.AttributeField == null)) {
                        this.AttributeField = XTypedList<AttributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<AttributeType>(this.AttributeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ComponentsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ComponentsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("TimeDimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TimeDimensionType));
            localElementDictionary.Add(XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(GroupType));
            localElementDictionary.Add(XName.Get("PrimaryMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(PrimaryMeasureType));
            localElementDictionary.Add(XName.Get("CrossSectionalMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CrossSectionalMeasureType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(AttributeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DimensionType describes the structure of non-Time dimensions. The order of their declaration is significant: it is used to describe the order in which they will appear in data formats for which key values are supplied in an ordered fashion (exclusive of the Time dimension, which is not represented as a member of the ordered key). Some types of non-Time  dimensions have un-coded values: the TextFormat element must be provided, to indicate what type of values are permissible. The attributes isFrequencyDimension and isEntityDimension may have a "true" value for any instance of the Dimension element, indicating that it is a dimension of the stated type. The attributes isCountDimension, isNonObservationalTimeDimension, isMeasureDimension, and is IdentityDimension may occur multiple times, and take a true value to indicate that the diemsnion in question is of that type. Note that only one dimension in the key family may be of the following types: Frequency dimension and Entity dimension, and only if there is not also an attribute in the key family of the same type. Any given dimension may only have a true value for one of the set of attributes isFrequencyDimension, isCountDimension, is measureDimension,  isEntityDimension, isNonObservationalTimeDimension, and is IdentityDimension. The definitions and limits on representation of each dimension type are as follows: Frequency dimension describes the period between observations, and is coded; Count dimensions are represented by values which are sequential, incrementing numbers - representations are always of the Increment or Count type; measureType dimensions are always coded, and they enumerate the set of possible measures declared for the key family; Entity dimensions describe the subject of the data set (ie, a country) - they can be coded or represented in any other form; Non-Observational Time dimensions must have a representation which contains a time; Identity dimensions may be coded or uncoded, but must be represented by a scheme which refers to the identifiers of external entites. (Conventionally, it is the first dimension in the ordered set of dimensions - the key.) If a key family describes cross-sectional data, then for each dimension, the crossSectionalAttachDataSet, crossSectionalAttachGroup, crossSectionalAttachSection, and crossSectionalAttachObservation attributes must be given values. A value of "true" for any of these attributes indicates that the dimension may be provided a value at the indicated level within the cross-sectional structure. Note that these attributes do not need to be provided for any dimension with the isFrequencyDimension set to "true", as these dimensions are always attached only at the group level, as is time. A key family designed for cross-sectional use must be structured such that any observation's complete key can be unambiguously described by taking each dimension value from its observation level, section level, group level, and data set level, and ordered according to the sequence given in the key family.  For any dimension, the id of the referenced concept
    ///			must be unique acrss the entire key family, including all dimensions, attributes and measures.
    /// </para>
    /// <para>
    /// Regular expression: (TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class DimensionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isMeasureDimensionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isFrequencyDimensionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isEntityDimensionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isCountDimensionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isNonObservationTimeDimensionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isIdentityDimensionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DimensionType(XElement xe) { return XTypedServices.ToXTypedElement<DimensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DimensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// DimensionType describes the structure of non-Time dimensions. The order of their declaration is significant: it is used to describe the order in which they will appear in data formats for which key values are supplied in an ordered fashion (exclusive of the Time dimension, which is not represented as a member of the ordered key). Some types of non-Time  dimensions have un-coded values: the TextFormat element must be provided, to indicate what type of values are permissible. The attributes isFrequencyDimension and isEntityDimension may have a "true" value for any instance of the Dimension element, indicating that it is a dimension of the stated type. The attributes isCountDimension, isNonObservationalTimeDimension, isMeasureDimension, and is IdentityDimension may occur multiple times, and take a true value to indicate that the diemsnion in question is of that type. Note that only one dimension in the key family may be of the following types: Frequency dimension and Entity dimension, and only if there is not also an attribute in the key family of the same type. Any given dimension may only have a true value for one of the set of attributes isFrequencyDimension, isCountDimension, is measureDimension,  isEntityDimension, isNonObservationalTimeDimension, and is IdentityDimension. The definitions and limits on representation of each dimension type are as follows: Frequency dimension describes the period between observations, and is coded; Count dimensions are represented by values which are sequential, incrementing numbers - representations are always of the Increment or Count type; measureType dimensions are always coded, and they enumerate the set of possible measures declared for the key family; Entity dimensions describe the subject of the data set (ie, a country) - they can be coded or represented in any other form; Non-Observational Time dimensions must have a representation which contains a time; Identity dimensions may be coded or uncoded, but must be represented by a scheme which refers to the identifiers of external entites. (Conventionally, it is the first dimension in the ordered set of dimensions - the key.) If a key family describes cross-sectional data, then for each dimension, the crossSectionalAttachDataSet, crossSectionalAttachGroup, crossSectionalAttachSection, and crossSectionalAttachObservation attributes must be given values. A value of "true" for any of these attributes indicates that the dimension may be provided a value at the indicated level within the cross-sectional structure. Note that these attributes do not need to be provided for any dimension with the isFrequencyDimension set to "true", as these dimensions are always attached only at the group level, as is time. A key family designed for cross-sectional use must be structured such that any observation's complete key can be unambiguously described by taking each dimension value from its observation level, section level, group level, and data set level, and ordered according to the sequence given in the key family.  For any dimension, the id of the referenced concept
        ///			must be unique acrss the entire key family, including all dimensions, attributes and measures.
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public DimensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public TextFormatType TextFormat {
            get {
                XElement x = this.GetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string conceptRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelist {
            get {
                XAttribute x = this.Attribute(XName.Get("codelist", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelist", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelistVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("codelistVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelistVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelistAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("codelistAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelistAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isMeasureDimension {
            get {
                XAttribute x = this.Attribute(XName.Get("isMeasureDimension", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isMeasureDimensionDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isMeasureDimension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isFrequencyDimension {
            get {
                XAttribute x = this.Attribute(XName.Get("isFrequencyDimension", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isFrequencyDimensionDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isFrequencyDimension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isEntityDimension {
            get {
                XAttribute x = this.Attribute(XName.Get("isEntityDimension", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isEntityDimensionDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isEntityDimension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isCountDimension {
            get {
                XAttribute x = this.Attribute(XName.Get("isCountDimension", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isCountDimensionDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isCountDimension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isNonObservationTimeDimension {
            get {
                XAttribute x = this.Attribute(XName.Get("isNonObservationTimeDimension", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isNonObservationTimeDimensionDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isNonObservationTimeDimension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isIdentityDimension {
            get {
                XAttribute x = this.Attribute(XName.Get("isIdentityDimension", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isIdentityDimensionDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isIdentityDimension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachDataSet {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachDataSet", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachDataSet", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachGroup {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachGroup", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachGroup", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachSection {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachSection", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachSection", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachObservation {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachObservation", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachObservation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DimensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TimeDimensionType describes the special Time dimension. Any key family which will be used for time-series formats (GenericData, CompactData, and UtilityData) must include the time dimension. Any key family which uses the time dimension must also declare a frequency dimension, conventionally the first dimension in the key (the set of ordered non-time dimensions). A TextFormat element may be included for indicating the representation of time. The concept attribute must contain the concept name of the time concept. The codelist attribute may provide the value of the concept name of a codelist if needed. If a key family describes cross-sectional data, then for each dimension, the crossSectionalAttachDataSet, crossSectionalAttachGroup, crossSectionalAttachSection, and crossSectionalAttachObservation attributes must be given values. A value of "true" for any of these attributes indicates that the dimension may be provided a value at the indicated level within the cross-sectional structure. Note that these attributes do not need to be provided for any dimension with the isFrequencyDimension set to "true", as these dimensions are always attached only at the group level, as is time. A key family designed for cross-sectional use must be structured such that any observation's complete key can be unambiguously described by taking each dimension value from its observation level, section level, group level, and data set level, and ordered according to the sequence given in the key family. 
    /// </para>
    /// <para>
    /// Regular expression: (TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class TimeDimensionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TimeDimensionType(XElement xe) { return XTypedServices.ToXTypedElement<TimeDimensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TimeDimensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// TimeDimensionType describes the special Time dimension. Any key family which will be used for time-series formats (GenericData, CompactData, and UtilityData) must include the time dimension. Any key family which uses the time dimension must also declare a frequency dimension, conventionally the first dimension in the key (the set of ordered non-time dimensions). A TextFormat element may be included for indicating the representation of time. The concept attribute must contain the concept name of the time concept. The codelist attribute may provide the value of the concept name of a codelist if needed. If a key family describes cross-sectional data, then for each dimension, the crossSectionalAttachDataSet, crossSectionalAttachGroup, crossSectionalAttachSection, and crossSectionalAttachObservation attributes must be given values. A value of "true" for any of these attributes indicates that the dimension may be provided a value at the indicated level within the cross-sectional structure. Note that these attributes do not need to be provided for any dimension with the isFrequencyDimension set to "true", as these dimensions are always attached only at the group level, as is time. A key family designed for cross-sectional use must be structured such that any observation's complete key can be unambiguously described by taking each dimension value from its observation level, section level, group level, and data set level, and ordered according to the sequence given in the key family. 
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public TimeDimensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public TextFormatType TextFormat {
            get {
                XElement x = this.GetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string conceptRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelist {
            get {
                XAttribute x = this.Attribute(XName.Get("codelist", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelist", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelistVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("codelistVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelistVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelistAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("codelistAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelistAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachDataSet {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachDataSet", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachDataSet", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachGroup {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachGroup", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachGroup", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachSection {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachSection", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachSection", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachObservation {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachObservation", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachObservation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TimeDimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TimeDimensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType declares any useful groupings of data, based on a selection of the declared (non-Time) dimensions (indicated with the DimensionRef element) which form partial keys to which attributes may be attached. The value of the DimensionRef element is the concept of the dimension - that is, the value of the dimension's concept attribute. Thus, if data is to be presented as a set of time series which vary only according to their differing frequencies, a "sibling group" would be declared, with all dimensions except the frequency dimension in it. If data is commonly grouped as a set of all countries, then a "Country Group" could be declared, with all dimensions except the country dimension forming part of the partial key. Any dimension which is not part of a group has a value which varies at the series level (for time series formats). There is no requirement to have only a single dimension ommitted from a partial key - it can be any subset of the set of ordered dimensions (that is, all dimensions except the time dimension, which may never be declared as belonging to a group partial key). All groups declared in the key family must be unique - that is, you may not have duplicate partial keys. All groups must also be given unique names (id attributes). Although it is conventional to declare dimensions in the same order as they are declared in the ordered key, there is no requirement to do so - the ordering of the values of the key are taken from the order in which the dimensions are declared. The Description element provides a human-readable description (potentially in multiple, parallel languages) of the group. Note that for cross-sectional formats, the named group mechanism is not used, but is instead replaced by a generic group which carries time and frequency values with it, and allows for any available group-level attributes to be specified if desired. 
    /// </para>
    /// <para>
    /// Regular expression: ((DimensionRef+ | AttachmentConstraintRef), Description*, Annotations?)
    /// </para>
    /// </summary>
    public partial class GroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DimensionRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator GroupType(XElement xe) { return XTypedServices.ToXTypedElement<GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// GroupType declares any useful groupings of data, based on a selection of the declared (non-Time) dimensions (indicated with the DimensionRef element) which form partial keys to which attributes may be attached. The value of the DimensionRef element is the concept of the dimension - that is, the value of the dimension's concept attribute. Thus, if data is to be presented as a set of time series which vary only according to their differing frequencies, a "sibling group" would be declared, with all dimensions except the frequency dimension in it. If data is commonly grouped as a set of all countries, then a "Country Group" could be declared, with all dimensions except the country dimension forming part of the partial key. Any dimension which is not part of a group has a value which varies at the series level (for time series formats). There is no requirement to have only a single dimension ommitted from a partial key - it can be any subset of the set of ordered dimensions (that is, all dimensions except the time dimension, which may never be declared as belonging to a group partial key). All groups declared in the key family must be unique - that is, you may not have duplicate partial keys. All groups must also be given unique names (id attributes). Although it is conventional to declare dimensions in the same order as they are declared in the ordered key, there is no requirement to do so - the ordering of the values of the key are taken from the order in which the dimensions are declared. The Description element provides a human-readable description (potentially in multiple, parallel languages) of the group. Note that for cross-sectional formats, the named group mechanism is not used, but is instead replaced by a generic group which carries time and frequency values with it, and allows for any available group-level attributes to be specified if desired. 
        /// </para>
        /// <para>
        /// Regular expression: ((DimensionRef+ | AttachmentConstraintRef), Description*, Annotations?)
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((DimensionRef+ | AttachmentConstraintRef), Description*, Annotations?)
        /// </para>
        /// </summary>
        public IList<string> DimensionRef {
            get {
                if ((this.DimensionRefField == null)) {
                    this.DimensionRefField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DimensionRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DimensionRefField;
            }
            set {
                if ((value == null)) {
                    this.DimensionRefField = null;
                }
                else {
                    if ((this.DimensionRefField == null)) {
                        this.DimensionRefField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DimensionRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DimensionRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((DimensionRef+ | AttachmentConstraintRef), Description*, Annotations?)
        /// </para>
        /// </summary>
        public string AttachmentConstraintRef {
            get {
                XElement x = this.GetElement(XName.Get("AttachmentConstraintRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AttachmentConstraintRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "AttachmentConstraintRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((DimensionRef+ | AttachmentConstraintRef), Description*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((DimensionRef+ | AttachmentConstraintRef), Description*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DimensionRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("AttachmentConstraintRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// AttachmentConstraintRefType describes a reference to an attachment constraint. This includes a reference to a dataflow, metadataflow, data provider, or provision agreement plus the ID of the attachment constraint, as assigned within the constraints associated with the referenced object, in the ConstraintRef element.
    /// </para>
    /// <para>
    /// Regular expression: ((DataflowRef | MetadataflowRef | DataProviderRef | ProvisionAgreementRef), ConstraintRef)
    /// </para>
    /// </summary>
    public partial class AttachmentConstraintRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator AttachmentConstraintRefType(XElement xe) { return XTypedServices.ToXTypedElement<AttachmentConstraintRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AttachmentConstraintRefType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// AttachmentConstraintRefType describes a reference to an attachment constraint. This includes a reference to a dataflow, metadataflow, data provider, or provision agreement plus the ID of the attachment constraint, as assigned within the constraints associated with the referenced object, in the ConstraintRef element.
        /// </para>
        /// <para>
        /// Regular expression: ((DataflowRef | MetadataflowRef | DataProviderRef | ProvisionAgreementRef), ConstraintRef)
        /// </para>
        /// </summary>
        public AttachmentConstraintRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((DataflowRef | MetadataflowRef | DataProviderRef | ProvisionAgreementRef), ConstraintRef)
        /// </para>
        /// </summary>
        public DataflowRefType DataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((DataflowRef | MetadataflowRef | DataProviderRef | ProvisionAgreementRef), ConstraintRef)
        /// </para>
        /// </summary>
        public MetadataflowRefType MetadataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((MetadataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((DataflowRef | MetadataflowRef | DataProviderRef | ProvisionAgreementRef), ConstraintRef)
        /// </para>
        /// </summary>
        public DataProviderRefType DataProviderRef {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((DataProviderRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((DataflowRef | MetadataflowRef | DataProviderRef | ProvisionAgreementRef), ConstraintRef)
        /// </para>
        /// </summary>
        public ProvisionAgreementRefType ProvisionAgreementRef {
            get {
                XElement x = this.GetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((ProvisionAgreementRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((DataflowRef | MetadataflowRef | DataProviderRef | ProvisionAgreementRef), ConstraintRef)
        /// </para>
        /// </summary>
        public string ConstraintRef {
            get {
                XElement x = this.GetElement(XName.Get("ConstraintRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ConstraintRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "ConstraintRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AttachmentConstraintRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttachmentConstraintRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(DataProviderRefType));
            localElementDictionary.Add(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ProvisionAgreementRefType));
            localElementDictionary.Add(XName.Get("ConstraintRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ProvisionAgreementRef allows for the identification of a provision agreement. At a minimum, either the URN element - holding a valid registry URN - or the set of OragnisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, DataflowAgencyID, and DataflowID must be specified. Constraint can be used to express constraints associated with the provision agreement. This type differs from the similar type in the Registry namespace package by not providing information about the datasource or constraints.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
    /// </para>
    /// </summary>
    public partial class ProvisionAgreementRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ProvisionAgreementRefType(XElement xe) { return XTypedServices.ToXTypedElement<ProvisionAgreementRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProvisionAgreementRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataProviderVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataflowAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataflowVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ProvisionAgreementRef allows for the identification of a provision agreement. At a minimum, either the URN element - holding a valid registry URN - or the set of OragnisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, DataflowAgencyID, and DataflowID must be specified. Constraint can be used to express constraints associated with the provision agreement. This type differs from the similar type in the Registry namespace package by not providing information about the datasource or constraints.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
        /// </para>
        /// </summary>
        public ProvisionAgreementRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "OrganisationSchemeAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "OrganisationSchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
        /// </para>
        /// </summary>
        public string DataProviderID {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "DataProviderID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
        /// </para>
        /// </summary>
        public string DataProviderVersion {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataProviderVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
        /// </para>
        /// </summary>
        public string DataflowAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("DataflowAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataflowAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "DataflowAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
        /// </para>
        /// </summary>
        public string DataflowID {
            get {
                XElement x = this.GetElement(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "DataflowID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
        /// </para>
        /// </summary>
        public string DataflowVersion {
            get {
                XElement x = this.GetElement(XName.Get("DataflowVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataflowVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Constraint?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType Constraint {
            get {
                XElement x = this.GetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType)(x));
            }
            set {
                this.SetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProvisionAgreementRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProvisionAgreementRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The DataProviderRef type structures a reference to a data provider. This requires that IDs be provided for an organisation scheme, its maintenance agency, and the data provider as identified in the referenced organisation scheme. The Version element may be used to specify the version of the indicated data provider. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific urn as an alternate means of identification. At a minimum, either the URN element or OrgansisationSchemeID, OrganisationSchemeAgencyID, DataProviderID, and (optionally) Version must be supplied. When used in a response document of any type, the URN must always be provided. Constraints can be used to specify constraints associated with the data provider. This type differs from the similar type in the Registry namespace by not describing the datasource.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Constraint?)
    /// </para>
    /// </summary>
    public partial class DataProviderRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataProviderRefType(XElement xe) { return XTypedServices.ToXTypedElement<DataProviderRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataProviderRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// The DataProviderRef type structures a reference to a data provider. This requires that IDs be provided for an organisation scheme, its maintenance agency, and the data provider as identified in the referenced organisation scheme. The Version element may be used to specify the version of the indicated data provider. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific urn as an alternate means of identification. At a minimum, either the URN element or OrgansisationSchemeID, OrganisationSchemeAgencyID, DataProviderID, and (optionally) Version must be supplied. When used in a response document of any type, the URN must always be provided. Constraints can be used to specify constraints associated with the data provider. This type differs from the similar type in the Registry namespace by not describing the datasource.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Constraint?)
        /// </para>
        /// </summary>
        public DataProviderRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Constraint?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Constraint?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "OrganisationSchemeAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Constraint?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "OrganisationSchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Constraint?)
        /// </para>
        /// </summary>
        public string DataProviderID {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "DataProviderID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Constraint?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Constraint?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType Constraint {
            get {
                XElement x = this.GetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType)(x));
            }
            set {
                this.SetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataProviderRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataProviderRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// AttributeType describes the structure of attributes declared in the key family. If the codelist attribute is not used, then the attribute is uncoded. You may use the TextFormat element to specify constraints on the value of the uncoded attribute. The concept attribute contains the name of a concept. The codelist attribute supplies the id value of a codelist. The attachmentLevel attribute indicates the level to which the attribute is attached in time-series formats (GenericData, CompactData, and UtilityData formats). The assignmentStatus attribute indicates whether a value must be provided for the attribute when sending documentation along with the data. The AttachmentGroup element is included only when the attribute is attached at the Group level, to indicate which declared group or groups the attribute may be attached to. For each such group, an AttachmentGroup element should appear, with the content of the element being the name of the group. The AttachmentMeasure element is similar, indicating for cross-sectional formats which declared measure or measures the attribute attached at the observation level may be attached to. The isTimeFormat attribute indicates that the attribute represents the concept of time format (typically a mandatory series-level attribute with a codelist representation taken from ISO 8601). For key families not used to structure cross-sectional formats, this element may be ommitted. Each such element contains the name of the declared measure. The attributes crossSectionalAttachDataSet, crossSectionalAttachGroup, crossSectionalAttachSection, and crossSectionalAttachObservation indicate what the attachment level or levels are for cross-sectional data formats, and may be ommitted if the key family will not be used to structure them. A value of "true" indicates that it is permissible to provide a value for the attribute at the specified level within the structure. Note that all groups in cross-sectional formats are replaced by a generic group which has any values for time and frequency, and allows any group-level attributes to be attached to it. An attribute which is an Entity attribute has a true value for the isEntityAttribute attribute - you may have either one Entity dimension or one Entity Attribute in a key family; a non-observational time  has a true value for isNonObservationalTimeAttribute; and a Count attribute has a true value for the isCountAttribute attribute. The attributes  isFrequencyAttribute and isEntityAttribute are mutually exclusive - that is, only one of them may have a "true" value for any instance of the Attribute element. The definitions and limits on representation of each attribute type are as follows: Frequency attribute describes the period between observations, and is coded; Count attributes are represented by values which are sequential, incrementing numbers - representations are always of the Increment or Count type; Entity attributes describe the subject of the data set - they can be coded or represented in any other form; Non-Observational Time attributes must have a representation which contains a time; Identity attributes may be coded or uncoded, but must be represented by a scheme which refers to the identifiers of external entities. Any given instance of an attribute may only have a true value for this set of attributes, and if so may not have a true value for the isTimeFormat attribute.
    /// </para>
    /// <para>
    /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
    /// </para>
    /// </summary>
    public partial class AttributeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AttachmentGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AttachmentMeasureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isTimeFormatDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isEntityAttributeDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isNonObservationalTimeAttributeDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isCountAttributeDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isFrequencyAttributeDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isIdentityAttributeDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AttributeType(XElement xe) { return XTypedServices.ToXTypedElement<AttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AttributeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AttachmentGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AttachmentMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// AttributeType describes the structure of attributes declared in the key family. If the codelist attribute is not used, then the attribute is uncoded. You may use the TextFormat element to specify constraints on the value of the uncoded attribute. The concept attribute contains the name of a concept. The codelist attribute supplies the id value of a codelist. The attachmentLevel attribute indicates the level to which the attribute is attached in time-series formats (GenericData, CompactData, and UtilityData formats). The assignmentStatus attribute indicates whether a value must be provided for the attribute when sending documentation along with the data. The AttachmentGroup element is included only when the attribute is attached at the Group level, to indicate which declared group or groups the attribute may be attached to. For each such group, an AttachmentGroup element should appear, with the content of the element being the name of the group. The AttachmentMeasure element is similar, indicating for cross-sectional formats which declared measure or measures the attribute attached at the observation level may be attached to. The isTimeFormat attribute indicates that the attribute represents the concept of time format (typically a mandatory series-level attribute with a codelist representation taken from ISO 8601). For key families not used to structure cross-sectional formats, this element may be ommitted. Each such element contains the name of the declared measure. The attributes crossSectionalAttachDataSet, crossSectionalAttachGroup, crossSectionalAttachSection, and crossSectionalAttachObservation indicate what the attachment level or levels are for cross-sectional data formats, and may be ommitted if the key family will not be used to structure them. A value of "true" indicates that it is permissible to provide a value for the attribute at the specified level within the structure. Note that all groups in cross-sectional formats are replaced by a generic group which has any values for time and frequency, and allows any group-level attributes to be attached to it. An attribute which is an Entity attribute has a true value for the isEntityAttribute attribute - you may have either one Entity dimension or one Entity Attribute in a key family; a non-observational time  has a true value for isNonObservationalTimeAttribute; and a Count attribute has a true value for the isCountAttribute attribute. The attributes  isFrequencyAttribute and isEntityAttribute are mutually exclusive - that is, only one of them may have a "true" value for any instance of the Attribute element. The definitions and limits on representation of each attribute type are as follows: Frequency attribute describes the period between observations, and is coded; Count attributes are represented by values which are sequential, incrementing numbers - representations are always of the Increment or Count type; Entity attributes describe the subject of the data set - they can be coded or represented in any other form; Non-Observational Time attributes must have a representation which contains a time; Identity attributes may be coded or uncoded, but must be represented by a scheme which refers to the identifiers of external entities. Any given instance of an attribute may only have a true value for this set of attributes, and if so may not have a true value for the isTimeFormat attribute.
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public AttributeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public TextFormatType TextFormat {
            get {
                XElement x = this.GetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public IList<string> AttachmentGroup {
            get {
                if ((this.AttachmentGroupField == null)) {
                    this.AttachmentGroupField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AttachmentGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.AttachmentGroupField;
            }
            set {
                if ((value == null)) {
                    this.AttachmentGroupField = null;
                }
                else {
                    if ((this.AttachmentGroupField == null)) {
                        this.AttachmentGroupField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AttachmentGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AttachmentGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public IList<string> AttachmentMeasure {
            get {
                if ((this.AttachmentMeasureField == null)) {
                    this.AttachmentMeasureField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AttachmentMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.AttachmentMeasureField;
            }
            set {
                if ((value == null)) {
                    this.AttachmentMeasureField = null;
                }
                else {
                    if ((this.AttachmentMeasureField == null)) {
                        this.AttachmentMeasureField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AttachmentMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AttachmentMeasureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string conceptRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelist {
            get {
                XAttribute x = this.Attribute(XName.Get("codelist", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelist", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelistVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("codelistVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelistVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelistAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("codelistAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelistAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string attachmentLevel {
            get {
                XAttribute x = this.Attribute(XName.Get("attachmentLevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("attachmentLevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string assignmentStatus {
            get {
                XAttribute x = this.Attribute(XName.Get("assignmentStatus", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("assignmentStatus", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isTimeFormat {
            get {
                XAttribute x = this.Attribute(XName.Get("isTimeFormat", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isTimeFormatDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isTimeFormat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachDataSet {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachDataSet", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachDataSet", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachGroup {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachGroup", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachGroup", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachSection {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachSection", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachSection", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> crossSectionalAttachObservation {
            get {
                XAttribute x = this.Attribute(XName.Get("crossSectionalAttachObservation", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("crossSectionalAttachObservation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isEntityAttribute {
            get {
                XAttribute x = this.Attribute(XName.Get("isEntityAttribute", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isEntityAttributeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isEntityAttribute", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isNonObservationalTimeAttribute {
            get {
                XAttribute x = this.Attribute(XName.Get("isNonObservationalTimeAttribute", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isNonObservationalTimeAttributeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isNonObservationalTimeAttribute", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isCountAttribute {
            get {
                XAttribute x = this.Attribute(XName.Get("isCountAttribute", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isCountAttributeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isCountAttribute", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isFrequencyAttribute {
            get {
                XAttribute x = this.Attribute(XName.Get("isFrequencyAttribute", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isFrequencyAttributeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isFrequencyAttribute", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isIdentityAttribute {
            get {
                XAttribute x = this.Attribute(XName.Get("isIdentityAttribute", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isIdentityAttributeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isIdentityAttribute", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttributeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("AttachmentGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("AttachmentMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class AttachmentLevelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DataSet",
                        "Group",
                        "Series",
                        "Observation"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AttachmentLevelType() {
        }
    }
    
    public sealed class AssignmentStatusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Mandatory",
                        "Conditional"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AssignmentStatusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// PrimaryMeasureType describes the observation values for all presentations of the data, except those cross-sectional formats which have multiple measures (for which a set of cross-sectional measures are used instead). The concept attribute points to the unique concept represented by the measure. The PrimaryMeasure  is conventionally associated with the OBS-VALUE concept. The TextFormat element allows description of the contents of the observation value. The codelist attribute references a codelist if the observation value is coded. If this attribute is used, then codelistAgencyID must contain the ID of the maintenance agency of the referenced codelist. The codelistVersion attribute may be specified - if not, then the version of the referenced codelist is assumed to be "1.0".
    /// </para>
    /// <para>
    /// Regular expression: (TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class PrimaryMeasureType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PrimaryMeasureType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryMeasureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PrimaryMeasureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// PrimaryMeasureType describes the observation values for all presentations of the data, except those cross-sectional formats which have multiple measures (for which a set of cross-sectional measures are used instead). The concept attribute points to the unique concept represented by the measure. The PrimaryMeasure  is conventionally associated with the OBS-VALUE concept. The TextFormat element allows description of the contents of the observation value. The codelist attribute references a codelist if the observation value is coded. If this attribute is used, then codelistAgencyID must contain the ID of the maintenance agency of the referenced codelist. The codelistVersion attribute may be specified - if not, then the version of the referenced codelist is assumed to be "1.0".
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public PrimaryMeasureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public TextFormatType TextFormat {
            get {
                XElement x = this.GetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string conceptRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelist {
            get {
                XAttribute x = this.Attribute(XName.Get("codelist", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelist", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelistVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("codelistVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelistVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelistAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("codelistAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelistAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PrimaryMeasureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PrimaryMeasureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CrossSectionalMeasureType describes the observation values for multiple-measure cross-sectional data formats. For non-cross sectional key families, it is not necesary to specify any cross-sectional measures.The concept attribute points to the unique concept represented by the measure. The measureDimension attribute contains the concept name of the measure dimension. The code attribute contains the value of its corresponding code in the codelist used to represent the measure dimension. A CrossSectionalMeasure must be declared for each code in the codelist used to represent the measure dimension - these will replace the primary measure for multiple-measure cross-sectional data formats.The TextFormat element allows description of the contents of the observation value. The codelist attribute references a codelist if the observation value is coded. If this attribute is used, then codelistAgencyID must contain the ID of the maintenance agency of the referenced codelist. The codelistVersion attribute may be specified - if not, then the version of the referenced codelist is assumed to be "1.0".
    /// </para>
    /// <para>
    /// Regular expression: (TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class CrossSectionalMeasureType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CrossSectionalMeasureType(XElement xe) { return XTypedServices.ToXTypedElement<CrossSectionalMeasureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CrossSectionalMeasureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CrossSectionalMeasureType describes the observation values for multiple-measure cross-sectional data formats. For non-cross sectional key families, it is not necesary to specify any cross-sectional measures.The concept attribute points to the unique concept represented by the measure. The measureDimension attribute contains the concept name of the measure dimension. The code attribute contains the value of its corresponding code in the codelist used to represent the measure dimension. A CrossSectionalMeasure must be declared for each code in the codelist used to represent the measure dimension - these will replace the primary measure for multiple-measure cross-sectional data formats.The TextFormat element allows description of the contents of the observation value. The codelist attribute references a codelist if the observation value is coded. If this attribute is used, then codelistAgencyID must contain the ID of the maintenance agency of the referenced codelist. The codelistVersion attribute may be specified - if not, then the version of the referenced codelist is assumed to be "1.0".
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public CrossSectionalMeasureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public TextFormatType TextFormat {
            get {
                XElement x = this.GetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string conceptRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeRef {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelist {
            get {
                XAttribute x = this.Attribute(XName.Get("codelist", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelist", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelistVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("codelistVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelistVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string codelistAgency {
            get {
                XAttribute x = this.Attribute(XName.Get("codelistAgency", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("codelistAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string measureDimension {
            get {
                XAttribute x = this.Attribute(XName.Get("measureDimension", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("measureDimension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string code {
            get {
                XAttribute x = this.Attribute(XName.Get("code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CrossSectionalMeasureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrossSectionalMeasureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// StructureSetsType contains one or more structure sets.
    /// </para>
    /// <para>
    /// Regular expression: (StructureSet+)
    /// </para>
    /// </summary>
    public partial class StructureSetsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StructureSetType> StructureSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StructureSetsType(XElement xe) { return XTypedServices.ToXTypedElement<StructureSetsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructureSetsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// StructureSetsType contains one or more structure sets.
        /// </para>
        /// <para>
        /// Regular expression: (StructureSet+)
        /// </para>
        /// </summary>
        public StructureSetsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (StructureSet+)
        /// </para>
        /// </summary>
        public IList<StructureSetType> StructureSet {
            get {
                if ((this.StructureSetField == null)) {
                    this.StructureSetField = new XTypedList<StructureSetType>(this, LinqToXsdTypeManager.Instance, XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.StructureSetField;
            }
            set {
                if ((value == null)) {
                    this.StructureSetField = null;
                }
                else {
                    if ((this.StructureSetField == null)) {
                        this.StructureSetField = XTypedList<StructureSetType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<StructureSetType>(this.StructureSetField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructureSetsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructureSetsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(StructureSetType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// StructureSetType describes the relationships between two or more key families and/or metadata structure definitions, including the mapping between category schemes and concept schemes, to provide for the mapping of representations. This can include inheritance and extension of properties, or total or partial equivalencies. It also includes mapping of concepts existing in metadata structure definitions to those used in key families, and vice-versa. A human-readable name is provided in the Name element, which may include several language-specific variants. A longer human-readable description may also be provided, in the Description element, which may also have language-specific variants provided. The Annotations element may be used to provide annotations. The StructureRefs element references all of the key families and/or metadata structure definitions included in the Structure Set - these must be provided if a StructureMap element is used, but is not required if the structure set is only used to provide codelist mappings, concept mappings, or category mappings. The StructureMap element indicates which components in the included data and metadata structures are equivalent; CodelistMap indicates which codes map to other codelists. CategorySchemeMap indicates which categories in one scheme map to those in another scheme. ConceptSchemeMap indicates which concepts in one scheme map to those in another scheme. OrganisationSchemeMap describes how one organisation scheme maps to another. The id attribute takes an id which is unique to all structure sets maintained by the agency specified in the agency attribute. version specifies a version number (by default "1.0"). The uri attribute holds a URL where a valid SDMX Structure messgae can be found which provides full details of the StructureSet, and it must be used if the isExternalReference attribute has a value of true. The urn attribute holds a valid SDMX Registry URN as described in the SDMX Registry specification. A true value in the isFinal attribute indicates that the contents of the structure set may not be changed without versioning. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
    /// </para>
    /// </summary>
    public partial class StructureSetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StructureSetType(XElement xe) { return XTypedServices.ToXTypedElement<StructureSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructureSetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("RelatedStructures", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("StructureMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CodelistMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategorySchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ConceptSchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("OrganisationSchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// StructureSetType describes the relationships between two or more key families and/or metadata structure definitions, including the mapping between category schemes and concept schemes, to provide for the mapping of representations. This can include inheritance and extension of properties, or total or partial equivalencies. It also includes mapping of concepts existing in metadata structure definitions to those used in key families, and vice-versa. A human-readable name is provided in the Name element, which may include several language-specific variants. A longer human-readable description may also be provided, in the Description element, which may also have language-specific variants provided. The Annotations element may be used to provide annotations. The StructureRefs element references all of the key families and/or metadata structure definitions included in the Structure Set - these must be provided if a StructureMap element is used, but is not required if the structure set is only used to provide codelist mappings, concept mappings, or category mappings. The StructureMap element indicates which components in the included data and metadata structures are equivalent; CodelistMap indicates which codes map to other codelists. CategorySchemeMap indicates which categories in one scheme map to those in another scheme. ConceptSchemeMap indicates which concepts in one scheme map to those in another scheme. OrganisationSchemeMap describes how one organisation scheme maps to another. The id attribute takes an id which is unique to all structure sets maintained by the agency specified in the agency attribute. version specifies a version number (by default "1.0"). The uri attribute holds a URL where a valid SDMX Structure messgae can be found which provides full details of the StructureSet, and it must be used if the isExternalReference attribute has a value of true. The urn attribute holds a valid SDMX Registry URN as described in the SDMX Registry specification. A true value in the isFinal attribute indicates that the contents of the structure set may not be changed without versioning. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
        /// </para>
        /// </summary>
        public StructureSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
        /// </para>
        /// </summary>
        public RelatedStructuresType RelatedStructures {
            get {
                XElement x = this.GetElement(XName.Get("RelatedStructures", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((RelatedStructuresType)(x));
            }
            set {
                this.SetElement(XName.Get("RelatedStructures", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
        /// </para>
        /// </summary>
        public StructureMapType StructureMap {
            get {
                XElement x = this.GetElement(XName.Get("StructureMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((StructureMapType)(x));
            }
            set {
                this.SetElement(XName.Get("StructureMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
        /// </para>
        /// </summary>
        public CodelistMapType CodelistMap {
            get {
                XElement x = this.GetElement(XName.Get("CodelistMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((CodelistMapType)(x));
            }
            set {
                this.SetElement(XName.Get("CodelistMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
        /// </para>
        /// </summary>
        public CategorySchemeMapType CategorySchemeMap {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((CategorySchemeMapType)(x));
            }
            set {
                this.SetElement(XName.Get("CategorySchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
        /// </para>
        /// </summary>
        public ConceptSchemeMapType ConceptSchemeMap {
            get {
                XElement x = this.GetElement(XName.Get("ConceptSchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((ConceptSchemeMapType)(x));
            }
            set {
                this.SetElement(XName.Get("ConceptSchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
        /// </para>
        /// </summary>
        public OrganisationSchemeMapType OrganisationSchemeMap {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((OrganisationSchemeMapType)(x));
            }
            set {
                this.SetElement(XName.Get("OrganisationSchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, RelatedStructures?, StructureMap?, CodelistMap?, CategorySchemeMap?, ConceptSchemeMap?, OrganisationSchemeMap?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructureSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructureSetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("RelatedStructures", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(RelatedStructuresType));
            localElementDictionary.Add(XName.Get("StructureMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(StructureMapType));
            localElementDictionary.Add(XName.Get("CodelistMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CodelistMapType));
            localElementDictionary.Add(XName.Get("CategorySchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategorySchemeMapType));
            localElementDictionary.Add(XName.Get("ConceptSchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ConceptSchemeMapType));
            localElementDictionary.Add(XName.Get("OrganisationSchemeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(OrganisationSchemeMapType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RelatedStructuresType includes references to key families (in the KeyFamilyRef element) and/or metadata structure definitions (In the MetadataStructureRef element). Any mapped CategorySchemes, ConceptSchemes, or Organisation Schemes should also be referenced. HierarchicalCodelistRef allows for HierarchicalCodelists which describe relationships between pertinent codelists to be referenced and included in the structure set - this must be used if the CodelistMap in the StructureSet refers to any hierarchical codelists.
    /// </para>
    /// <para>
    /// Regular expression: (KeyFamilyRef*, MetadataStructureRef*, ConceptSchemeRef*, CategorySchemeRef*, OrganisationSchemeRef*, HierarchicalCodelistRef*)
    /// </para>
    /// </summary>
    public partial class RelatedStructuresType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<KeyFamilyRefType> KeyFamilyRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataStructureRefType> MetadataStructureRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConceptSchemeRefType> ConceptSchemeRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategorySchemeRefType> CategorySchemeRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationSchemeRefType> OrganisationSchemeRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HierarchicalCodelistRefType> HierarchicalCodelistRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RelatedStructuresType(XElement xe) { return XTypedServices.ToXTypedElement<RelatedStructuresType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RelatedStructuresType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// RelatedStructuresType includes references to key families (in the KeyFamilyRef element) and/or metadata structure definitions (In the MetadataStructureRef element). Any mapped CategorySchemes, ConceptSchemes, or Organisation Schemes should also be referenced. HierarchicalCodelistRef allows for HierarchicalCodelists which describe relationships between pertinent codelists to be referenced and included in the structure set - this must be used if the CodelistMap in the StructureSet refers to any hierarchical codelists.
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef*, MetadataStructureRef*, ConceptSchemeRef*, CategorySchemeRef*, OrganisationSchemeRef*, HierarchicalCodelistRef*)
        /// </para>
        /// </summary>
        public RelatedStructuresType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef*, MetadataStructureRef*, ConceptSchemeRef*, CategorySchemeRef*, OrganisationSchemeRef*, HierarchicalCodelistRef*)
        /// </para>
        /// </summary>
        public IList<KeyFamilyRefType> KeyFamilyRef {
            get {
                if ((this.KeyFamilyRefField == null)) {
                    this.KeyFamilyRefField = new XTypedList<KeyFamilyRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.KeyFamilyRefField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyRefField = null;
                }
                else {
                    if ((this.KeyFamilyRefField == null)) {
                        this.KeyFamilyRefField = XTypedList<KeyFamilyRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<KeyFamilyRefType>(this.KeyFamilyRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef*, MetadataStructureRef*, ConceptSchemeRef*, CategorySchemeRef*, OrganisationSchemeRef*, HierarchicalCodelistRef*)
        /// </para>
        /// </summary>
        public IList<MetadataStructureRefType> MetadataStructureRef {
            get {
                if ((this.MetadataStructureRefField == null)) {
                    this.MetadataStructureRefField = new XTypedList<MetadataStructureRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.MetadataStructureRefField;
            }
            set {
                if ((value == null)) {
                    this.MetadataStructureRefField = null;
                }
                else {
                    if ((this.MetadataStructureRefField == null)) {
                        this.MetadataStructureRefField = XTypedList<MetadataStructureRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<MetadataStructureRefType>(this.MetadataStructureRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef*, MetadataStructureRef*, ConceptSchemeRef*, CategorySchemeRef*, OrganisationSchemeRef*, HierarchicalCodelistRef*)
        /// </para>
        /// </summary>
        public IList<ConceptSchemeRefType> ConceptSchemeRef {
            get {
                if ((this.ConceptSchemeRefField == null)) {
                    this.ConceptSchemeRefField = new XTypedList<ConceptSchemeRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ConceptSchemeRefField;
            }
            set {
                if ((value == null)) {
                    this.ConceptSchemeRefField = null;
                }
                else {
                    if ((this.ConceptSchemeRefField == null)) {
                        this.ConceptSchemeRefField = XTypedList<ConceptSchemeRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ConceptSchemeRefType>(this.ConceptSchemeRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef*, MetadataStructureRef*, ConceptSchemeRef*, CategorySchemeRef*, OrganisationSchemeRef*, HierarchicalCodelistRef*)
        /// </para>
        /// </summary>
        public IList<CategorySchemeRefType> CategorySchemeRef {
            get {
                if ((this.CategorySchemeRefField == null)) {
                    this.CategorySchemeRefField = new XTypedList<CategorySchemeRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CategorySchemeRefField;
            }
            set {
                if ((value == null)) {
                    this.CategorySchemeRefField = null;
                }
                else {
                    if ((this.CategorySchemeRefField == null)) {
                        this.CategorySchemeRefField = XTypedList<CategorySchemeRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CategorySchemeRefType>(this.CategorySchemeRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef*, MetadataStructureRef*, ConceptSchemeRef*, CategorySchemeRef*, OrganisationSchemeRef*, HierarchicalCodelistRef*)
        /// </para>
        /// </summary>
        public IList<OrganisationSchemeRefType> OrganisationSchemeRef {
            get {
                if ((this.OrganisationSchemeRefField == null)) {
                    this.OrganisationSchemeRefField = new XTypedList<OrganisationSchemeRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.OrganisationSchemeRefField;
            }
            set {
                if ((value == null)) {
                    this.OrganisationSchemeRefField = null;
                }
                else {
                    if ((this.OrganisationSchemeRefField == null)) {
                        this.OrganisationSchemeRefField = XTypedList<OrganisationSchemeRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<OrganisationSchemeRefType>(this.OrganisationSchemeRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamilyRef*, MetadataStructureRef*, ConceptSchemeRef*, CategorySchemeRef*, OrganisationSchemeRef*, HierarchicalCodelistRef*)
        /// </para>
        /// </summary>
        public IList<HierarchicalCodelistRefType> HierarchicalCodelistRef {
            get {
                if ((this.HierarchicalCodelistRefField == null)) {
                    this.HierarchicalCodelistRefField = new XTypedList<HierarchicalCodelistRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.HierarchicalCodelistRefField;
            }
            set {
                if ((value == null)) {
                    this.HierarchicalCodelistRefField = null;
                }
                else {
                    if ((this.HierarchicalCodelistRefField == null)) {
                        this.HierarchicalCodelistRefField = XTypedList<HierarchicalCodelistRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<HierarchicalCodelistRefType>(this.HierarchicalCodelistRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RelatedStructuresType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RelatedStructuresType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(KeyFamilyRefType));
            localElementDictionary.Add(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataStructureRefType));
            localElementDictionary.Add(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ConceptSchemeRefType));
            localElementDictionary.Add(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategorySchemeRefType));
            localElementDictionary.Add(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(OrganisationSchemeRefType));
            localElementDictionary.Add(XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(HierarchicalCodelistRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CategorySchemeRef allows for references to specific category schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
    /// </para>
    /// </summary>
    public partial class CategorySchemeRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategorySchemeRefType(XElement xe) { return XTypedServices.ToXTypedElement<CategorySchemeRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategorySchemeRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CategorySchemeRef allows for references to specific category schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
        /// </para>
        /// </summary>
        public CategorySchemeRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
        /// </para>
        /// </summary>
        public string CategorySchemeID {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "CategorySchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategorySchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategorySchemeRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ConceptSchemeRef allows for references to specific concept schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. 
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
    /// </para>
    /// </summary>
    public partial class ConceptSchemeRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptSchemeRefType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptSchemeRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptSchemeRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ConceptSchemeRef allows for references to specific concept schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. 
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
        /// </para>
        /// </summary>
        public ConceptSchemeRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string ConceptSchemeID {
            get {
                XElement x = this.GetElement(XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "ConceptSchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptSchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptSchemeRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// OrganisationSchemeRef allows for references to specific organisation schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
    /// </para>
    /// </summary>
    public partial class OrganisationSchemeRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrganisationSchemeRefType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationSchemeRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationSchemeRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// OrganisationSchemeRef allows for references to specific organisation schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
        /// </para>
        /// </summary>
        public OrganisationSchemeRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "OrganisationSchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrganisationSchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationSchemeRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// HierarchicalCodelistRef allows for references to specific hierarchical codelists. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
    /// </para>
    /// </summary>
    public partial class HierarchicalCodelistRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HierarchicalCodelistRefType(XElement xe) { return XTypedServices.ToXTypedElement<HierarchicalCodelistRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HierarchicalCodelistRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// HierarchicalCodelistRef allows for references to specific hierarchical codelists. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
        /// </para>
        /// </summary>
        public HierarchicalCodelistRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
        /// </para>
        /// </summary>
        public string HierarchicalCodelistID {
            get {
                XElement x = this.GetElement(XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "HierarchicalCodelistID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HierarchicalCodelistRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HierarchicalCodelistRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// StructureMapType describes the structure of the mapping of components between a referenced key family or metadata structure and a target key family or metadata structure. Components include any dimension, attribute, or reported concept. The Name element is used to provide a human-readable name for the component map; the Description element is used to provide a longer human-readable description. Both of these elements may be provided in multiple, language-specific variations. The StructureMapType provides for Annotations with the Annotations element. Either a KeyFamilyRef or a MetadataStructureRef must be provided; and also a TargetKeyFamilyRef or a TargetMetadataStructureRef. A series of map components are then specified using the ComponentMap element, each of which specifies the equivalence of a concept in the referenced straucture definition to one in the target structure definition. If the isExtension attribute has a value of true, then the target structure definition inherits all properties of the referenced structure definition, and may have additional components. Note that this attribute may only be set to true if the component map has as a referenced structure definition and a target structure definition either two key families or two metadata structure definition. You cannot inherit concepts between the two type of structure definitions using this mechanism. The id attribute allows for an id to be assigned to the component map - it must be unique within its StructureSet.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, (KeyFamilyRef | MetadataStructureRef), (TargetKeyFamilyRef | TargetMetadataStructureRef), ComponentMap*, Annotations?)
    /// </para>
    /// </summary>
    public partial class StructureMapType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ComponentMapType> ComponentMapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator StructureMapType(XElement xe) { return XTypedServices.ToXTypedElement<StructureMapType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructureMapType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// StructureMapType describes the structure of the mapping of components between a referenced key family or metadata structure and a target key family or metadata structure. Components include any dimension, attribute, or reported concept. The Name element is used to provide a human-readable name for the component map; the Description element is used to provide a longer human-readable description. Both of these elements may be provided in multiple, language-specific variations. The StructureMapType provides for Annotations with the Annotations element. Either a KeyFamilyRef or a MetadataStructureRef must be provided; and also a TargetKeyFamilyRef or a TargetMetadataStructureRef. A series of map components are then specified using the ComponentMap element, each of which specifies the equivalence of a concept in the referenced straucture definition to one in the target structure definition. If the isExtension attribute has a value of true, then the target structure definition inherits all properties of the referenced structure definition, and may have additional components. Note that this attribute may only be set to true if the component map has as a referenced structure definition and a target structure definition either two key families or two metadata structure definition. You cannot inherit concepts between the two type of structure definitions using this mechanism. The id attribute allows for an id to be assigned to the component map - it must be unique within its StructureSet.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (KeyFamilyRef | MetadataStructureRef), (TargetKeyFamilyRef | TargetMetadataStructureRef), ComponentMap*, Annotations?)
        /// </para>
        /// </summary>
        public StructureMapType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (KeyFamilyRef | MetadataStructureRef), (TargetKeyFamilyRef | TargetMetadataStructureRef), ComponentMap*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (KeyFamilyRef | MetadataStructureRef), (TargetKeyFamilyRef | TargetMetadataStructureRef), ComponentMap*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (KeyFamilyRef | MetadataStructureRef), (TargetKeyFamilyRef | TargetMetadataStructureRef), ComponentMap*, Annotations?)
        /// </para>
        /// </summary>
        public KeyFamilyRefType KeyFamilyRef {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((KeyFamilyRefType)(x));
            }
            set {
                this.SetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (KeyFamilyRef | MetadataStructureRef), (TargetKeyFamilyRef | TargetMetadataStructureRef), ComponentMap*, Annotations?)
        /// </para>
        /// </summary>
        public MetadataStructureRefType MetadataStructureRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((MetadataStructureRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (KeyFamilyRef | MetadataStructureRef), (TargetKeyFamilyRef | TargetMetadataStructureRef), ComponentMap*, Annotations?)
        /// </para>
        /// </summary>
        public KeyFamilyRefType TargetKeyFamilyRef {
            get {
                XElement x = this.GetElement(XName.Get("TargetKeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((KeyFamilyRefType)(x));
            }
            set {
                this.SetElement(XName.Get("TargetKeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (KeyFamilyRef | MetadataStructureRef), (TargetKeyFamilyRef | TargetMetadataStructureRef), ComponentMap*, Annotations?)
        /// </para>
        /// </summary>
        public MetadataStructureRefType TargetMetadataStructureRef {
            get {
                XElement x = this.GetElement(XName.Get("TargetMetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((MetadataStructureRefType)(x));
            }
            set {
                this.SetElement(XName.Get("TargetMetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (KeyFamilyRef | MetadataStructureRef), (TargetKeyFamilyRef | TargetMetadataStructureRef), ComponentMap*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ComponentMapType> ComponentMap {
            get {
                if ((this.ComponentMapField == null)) {
                    this.ComponentMapField = new XTypedList<ComponentMapType>(this, LinqToXsdTypeManager.Instance, XName.Get("ComponentMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ComponentMapField;
            }
            set {
                if ((value == null)) {
                    this.ComponentMapField = null;
                }
                else {
                    if ((this.ComponentMapField == null)) {
                        this.ComponentMapField = XTypedList<ComponentMapType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ComponentMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ComponentMapType>(this.ComponentMapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (KeyFamilyRef | MetadataStructureRef), (TargetKeyFamilyRef | TargetMetadataStructureRef), ComponentMap*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExtension {
            get {
                XAttribute x = this.Attribute(XName.Get("isExtension", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExtension", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructureMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructureMapType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(KeyFamilyRefType));
            localElementDictionary.Add(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataStructureRefType));
            localElementDictionary.Add(XName.Get("TargetKeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(KeyFamilyRefType));
            localElementDictionary.Add(XName.Get("TargetMetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataStructureRefType));
            localElementDictionary.Add(XName.Get("ComponentMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ComponentMapType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// CodelistMap allows the description of how the codes in a codelist are represented in a target codelist or associated hierarchical codelist. A human-readable Name is provided, and a longer, human-readable description may be provided as well, in the Name and Description elements respectively. These may be supplied in multiple, language-specific versions.CodelistRef references the codelist or hierarchical codelist being mapped; TargetCodelistRef indicates the codelist to which it will be mapped. CodeMap is the element which indicates the equivalence of codes in the referenced codelist to those in the target codelist. Any codes not mapped are assumed to lack equivalence. The CodelistMap may be annotated using the Annotations element. The id attribute is used to assign an identifier which is unique within the StructureSet for all CodelistMaps.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, (CodelistRef | HierarchicalCodelistRef), (TargetCodelistRef | TargetHierarchicalCodelistRef), CodeMap+, Annotations?)
    /// </para>
    /// </summary>
    public partial class CodelistMapType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodeMapType> CodeMapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CodelistMapType(XElement xe) { return XTypedServices.ToXTypedElement<CodelistMapType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodelistMapType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// CodelistMap allows the description of how the codes in a codelist are represented in a target codelist or associated hierarchical codelist. A human-readable Name is provided, and a longer, human-readable description may be provided as well, in the Name and Description elements respectively. These may be supplied in multiple, language-specific versions.CodelistRef references the codelist or hierarchical codelist being mapped; TargetCodelistRef indicates the codelist to which it will be mapped. CodeMap is the element which indicates the equivalence of codes in the referenced codelist to those in the target codelist. Any codes not mapped are assumed to lack equivalence. The CodelistMap may be annotated using the Annotations element. The id attribute is used to assign an identifier which is unique within the StructureSet for all CodelistMaps.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (CodelistRef | HierarchicalCodelistRef), (TargetCodelistRef | TargetHierarchicalCodelistRef), CodeMap+, Annotations?)
        /// </para>
        /// </summary>
        public CodelistMapType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (CodelistRef | HierarchicalCodelistRef), (TargetCodelistRef | TargetHierarchicalCodelistRef), CodeMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (CodelistRef | HierarchicalCodelistRef), (TargetCodelistRef | TargetHierarchicalCodelistRef), CodeMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (CodelistRef | HierarchicalCodelistRef), (TargetCodelistRef | TargetHierarchicalCodelistRef), CodeMap+, Annotations?)
        /// </para>
        /// </summary>
        public CodelistRefType CodelistRef {
            get {
                XElement x = this.GetElement(XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((CodelistRefType)(x));
            }
            set {
                this.SetElement(XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (CodelistRef | HierarchicalCodelistRef), (TargetCodelistRef | TargetHierarchicalCodelistRef), CodeMap+, Annotations?)
        /// </para>
        /// </summary>
        public HierarchicalCodelistRefType HierarchicalCodelistRef {
            get {
                XElement x = this.GetElement(XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((HierarchicalCodelistRefType)(x));
            }
            set {
                this.SetElement(XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (CodelistRef | HierarchicalCodelistRef), (TargetCodelistRef | TargetHierarchicalCodelistRef), CodeMap+, Annotations?)
        /// </para>
        /// </summary>
        public CodelistRefType TargetCodelistRef {
            get {
                XElement x = this.GetElement(XName.Get("TargetCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((CodelistRefType)(x));
            }
            set {
                this.SetElement(XName.Get("TargetCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (CodelistRef | HierarchicalCodelistRef), (TargetCodelistRef | TargetHierarchicalCodelistRef), CodeMap+, Annotations?)
        /// </para>
        /// </summary>
        public HierarchicalCodelistRefType TargetHierarchicalCodelistRef {
            get {
                XElement x = this.GetElement(XName.Get("TargetHierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((HierarchicalCodelistRefType)(x));
            }
            set {
                this.SetElement(XName.Get("TargetHierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (CodelistRef | HierarchicalCodelistRef), (TargetCodelistRef | TargetHierarchicalCodelistRef), CodeMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<CodeMapType> CodeMap {
            get {
                if ((this.CodeMapField == null)) {
                    this.CodeMapField = new XTypedList<CodeMapType>(this, LinqToXsdTypeManager.Instance, XName.Get("CodeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CodeMapField;
            }
            set {
                if ((value == null)) {
                    this.CodeMapField = null;
                }
                else {
                    if ((this.CodeMapField == null)) {
                        this.CodeMapField = XTypedList<CodeMapType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CodeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CodeMapType>(this.CodeMapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, (CodelistRef | HierarchicalCodelistRef), (TargetCodelistRef | TargetHierarchicalCodelistRef), CodeMap+, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodelistMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodelistMapType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CodelistRefType));
            localElementDictionary.Add(XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(HierarchicalCodelistRefType));
            localElementDictionary.Add(XName.Get("TargetCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CodelistRefType));
            localElementDictionary.Add(XName.Get("TargetHierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(HierarchicalCodelistRefType));
            localElementDictionary.Add(XName.Get("CodeMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CodeMapType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// CodeMap describes the equivalence of the codes in the referenced codelist or hierarchical codelist indicated in the CodelistRef element of the containing CodelistMap to those in the referenced TargetCodelist in the containing CodelistMap. The CodeAlias attribute is used to assign an alias code to the equivalence for querying the structure set.
    /// </para>
    /// <para>
    /// Regular expression: (MapCodeRef, MapTargetCodeRef)
    /// </para>
    /// </summary>
    public partial class CodeMapType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodeMapType(XElement xe) { return XTypedServices.ToXTypedElement<CodeMapType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeMapType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MapCodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("MapTargetCodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CodeMap describes the equivalence of the codes in the referenced codelist or hierarchical codelist indicated in the CodelistRef element of the containing CodelistMap to those in the referenced TargetCodelist in the containing CodelistMap. The CodeAlias attribute is used to assign an alias code to the equivalence for querying the structure set.
        /// </para>
        /// <para>
        /// Regular expression: (MapCodeRef, MapTargetCodeRef)
        /// </para>
        /// </summary>
        public CodeMapType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MapCodeRef, MapTargetCodeRef)
        /// </para>
        /// </summary>
        public string MapCodeRef {
            get {
                XElement x = this.GetElement(XName.Get("MapCodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MapCodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "MapCodeRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MapCodeRef, MapTargetCodeRef)
        /// </para>
        /// </summary>
        public string MapTargetCodeRef {
            get {
                XElement x = this.GetElement(XName.Get("MapTargetCodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MapTargetCodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "MapTargetCodeRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CodeAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("CodeAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CodeAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodeMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeMapType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MapCodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("MapTargetCodeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ComponentMapType describes how a component (that is, dimension, attribute, or reported concept) in a referenced metadata structure definition or key family maps to a component in a referenced  "target" metadata structure definition or key family. The MapConceptRef contains the id of the concept in the metadata structure definition or key family referenced in the KeyFamilyRef or MetadataStructureRef element of the containing ComponentMap element. The MapTargetConceptRef contains the id of the concept in the metadata structure definition or key family referenced in the TargetKeyFamilyRef or TargetMetadataStructureRef element of the containing ComponentMap element. The RepresentationMapRef element contains a reference to the CodelistMap which describes how the coded representation of the referenced component maps to the coded representation of the target component. If the target component has an uncoded representation, then ToTextFormat is used to describe the un-coded representation to which the code of the referenced component should be transformed. The ToValueType element tells you whether the value, name, or description of the source value should be used in the resulting text field. The componentAlias attribute assigns a new ID to the relationship between these components. Note that of three components from different key families and/or metadata structure definitions are all equivalent, the two component maps can share a single alias. Note also that for metadata concepts which are represented not by codelists but rather by other types of item schemes (OrganisationSchemes or CategorySchemes), these can also be referenced using the RepresentationMapRef element. The preferredLanguage attribute specifies the language to use when translating coded values into their names or descriptions, if available, in the same form as xml:lang.
    /// </para>
    /// <para>
    /// Regular expression: (MapConceptRef, MapTargetConceptRef, (RepresentationMapRef | (ToTextFormat, ToValueType)))
    /// </para>
    /// </summary>
    public partial class ComponentMapType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string preferredLanguageDefaultValue = "en";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ComponentMapType(XElement xe) { return XTypedServices.ToXTypedElement<ComponentMapType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ComponentMapType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// ComponentMapType describes how a component (that is, dimension, attribute, or reported concept) in a referenced metadata structure definition or key family maps to a component in a referenced  "target" metadata structure definition or key family. The MapConceptRef contains the id of the concept in the metadata structure definition or key family referenced in the KeyFamilyRef or MetadataStructureRef element of the containing ComponentMap element. The MapTargetConceptRef contains the id of the concept in the metadata structure definition or key family referenced in the TargetKeyFamilyRef or TargetMetadataStructureRef element of the containing ComponentMap element. The RepresentationMapRef element contains a reference to the CodelistMap which describes how the coded representation of the referenced component maps to the coded representation of the target component. If the target component has an uncoded representation, then ToTextFormat is used to describe the un-coded representation to which the code of the referenced component should be transformed. The ToValueType element tells you whether the value, name, or description of the source value should be used in the resulting text field. The componentAlias attribute assigns a new ID to the relationship between these components. Note that of three components from different key families and/or metadata structure definitions are all equivalent, the two component maps can share a single alias. Note also that for metadata concepts which are represented not by codelists but rather by other types of item schemes (OrganisationSchemes or CategorySchemes), these can also be referenced using the RepresentationMapRef element. The preferredLanguage attribute specifies the language to use when translating coded values into their names or descriptions, if available, in the same form as xml:lang.
        /// </para>
        /// <para>
        /// Regular expression: (MapConceptRef, MapTargetConceptRef, (RepresentationMapRef | (ToTextFormat, ToValueType)))
        /// </para>
        /// </summary>
        public ComponentMapType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MapConceptRef, MapTargetConceptRef, (RepresentationMapRef | (ToTextFormat, ToValueType)))
        /// </para>
        /// </summary>
        public string MapConceptRef {
            get {
                XElement x = this.GetElement(XName.Get("MapConceptRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MapConceptRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "MapConceptRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MapConceptRef, MapTargetConceptRef, (RepresentationMapRef | (ToTextFormat, ToValueType)))
        /// </para>
        /// </summary>
        public string MapTargetConceptRef {
            get {
                XElement x = this.GetElement(XName.Get("MapTargetConceptRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MapTargetConceptRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "MapTargetConceptRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (MapConceptRef, MapTargetConceptRef, (RepresentationMapRef | (ToTextFormat, ToValueType)))
        /// </para>
        /// </summary>
        public RepresentationMapRefType RepresentationMapRef {
            get {
                XElement x = this.GetElement(XName.Get("RepresentationMapRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((RepresentationMapRefType)(x));
            }
            set {
                this.SetElement(XName.Get("RepresentationMapRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (MapConceptRef, MapTargetConceptRef, (RepresentationMapRef | (ToTextFormat, ToValueType)))
        /// </para>
        /// </summary>
        public TextFormatType ToTextFormat {
            get {
                XElement x = this.GetElement(XName.Get("ToTextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((TextFormatType)(x));
            }
            set {
                this.SetElement(XName.Get("ToTextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (MapConceptRef, MapTargetConceptRef, (RepresentationMapRef | (ToTextFormat, ToValueType)))
        /// </para>
        /// </summary>
        public string ToValueType {
            get {
                XElement x = this.GetElement(XName.Get("ToValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ToValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "ToValueType", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ToValueTypeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string componentAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("componentAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("componentAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string preferredLanguage {
            get {
                XAttribute x = this.Attribute(XName.Get("preferredLanguage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype, preferredLanguageDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("preferredLanguage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ComponentMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ComponentMapType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MapConceptRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("MapTargetConceptRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("RepresentationMapRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(RepresentationMapRefType));
            localElementDictionary.Add(XName.Get("ToTextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TextFormatType));
            localElementDictionary.Add(XName.Get("ToValueType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ToValueTypeType provides an enumeration of available text-equivalents for translation of coded values into textual formats. 
    /// </para>
    /// </summary>
    public sealed class ToValueTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Value",
                        "Name",
                        "Description"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ToValueTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// RepresentationMapRefType describes the structure of a reference to a codelist, category scheme, or organisation scheme map. RepresentationMapAgencyID takes the id value of the maintenance agency of the codelist, category scheme, or organisation scheme map; RepresentationMapID takes the id attribute value of the codelist, category scheme, or organisation scheme map.
    /// </para>
    /// <para>
    /// Regular expression: (RepresentationMapAgencyID, RepresentationMapID)
    /// </para>
    /// </summary>
    public partial class RepresentationMapRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string representationTypeDefaultValue = "Codelist";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RepresentationMapRefType(XElement xe) { return XTypedServices.ToXTypedElement<RepresentationMapRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RepresentationMapRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RepresentationMapAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("RepresentationMapID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// RepresentationMapRefType describes the structure of a reference to a codelist, category scheme, or organisation scheme map. RepresentationMapAgencyID takes the id value of the maintenance agency of the codelist, category scheme, or organisation scheme map; RepresentationMapID takes the id attribute value of the codelist, category scheme, or organisation scheme map.
        /// </para>
        /// <para>
        /// Regular expression: (RepresentationMapAgencyID, RepresentationMapID)
        /// </para>
        /// </summary>
        public RepresentationMapRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RepresentationMapAgencyID, RepresentationMapID)
        /// </para>
        /// </summary>
        public string RepresentationMapAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("RepresentationMapAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RepresentationMapAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "RepresentationMapAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RepresentationMapAgencyID, RepresentationMapID)
        /// </para>
        /// </summary>
        public string RepresentationMapID {
            get {
                XElement x = this.GetElement(XName.Get("RepresentationMapID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RepresentationMapID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "RepresentationMapID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string representationType {
            get {
                XAttribute x = this.Attribute(XName.Get("representationType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, representationTypeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("representationType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RepresentationMapRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RepresentationMapRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RepresentationMapAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("RepresentationMapID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RepresentationTypeType provides an enumeration of representation scheme types useful for the mapping of reference metadata concepts to one another.
    /// </para>
    /// </summary>
    public sealed class RepresentationTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Codelist",
                        "CategoryScheme",
                        "OrganisationScheme"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private RepresentationTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// CategorySchemeMap provides for the mapping of categories in one scheme against those in another. It requires a human-readable Name, and can have a longer human-readable Description, both of which can be supplied in multiple, parallel-language form. It may be annotated using Annotations. The id attribute carries a unique ID for CategorySchemeMaps within the StructureSet. CategorySchemeRef identifies the source CategoryScheme; TargetCategorySchemeRef identifies the target CategoryScheme.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, CategorySchemeRef, TargetCategorySchemeRef, CategoryMap+, Annotations?)
    /// </para>
    /// </summary>
    public partial class CategorySchemeMapType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryMapType> CategoryMapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategorySchemeMapType(XElement xe) { return XTypedServices.ToXTypedElement<CategorySchemeMapType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategorySchemeMapType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TargetCategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("CategoryMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CategorySchemeMap provides for the mapping of categories in one scheme against those in another. It requires a human-readable Name, and can have a longer human-readable Description, both of which can be supplied in multiple, parallel-language form. It may be annotated using Annotations. The id attribute carries a unique ID for CategorySchemeMaps within the StructureSet. CategorySchemeRef identifies the source CategoryScheme; TargetCategorySchemeRef identifies the target CategoryScheme.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CategorySchemeRef, TargetCategorySchemeRef, CategoryMap+, Annotations?)
        /// </para>
        /// </summary>
        public CategorySchemeMapType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CategorySchemeRef, TargetCategorySchemeRef, CategoryMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CategorySchemeRef, TargetCategorySchemeRef, CategoryMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CategorySchemeRef, TargetCategorySchemeRef, CategoryMap+, Annotations?)
        /// </para>
        /// </summary>
        public CategorySchemeRefType CategorySchemeRef {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((CategorySchemeRefType)(x));
            }
            set {
                this.SetElement(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CategorySchemeRef, TargetCategorySchemeRef, CategoryMap+, Annotations?)
        /// </para>
        /// </summary>
        public CategorySchemeRefType TargetCategorySchemeRef {
            get {
                XElement x = this.GetElement(XName.Get("TargetCategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((CategorySchemeRefType)(x));
            }
            set {
                this.SetElement(XName.Get("TargetCategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CategorySchemeRef, TargetCategorySchemeRef, CategoryMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<CategoryMapType> CategoryMap {
            get {
                if ((this.CategoryMapField == null)) {
                    this.CategoryMapField = new XTypedList<CategoryMapType>(this, LinqToXsdTypeManager.Instance, XName.Get("CategoryMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CategoryMapField;
            }
            set {
                if ((value == null)) {
                    this.CategoryMapField = null;
                }
                else {
                    if ((this.CategoryMapField == null)) {
                        this.CategoryMapField = XTypedList<CategoryMapType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CategoryMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CategoryMapType>(this.CategoryMapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, CategorySchemeRef, TargetCategorySchemeRef, CategoryMap+, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategorySchemeMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategorySchemeMapType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategorySchemeRefType));
            localElementDictionary.Add(XName.Get("TargetCategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategorySchemeRefType));
            localElementDictionary.Add(XName.Get("CategoryMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategoryMapType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CategoryMap allows for the mapping of a category in one scheme against a category in another, target scheme. The categoryAlias attribute allows for an alias to be assigned to the mapping for searching across the set of mapped categories. Note that the Category IDs are recursive, and can therefore describe a path through a category scheme.
    /// </para>
    /// <para>
    /// Regular expression: (CategoryID, TargetCategoryID)
    /// </para>
    /// </summary>
    public partial class CategoryMapType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategoryMapType(XElement xe) { return XTypedServices.ToXTypedElement<CategoryMapType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategoryMapType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TargetCategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// CategoryMap allows for the mapping of a category in one scheme against a category in another, target scheme. The categoryAlias attribute allows for an alias to be assigned to the mapping for searching across the set of mapped categories. Note that the Category IDs are recursive, and can therefore describe a path through a category scheme.
        /// </para>
        /// <para>
        /// Regular expression: (CategoryID, TargetCategoryID)
        /// </para>
        /// </summary>
        public CategoryMapType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CategoryID, TargetCategoryID)
        /// </para>
        /// </summary>
        public CategoryIDType CategoryID {
            get {
                XElement x = this.GetElement(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((CategoryIDType)(x));
            }
            set {
                this.SetElement(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CategoryID, TargetCategoryID)
        /// </para>
        /// </summary>
        public CategoryIDType TargetCategoryID {
            get {
                XElement x = this.GetElement(XName.Get("TargetCategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((CategoryIDType)(x));
            }
            set {
                this.SetElement(XName.Get("TargetCategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string categoryAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("categoryAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("categoryAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategoryMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategoryMapType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategoryIDType));
            localElementDictionary.Add(XName.Get("TargetCategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategoryIDType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ConceptSchemeMap provides for the mapping of concepts in one scheme against those in another. It requires a human-readable Name, and can have a longer human-readable Description, both of which can be supplied in multiple, parallel-language form. It may be annotated using Annotations. The id attribute carries a unique ID for ConceptSchemeMaps within the StructureSet. ConceptSchemeRef identifies the source ConceptScheme; TargetConceptSchemeRef identifies the target ConceptScheme.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, ConceptSchemeRef, TargetConceptSchemeRef, ConceptMap+, Annotations?)
    /// </para>
    /// </summary>
    public partial class ConceptSchemeMapType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConceptMapType> ConceptMapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptSchemeMapType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptSchemeMapType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptSchemeMapType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TargetConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ConceptMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ConceptSchemeMap provides for the mapping of concepts in one scheme against those in another. It requires a human-readable Name, and can have a longer human-readable Description, both of which can be supplied in multiple, parallel-language form. It may be annotated using Annotations. The id attribute carries a unique ID for ConceptSchemeMaps within the StructureSet. ConceptSchemeRef identifies the source ConceptScheme; TargetConceptSchemeRef identifies the target ConceptScheme.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ConceptSchemeRef, TargetConceptSchemeRef, ConceptMap+, Annotations?)
        /// </para>
        /// </summary>
        public ConceptSchemeMapType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ConceptSchemeRef, TargetConceptSchemeRef, ConceptMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ConceptSchemeRef, TargetConceptSchemeRef, ConceptMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ConceptSchemeRef, TargetConceptSchemeRef, ConceptMap+, Annotations?)
        /// </para>
        /// </summary>
        public ConceptSchemeRefType ConceptSchemeRef {
            get {
                XElement x = this.GetElement(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((ConceptSchemeRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ConceptSchemeRef, TargetConceptSchemeRef, ConceptMap+, Annotations?)
        /// </para>
        /// </summary>
        public ConceptSchemeRefType TargetConceptSchemeRef {
            get {
                XElement x = this.GetElement(XName.Get("TargetConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((ConceptSchemeRefType)(x));
            }
            set {
                this.SetElement(XName.Get("TargetConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ConceptSchemeRef, TargetConceptSchemeRef, ConceptMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<ConceptMapType> ConceptMap {
            get {
                if ((this.ConceptMapField == null)) {
                    this.ConceptMapField = new XTypedList<ConceptMapType>(this, LinqToXsdTypeManager.Instance, XName.Get("ConceptMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ConceptMapField;
            }
            set {
                if ((value == null)) {
                    this.ConceptMapField = null;
                }
                else {
                    if ((this.ConceptMapField == null)) {
                        this.ConceptMapField = XTypedList<ConceptMapType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ConceptMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ConceptMapType>(this.ConceptMapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ConceptSchemeRef, TargetConceptSchemeRef, ConceptMap+, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptSchemeMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptSchemeMapType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ConceptSchemeRefType));
            localElementDictionary.Add(XName.Get("TargetConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ConceptSchemeRefType));
            localElementDictionary.Add(XName.Get("ConceptMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ConceptMapType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ConceptMap allows for the mapping of a concept in one scheme against a concept in another, target scheme. The conceptAlias attribute allows for an alias to be assigned to the mapping for searching across the set of mapped concepts.
    /// </para>
    /// <para>
    /// Regular expression: (ConceptID, TargetConceptID)
    /// </para>
    /// </summary>
    public partial class ConceptMapType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptMapType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptMapType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptMapType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ConceptID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TargetConceptID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ConceptMap allows for the mapping of a concept in one scheme against a concept in another, target scheme. The conceptAlias attribute allows for an alias to be assigned to the mapping for searching across the set of mapped concepts.
        /// </para>
        /// <para>
        /// Regular expression: (ConceptID, TargetConceptID)
        /// </para>
        /// </summary>
        public ConceptMapType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ConceptID, TargetConceptID)
        /// </para>
        /// </summary>
        public string ConceptID {
            get {
                XElement x = this.GetElement(XName.Get("ConceptID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ConceptID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "ConceptID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ConceptID, TargetConceptID)
        /// </para>
        /// </summary>
        public string TargetConceptID {
            get {
                XElement x = this.GetElement(XName.Get("TargetConceptID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TargetConceptID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "TargetConceptID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptMapType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ConceptID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("TargetConceptID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// OrganisationSchemeMap provides for the mapping of Organisations in one scheme against those in another. It requires a human-readable Name, and can have a longer human-readable Description, both of which can be supplied in multiple, parallel-language form. It may be annotated using Annotations. The id attribute carries a unique ID for OrganisationSchemeMaps within the StructureSet. OrganisationSchemeRef identifies the source OrganisationScheme; TargetOrganisationSchemeRef identifies the target OrganisationScheme.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, OrganisationSchemeRef, TargetOrganisationSchemeRef, OrganisationMap+, Annotations?)
    /// </para>
    /// </summary>
    public partial class OrganisationSchemeMapType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationMapType> OrganisationMapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrganisationSchemeMapType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationSchemeMapType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationSchemeMapType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TargetOrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("OrganisationMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// OrganisationSchemeMap provides for the mapping of Organisations in one scheme against those in another. It requires a human-readable Name, and can have a longer human-readable Description, both of which can be supplied in multiple, parallel-language form. It may be annotated using Annotations. The id attribute carries a unique ID for OrganisationSchemeMaps within the StructureSet. OrganisationSchemeRef identifies the source OrganisationScheme; TargetOrganisationSchemeRef identifies the target OrganisationScheme.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, OrganisationSchemeRef, TargetOrganisationSchemeRef, OrganisationMap+, Annotations?)
        /// </para>
        /// </summary>
        public OrganisationSchemeMapType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, OrganisationSchemeRef, TargetOrganisationSchemeRef, OrganisationMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, OrganisationSchemeRef, TargetOrganisationSchemeRef, OrganisationMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, OrganisationSchemeRef, TargetOrganisationSchemeRef, OrganisationMap+, Annotations?)
        /// </para>
        /// </summary>
        public OrganisationSchemeRefType OrganisationSchemeRef {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((OrganisationSchemeRefType)(x));
            }
            set {
                this.SetElement(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, OrganisationSchemeRef, TargetOrganisationSchemeRef, OrganisationMap+, Annotations?)
        /// </para>
        /// </summary>
        public OrganisationSchemeRefType TargetOrganisationSchemeRef {
            get {
                XElement x = this.GetElement(XName.Get("TargetOrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((OrganisationSchemeRefType)(x));
            }
            set {
                this.SetElement(XName.Get("TargetOrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, OrganisationSchemeRef, TargetOrganisationSchemeRef, OrganisationMap+, Annotations?)
        /// </para>
        /// </summary>
        public IList<OrganisationMapType> OrganisationMap {
            get {
                if ((this.OrganisationMapField == null)) {
                    this.OrganisationMapField = new XTypedList<OrganisationMapType>(this, LinqToXsdTypeManager.Instance, XName.Get("OrganisationMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.OrganisationMapField;
            }
            set {
                if ((value == null)) {
                    this.OrganisationMapField = null;
                }
                else {
                    if ((this.OrganisationMapField == null)) {
                        this.OrganisationMapField = XTypedList<OrganisationMapType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OrganisationMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<OrganisationMapType>(this.OrganisationMapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, OrganisationSchemeRef, TargetOrganisationSchemeRef, OrganisationMap+, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrganisationSchemeMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationSchemeMapType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(OrganisationSchemeRefType));
            localElementDictionary.Add(XName.Get("TargetOrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(OrganisationSchemeRefType));
            localElementDictionary.Add(XName.Get("OrganisationMap", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(OrganisationMapType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// OrganisationMap allows for the mapping of an organisation in one scheme against an organisation in another, target scheme. The organisationAlias attribute allows for an alias to be assigned to the mapping for searching across the set of mapped organisations.
    /// </para>
    /// <para>
    /// Regular expression: (OrganisationID, TargetOrganisationID)
    /// </para>
    /// </summary>
    public partial class OrganisationMapType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrganisationMapType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationMapType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationMapType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OrganisationID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TargetOrganisationID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// OrganisationMap allows for the mapping of an organisation in one scheme against an organisation in another, target scheme. The organisationAlias attribute allows for an alias to be assigned to the mapping for searching across the set of mapped organisations.
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationID, TargetOrganisationID)
        /// </para>
        /// </summary>
        public OrganisationMapType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationID, TargetOrganisationID)
        /// </para>
        /// </summary>
        public string OrganisationID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "OrganisationID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationID, TargetOrganisationID)
        /// </para>
        /// </summary>
        public string TargetOrganisationID {
            get {
                XElement x = this.GetElement(XName.Get("TargetOrganisationID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TargetOrganisationID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "TargetOrganisationID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string organisationAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("organisationAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("organisationAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrganisationMapType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationMapType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("OrganisationID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("TargetOrganisationID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ReportingTaxonomiesType holds on or more ReportingTaxonomy elements.
    /// </para>
    /// <para>
    /// Regular expression: (ReportingTaxonomy+)
    /// </para>
    /// </summary>
    public partial class ReportingTaxonomiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReportingTaxonomyType> ReportingTaxonomyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReportingTaxonomiesType(XElement xe) { return XTypedServices.ToXTypedElement<ReportingTaxonomiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReportingTaxonomiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportingTaxonomy", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ReportingTaxonomiesType holds on or more ReportingTaxonomy elements.
        /// </para>
        /// <para>
        /// Regular expression: (ReportingTaxonomy+)
        /// </para>
        /// </summary>
        public ReportingTaxonomiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReportingTaxonomy+)
        /// </para>
        /// </summary>
        public IList<ReportingTaxonomyType> ReportingTaxonomy {
            get {
                if ((this.ReportingTaxonomyField == null)) {
                    this.ReportingTaxonomyField = new XTypedList<ReportingTaxonomyType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReportingTaxonomy", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ReportingTaxonomyField;
            }
            set {
                if ((value == null)) {
                    this.ReportingTaxonomyField = null;
                }
                else {
                    if ((this.ReportingTaxonomyField == null)) {
                        this.ReportingTaxonomyField = XTypedList<ReportingTaxonomyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReportingTaxonomy", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ReportingTaxonomyType>(this.ReportingTaxonomyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReportingTaxonomiesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReportingTaxonomiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ReportingTaxonomy", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ReportingTaxonomyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ReportingTaxonomyType groups data flows and/or metadata flows for the purposes of assembling "reports" made up of data from disparate sources. It is a maintainable object, and thus has a mandatory human-readable Name and optional Description containing a longer human-readable description. Annotations may be included. All of these fields may be provided in multiple, parallel languages. The id attribute assignes a unique ID to the Reporting Taxonomy, version provides a version number, uri contains a URL where the SDMX-ML expression of the Reporting taxonomy can be found, and must be included if the isExternalReference attribute has a value of true. The urn attribute holds the value of a valid SDMX Registry URN as per the SDMX Registry specification. The isExternalReference attribute, if set to true, indicates that the uri attribute points to an external location for the ReportingTaxonomy, with only the id, Name element, and version supplied in addition. The agencyID attribute holds the ID of the Reporting Taxonomies' maintenance agency. Also, if the Reporting Taxonomy is final, the isFinal attribute must`have a value of true - otherwise, it will be assumed to be non-final. (All production versions must be made final - that is, unchangeable without versioning.) The sub-element Category may be used to group dataflows and metadataflows into useful sub-packages. DataflowRef and MetadataFlowRef are references to the flows which make up the reporting taxonomy at the top level. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
    /// </para>
    /// </summary>
    public partial class ReportingTaxonomyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataflowRefType> DataflowRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataflowRefType> MetadataflowRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReportingTaxonomyType(XElement xe) { return XTypedServices.ToXTypedElement<ReportingTaxonomyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReportingTaxonomyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ReportingTaxonomyType groups data flows and/or metadata flows for the purposes of assembling "reports" made up of data from disparate sources. It is a maintainable object, and thus has a mandatory human-readable Name and optional Description containing a longer human-readable description. Annotations may be included. All of these fields may be provided in multiple, parallel languages. The id attribute assignes a unique ID to the Reporting Taxonomy, version provides a version number, uri contains a URL where the SDMX-ML expression of the Reporting taxonomy can be found, and must be included if the isExternalReference attribute has a value of true. The urn attribute holds the value of a valid SDMX Registry URN as per the SDMX Registry specification. The isExternalReference attribute, if set to true, indicates that the uri attribute points to an external location for the ReportingTaxonomy, with only the id, Name element, and version supplied in addition. The agencyID attribute holds the ID of the Reporting Taxonomies' maintenance agency. Also, if the Reporting Taxonomy is final, the isFinal attribute must`have a value of true - otherwise, it will be assumed to be non-final. (All production versions must be made final - that is, unchangeable without versioning.) The sub-element Category may be used to group dataflows and metadataflows into useful sub-packages. DataflowRef and MetadataFlowRef are references to the flows which make up the reporting taxonomy at the top level. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public ReportingTaxonomyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<DataflowRefType> DataflowRef {
            get {
                if ((this.DataflowRefField == null)) {
                    this.DataflowRefField = new XTypedList<DataflowRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DataflowRefField;
            }
            set {
                if ((value == null)) {
                    this.DataflowRefField = null;
                }
                else {
                    if ((this.DataflowRefField == null)) {
                        this.DataflowRefField = XTypedList<DataflowRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<DataflowRefType>(this.DataflowRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<MetadataflowRefType> MetadataflowRef {
            get {
                if ((this.MetadataflowRefField == null)) {
                    this.MetadataflowRefField = new XTypedList<MetadataflowRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.MetadataflowRefField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowRefField = null;
                }
                else {
                    if ((this.MetadataflowRefField == null)) {
                        this.MetadataflowRefField = XTypedList<MetadataflowRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<MetadataflowRefType>(this.MetadataflowRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public IList<CategoryType> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.CategoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, DataflowRef*, MetadataflowRef*, Category*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReportingTaxonomyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReportingTaxonomyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The MetadataflowRef type structures a reference to a metadataflow definition. This requires that ID are provided for a pre-existing Agency and Metadataflow Definition in the registry. The Version element may be used to specify the version of the indicated dataflow. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific URN as an alternate means of identification. When used in a response document of any type, the URN must always be provided. At a minimum, either the URN element or AgencyID, MetadataflowID, and (optionally) version must be supplied. Datasource may be used to specify a datasource. Constraint can be used to provide constraints associated with the metadataflow.  Note that this is similar, but not identical to the MetadataflowRefType found in the SDMX-ML registry namespace package - it lacks references to the datasource and the constraints.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?)
    /// </para>
    /// </summary>
    public partial class MetadataflowRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataflowRefType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataflowRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataflowRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// The MetadataflowRef type structures a reference to a metadataflow definition. This requires that ID are provided for a pre-existing Agency and Metadataflow Definition in the registry. The Version element may be used to specify the version of the indicated dataflow. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific URN as an alternate means of identification. When used in a response document of any type, the URN must always be provided. At a minimum, either the URN element or AgencyID, MetadataflowID, and (optionally) version must be supplied. Datasource may be used to specify a datasource. Constraint can be used to provide constraints associated with the metadataflow.  Note that this is similar, but not identical to the MetadataflowRefType found in the SDMX-ML registry namespace package - it lacks references to the datasource and the constraints.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?)
        /// </para>
        /// </summary>
        public MetadataflowRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?)
        /// </para>
        /// </summary>
        public string MetadataflowID {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "MetadataflowID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataflowRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataflowRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The DataflowRef type structures a reference to a dataflow definition. This requires that ID are provided for a pre-existing Agency and Dataflow Definition in the registry. The Version element may be used to specify the version of the indicated dataflow. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific URN as an alternate means of identification. At a minimum, either the URN element or AgencyID, DataflowID, and (optionally) version must be supplied. When used in a response document of any type, the URN must always be provided. Datasource may be used to specify a datasource. Constraints can be used to specify constraints associated with the dataflow. Note that this is similar, but not identical to the DataflowRefType found in the SDMX-ML registry namespace package - it lacks references to the datasource and the constraints.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?)
    /// </para>
    /// </summary>
    public partial class DataflowRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataflowRefType(XElement xe) { return XTypedServices.ToXTypedElement<DataflowRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataflowRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// The DataflowRef type structures a reference to a dataflow definition. This requires that ID are provided for a pre-existing Agency and Dataflow Definition in the registry. The Version element may be used to specify the version of the indicated dataflow. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific URN as an alternate means of identification. At a minimum, either the URN element or AgencyID, DataflowID, and (optionally) version must be supplied. When used in a response document of any type, the URN must always be provided. Datasource may be used to specify a datasource. Constraints can be used to specify constraints associated with the dataflow. Note that this is similar, but not identical to the DataflowRefType found in the SDMX-ML registry namespace package - it lacks references to the datasource and the constraints.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?)
        /// </para>
        /// </summary>
        public DataflowRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?)
        /// </para>
        /// </summary>
        public string DataflowID {
            get {
                XElement x = this.GetElement(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "DataflowID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataflowRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataflowRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ProcessesType describes a list of Processes.
    /// </para>
    /// <para>
    /// Regular expression: (Process+)
    /// </para>
    /// </summary>
    public partial class ProcessesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProcessType> ProcessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ProcessesType(XElement xe) { return XTypedServices.ToXTypedElement<ProcessesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProcessesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Process", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ProcessesType describes a list of Processes.
        /// </para>
        /// <para>
        /// Regular expression: (Process+)
        /// </para>
        /// </summary>
        public ProcessesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Process+)
        /// </para>
        /// </summary>
        public IList<ProcessType> Process {
            get {
                if ((this.ProcessField == null)) {
                    this.ProcessField = new XTypedList<ProcessType>(this, LinqToXsdTypeManager.Instance, XName.Get("Process", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ProcessField;
            }
            set {
                if ((value == null)) {
                    this.ProcessField = null;
                }
                else {
                    if ((this.ProcessField == null)) {
                        this.ProcessField = XTypedList<ProcessType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Process", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ProcessType>(this.ProcessField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProcessesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProcessesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Process", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ProcessType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ProcessType generically describes a statistical process. In this version of the SDMX Technical Specifications, it is not meant to support process automation, but serves as a description of how processes occur. The primary use for this structural mechanism is the attachment of reference metadata regarding statistical processing. A process has a human-readable Name, which may be provided in multiple, parallel-language versions. It also has an optional human-readable Description, which also may be provided with multiple, parallel-language versions. The Annotations element allows for it to be annotated. The id attribute takes a unique id within the set of processes maintained by the agency identified in the agencyID attribute. The version attribute indicated the version of teh process description. The uri value is a URL where a complete description of the Process may be found; the urn attribute takes the valid registry URN of the Process, as described in the SDMX Registry Specification. If isFinal is set to true, the process description cannot be changed without versioning. If isExternalReference is true, then only the id, agency, Name, and uri (or URN) need be supplied - all other fields are assumed to be found in a valid SDMX Structure message found at the uri attribute location. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, ProcessStep*, Annotations?)
    /// </para>
    /// </summary>
    public partial class ProcessType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProcessStepType> ProcessStepField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ProcessType(XElement xe) { return XTypedServices.ToXTypedElement<ProcessType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProcessType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ProcessStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ProcessType generically describes a statistical process. In this version of the SDMX Technical Specifications, it is not meant to support process automation, but serves as a description of how processes occur. The primary use for this structural mechanism is the attachment of reference metadata regarding statistical processing. A process has a human-readable Name, which may be provided in multiple, parallel-language versions. It also has an optional human-readable Description, which also may be provided with multiple, parallel-language versions. The Annotations element allows for it to be annotated. The id attribute takes a unique id within the set of processes maintained by the agency identified in the agencyID attribute. The version attribute indicated the version of teh process description. The uri value is a URL where a complete description of the Process may be found; the urn attribute takes the valid registry URN of the Process, as described in the SDMX Registry Specification. If isFinal is set to true, the process description cannot be changed without versioning. If isExternalReference is true, then only the id, agency, Name, and uri (or URN) need be supplied - all other fields are assumed to be found in a valid SDMX Structure message found at the uri attribute location. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public ProcessType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ProcessStepType> ProcessStep {
            get {
                if ((this.ProcessStepField == null)) {
                    this.ProcessStepField = new XTypedList<ProcessStepType>(this, LinqToXsdTypeManager.Instance, XName.Get("ProcessStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ProcessStepField;
            }
            set {
                if ((value == null)) {
                    this.ProcessStepField = null;
                }
                else {
                    if ((this.ProcessStepField == null)) {
                        this.ProcessStepField = XTypedList<ProcessStepType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProcessStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ProcessStepType>(this.ProcessStepField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isExternalReference {
            get {
                XAttribute x = this.Attribute(XName.Get("isExternalReference", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isExternalReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProcessType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProcessType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("ProcessStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ProcessStepType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ProcessStepType describes a single step in a statistical process. ProcessSteps may be recursive. The Input element specifies the type of object(s) which serve as inputs to the process; the Output element specifies the type of objects which are the result of the process. Computation elements describe the computations involved in the process, in any form desired by the user (these are informational rather than machine-actionable), and so may be supplied in multiple, parallel-language versions. Transitions describe the process steps to which a process is connected - that is, which processes happen next. The process step maust be given a Name, and may be given a Description. These are human-readable, and may be supplied in multiple, parallel-language versions. Annotations may be supplied. The id attribute takes the unique identifier of the process step within the parent process.
    /// </para>
    /// <para>
    /// Regular expression: (Name+, Description*, Input*, Output*, Computation*, Transition*, ProcessStep*, Annotations?)
    /// </para>
    /// </summary>
    public partial class ProcessStepType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> InputField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> OutputField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> ComputationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TransitionType> TransitionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProcessStepType> ProcessStepField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ProcessStepType(XElement xe) { return XTypedServices.ToXTypedElement<ProcessStepType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProcessStepType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Input", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Output", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Computation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Transition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("ProcessStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// ProcessStepType describes a single step in a statistical process. ProcessSteps may be recursive. The Input element specifies the type of object(s) which serve as inputs to the process; the Output element specifies the type of objects which are the result of the process. Computation elements describe the computations involved in the process, in any form desired by the user (these are informational rather than machine-actionable), and so may be supplied in multiple, parallel-language versions. Transitions describe the process steps to which a process is connected - that is, which processes happen next. The process step maust be given a Name, and may be given a Description. These are human-readable, and may be supplied in multiple, parallel-language versions. Annotations may be supplied. The id attribute takes the unique identifier of the process step within the parent process.
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Input*, Output*, Computation*, Transition*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public ProcessStepType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Input*, Output*, Computation*, Transition*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Input*, Output*, Computation*, Transition*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Input*, Output*, Computation*, Transition*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public IList<string> Input {
            get {
                if ((this.InputField == null)) {
                    this.InputField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, XName.Get("Input", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.InputField;
            }
            set {
                if ((value == null)) {
                    this.InputField = null;
                }
                else {
                    if ((this.InputField == null)) {
                        this.InputField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, value, XName.Get("Input", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.InputField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Input*, Output*, Computation*, Transition*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public IList<string> Output {
            get {
                if ((this.OutputField == null)) {
                    this.OutputField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, XName.Get("Output", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.OutputField;
            }
            set {
                if ((value == null)) {
                    this.OutputField = null;
                }
                else {
                    if ((this.OutputField == null)) {
                        this.OutputField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, value, XName.Get("Output", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.OutputField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Input*, Output*, Computation*, Transition*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Computation {
            get {
                if ((this.ComputationField == null)) {
                    this.ComputationField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Computation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ComputationField;
            }
            set {
                if ((value == null)) {
                    this.ComputationField = null;
                }
                else {
                    if ((this.ComputationField == null)) {
                        this.ComputationField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Computation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.ComputationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Input*, Output*, Computation*, Transition*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public IList<TransitionType> Transition {
            get {
                if ((this.TransitionField == null)) {
                    this.TransitionField = new XTypedList<TransitionType>(this, LinqToXsdTypeManager.Instance, XName.Get("Transition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.TransitionField;
            }
            set {
                if ((value == null)) {
                    this.TransitionField = null;
                }
                else {
                    if ((this.TransitionField == null)) {
                        this.TransitionField = XTypedList<TransitionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Transition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<TransitionType>(this.TransitionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Input*, Output*, Computation*, Transition*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public IList<ProcessStepType> ProcessStep {
            get {
                if ((this.ProcessStepField == null)) {
                    this.ProcessStepField = new XTypedList<ProcessStepType>(this, LinqToXsdTypeManager.Instance, XName.Get("ProcessStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                }
                return this.ProcessStepField;
            }
            set {
                if ((value == null)) {
                    this.ProcessStepField = null;
                }
                else {
                    if ((this.ProcessStepField == null)) {
                        this.ProcessStepField = XTypedList<ProcessStepType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProcessStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                    }
                    else {
                        XTypedServices.SetList<ProcessStepType>(this.ProcessStepField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name+, Description*, Input*, Output*, Computation*, Transition*, ProcessStep*, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProcessStepType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProcessStepType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Input", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Output", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Computation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Transition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(TransitionType));
            localElementDictionary.Add(XName.Get("ProcessStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(ProcessStepType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TransitionType describes the Condition and next step in a transition. The Condition text is informational, and may be supplied in multiple, parallel-language form. The TargetStep holds the id of the next step in the process if the condition is met.
    /// </para>
    /// <para>
    /// Regular expression: (TargetStep?, Condition?)
    /// </para>
    /// </summary>
    public partial class TransitionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TransitionType(XElement xe) { return XTypedServices.ToXTypedElement<TransitionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TransitionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TargetStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Condition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// TransitionType describes the Condition and next step in a transition. The Condition text is informational, and may be supplied in multiple, parallel-language form. The TargetStep holds the id of the next step in the process if the condition is met.
        /// </para>
        /// <para>
        /// Regular expression: (TargetStep?, Condition?)
        /// </para>
        /// </summary>
        public TransitionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetStep?, Condition?)
        /// </para>
        /// </summary>
        public string TargetStep {
            get {
                XElement x = this.GetElement(XName.Get("TargetStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("TargetStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value, "TargetStep", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetStep?, Condition?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType Condition {
            get {
                XElement x = this.GetElement(XName.Get("Condition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType)(x));
            }
            set {
                this.SetElement(XName.Get("Condition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TransitionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TransitionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TargetStep", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Condition", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.utility {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes and elements to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
    /// </para>
    /// </summary>
    public abstract partial class DataSetType : XTypedElement, IXMetaData {
        
         public static explicit operator DataSetType(XElement xe) {  return (DataSetType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes and elements to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public DataSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri keyFamilyURI {
            get {
                XAttribute x = this.Attribute(XName.Get("keyFamilyURI", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("keyFamilyURI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                XAttribute x = this.Attribute(XName.Get("datasetID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("datasetID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeAgencyId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeAgencyId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowAgencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowAgencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                XAttribute x = this.Attribute(XName.Get("action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingBeginDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingBeginDate", this, XName.Get("reportingBeginDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingEndDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingEndDate", this, XName.Get("reportingEndDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validFromDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFromDate", this, XName.Get("validFromDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validToDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validToDate", this, XName.Get("validToDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationYear", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("publicationYear", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationPeriod", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "publicationPeriod", this, XName.Get("publicationPeriod", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is renamed and extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class GroupType : XTypedElement, IXMetaData {
        
         public static explicit operator GroupType(XElement xe) {  return (GroupType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is renamed and extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class SeriesType : XTypedElement, IXMetaData {
        
         public static explicit operator SeriesType(XElement xe) {  return (SeriesType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public SeriesType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SeriesType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyType describes the abstract type which defines the Key element.
    /// </para>
    /// </summary>
    public abstract partial class KeyType : XTypedElement, IXMetaData {
        
         public static explicit operator KeyType(XElement xe) {  return (KeyType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// KeyType describes the abstract type which defines the Key element.
        /// </para>
        /// </summary>
        public KeyType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public abstract partial class ObsType : XTypedElement, IXMetaData {
        
         public static explicit operator ObsType(XElement xe) {  return (ObsType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public ObsType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ObsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DataSetType acts as a structural base, which is extended through the addition of attributes and elements to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
    /// </para>
    /// </summary>
    public partial class DataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DataSetType ContentField;
        
         public static explicit operator DataSet(XElement xe) { return XTypedServices.ToXTypedElement<DataSet, DataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes and elements to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public DataSet() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// DataSetType acts as a structural base, which is extended through the addition of attributes and elements to reflect the particular needs of a specific key family using the xs:extends element. Attributes are provided for describing the contents of a data or metadata set, which are particularly important for interactions with the SDMX Registry: datasetID, dataProviderSchemeAgencyID, dataProviderSchemeID, dataflowAgencyID, and dataflowID all take the IDs specified by the attribute names. The action attribute indicates whether the file is appending, replacing, or deleting. Attributes reportingBeginDate, reportingEndDate, validFromDate, and validToDate are inclusive. publicationYear holds the ISO 8601 four-digit year, and publicationPeriod specifies the period of publication of the data in terms of whatever provisioning agreements might be in force (ie, "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).
        /// </para>
        /// </summary>
        public DataSet(DataSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public DataSetType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri keyFamilyURI {
            get {
                return this.ContentField.keyFamilyURI;
            }
            set {
                this.ContentField.keyFamilyURI = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                return this.ContentField.datasetID;
            }
            set {
                this.ContentField.datasetID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                return this.ContentField.dataProviderSchemeAgencyId;
            }
            set {
                this.ContentField.dataProviderSchemeAgencyId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                return this.ContentField.dataProviderSchemeId;
            }
            set {
                this.ContentField.dataProviderSchemeId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                return this.ContentField.dataProviderID;
            }
            set {
                this.ContentField.dataProviderID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                return this.ContentField.dataflowAgencyID;
            }
            set {
                this.ContentField.dataflowAgencyID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                return this.ContentField.dataflowID;
            }
            set {
                this.ContentField.dataflowID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                return this.ContentField.action;
            }
            set {
                this.ContentField.action = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                return this.ContentField.reportingBeginDate;
            }
            set {
                this.ContentField.reportingBeginDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                return this.ContentField.reportingEndDate;
            }
            set {
                this.ContentField.reportingEndDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                return this.ContentField.validFromDate;
            }
            set {
                this.ContentField.validFromDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                return this.ContentField.validToDate;
            }
            set {
                this.ContentField.validToDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                return this.ContentField.publicationYear;
            }
            set {
                this.ContentField.publicationYear = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                return this.ContentField.publicationPeriod;
            }
            set {
                this.ContentField.publicationPeriod = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataSet Load(string xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataSet, DataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataSet Parse(string xml) {
            return XTypedServices.Parse<DataSet, DataSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DataSet(((DataSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DataSetType ContentField) {
            this.ContentField = ((DataSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// GroupType acts as a structural base, which is renamed and extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Group : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GroupType ContentField;
        
         public static explicit operator Group(XElement xe) { return XTypedServices.ToXTypedElement<Group, GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is renamed and extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Group() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// GroupType acts as a structural base, which is renamed and extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Group(GroupType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public GroupType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Group", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Group Load(string xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Group, GroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Group Parse(string xml) {
            return XTypedServices.Parse<Group, GroupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Group(((GroupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GroupType ContentField) {
            this.ContentField = ((GroupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Series : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SeriesType ContentField;
        
         public static explicit operator Series(XElement xe) { return XTypedServices.ToXTypedElement<Series, SeriesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Series() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// SeriesType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Series(SeriesType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public SeriesType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Series", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Series Load(string xmlFile) {
            return XTypedServices.Load<Series, SeriesType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Series Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Series, SeriesType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Series Parse(string xml) {
            return XTypedServices.Parse<Series, SeriesType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Series(((SeriesType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SeriesType ContentField) {
            this.ContentField = ((SeriesType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyType describes the abstract type which defines the Key element.
    /// </para>
    /// </summary>
    public partial class Key : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private KeyType ContentField;
        
         public static explicit operator Key(XElement xe) { return XTypedServices.ToXTypedElement<Key, KeyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// KeyType describes the abstract type which defines the Key element.
        /// </para>
        /// </summary>
        public Key() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// KeyType describes the abstract type which defines the Key element.
        /// </para>
        /// </summary>
        public Key(KeyType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public KeyType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Key", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Key Load(string xmlFile) {
            return XTypedServices.Load<Key, KeyType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Key Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Key, KeyType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Key Parse(string xml) {
            return XTypedServices.Parse<Key, KeyType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Key(((KeyType)(this.Content.Clone())));
        }
        
        private void SetInnerType(KeyType ContentField) {
            this.ContentField = ((KeyType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
    /// </para>
    /// </summary>
    public partial class Obs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObsType ContentField;
        
         public static explicit operator Obs(XElement xe) { return XTypedServices.ToXTypedElement<Obs, ObsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Obs() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        /// ObsType acts as a structural base, which is extended through the addition of attributes to reflect the particular needs of a specific key family using the xs:extends element.
        /// </para>
        /// </summary>
        public Obs(ObsType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ObsType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Obs", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/utility");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Obs Load(string xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Obs, ObsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Obs Parse(string xml) {
            return XTypedServices.Parse<Obs, ObsType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Obs(((ObsType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ObsType ContentField) {
            this.ContentField = ((ObsType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public DataSet DataSet {  get {return rootObject as DataSet; } }

    public Group Group {  get {return rootObject as Group; } }

    public Series Series {  get {return rootObject as Series; } }

    public Key Key {  get {return rootObject as Key; } }

    public Obs Obs {  get {return rootObject as Obs; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(DataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Series root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Key root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Obs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.query {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// The Query element is a top-level element for this namespace, which is referenced by the SDMX message envelope, or could be put inside another envelope, such as SOAP. It contains a query. The defaultLimit attribute is the suggested maximum response size in kilobytes.
    /// </para>
    /// <para>
    /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
    /// </para>
    /// </summary>
    public partial class QueryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataWhereType> DataWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataWhereType> MetadataWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<KeyFamilyWhereType> KeyFamilyWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataStructureWhereType> MetadataStructureWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistWhereType> CodelistWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConceptWhereType> ConceptWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AgencyWhereType> AgencyWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataProviderWhereType> DataProviderWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HierarchicalCodelistWhereType> HierarchicalCodelistWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReportingTaxonomyWhereType> ReportingTaxonomyWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataflowWhereType> DataflowWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataflowWhereType> MetadataflowWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StructureSetWhereType> StructureSetWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProcessWhereType> ProcessWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationSchemeWhereType> OrganisationSchemeWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConceptSchemeWhereType> ConceptSchemeWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategorySchemeWhereType> CategorySchemeWhereField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QueryType(XElement xe) { return XTypedServices.ToXTypedElement<QueryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("KeyFamilyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataStructureWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("CodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ConceptWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("AgencyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("DataProviderWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("HierarchicalCodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ReportingTaxonomyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("DataflowWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataflowWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("StructureSetWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ProcessWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("OrganisationSchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ConceptSchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("CategorySchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The Query element is a top-level element for this namespace, which is referenced by the SDMX message envelope, or could be put inside another envelope, such as SOAP. It contains a query. The defaultLimit attribute is the suggested maximum response size in kilobytes.
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public QueryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<DataWhereType> DataWhere {
            get {
                if ((this.DataWhereField == null)) {
                    this.DataWhereField = new XTypedList<DataWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DataWhereField;
            }
            set {
                if ((value == null)) {
                    this.DataWhereField = null;
                }
                else {
                    if ((this.DataWhereField == null)) {
                        this.DataWhereField = XTypedList<DataWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<DataWhereType>(this.DataWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<MetadataWhereType> MetadataWhere {
            get {
                if ((this.MetadataWhereField == null)) {
                    this.MetadataWhereField = new XTypedList<MetadataWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataWhereField;
            }
            set {
                if ((value == null)) {
                    this.MetadataWhereField = null;
                }
                else {
                    if ((this.MetadataWhereField == null)) {
                        this.MetadataWhereField = XTypedList<MetadataWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<MetadataWhereType>(this.MetadataWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<KeyFamilyWhereType> KeyFamilyWhere {
            get {
                if ((this.KeyFamilyWhereField == null)) {
                    this.KeyFamilyWhereField = new XTypedList<KeyFamilyWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("KeyFamilyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.KeyFamilyWhereField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyWhereField = null;
                }
                else {
                    if ((this.KeyFamilyWhereField == null)) {
                        this.KeyFamilyWhereField = XTypedList<KeyFamilyWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("KeyFamilyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<KeyFamilyWhereType>(this.KeyFamilyWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<MetadataStructureWhereType> MetadataStructureWhere {
            get {
                if ((this.MetadataStructureWhereField == null)) {
                    this.MetadataStructureWhereField = new XTypedList<MetadataStructureWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataStructureWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataStructureWhereField;
            }
            set {
                if ((value == null)) {
                    this.MetadataStructureWhereField = null;
                }
                else {
                    if ((this.MetadataStructureWhereField == null)) {
                        this.MetadataStructureWhereField = XTypedList<MetadataStructureWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataStructureWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<MetadataStructureWhereType>(this.MetadataStructureWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<CodelistWhereType> CodelistWhere {
            get {
                if ((this.CodelistWhereField == null)) {
                    this.CodelistWhereField = new XTypedList<CodelistWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("CodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.CodelistWhereField;
            }
            set {
                if ((value == null)) {
                    this.CodelistWhereField = null;
                }
                else {
                    if ((this.CodelistWhereField == null)) {
                        this.CodelistWhereField = XTypedList<CodelistWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CodelistWhereType>(this.CodelistWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<ConceptWhereType> ConceptWhere {
            get {
                if ((this.ConceptWhereField == null)) {
                    this.ConceptWhereField = new XTypedList<ConceptWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("ConceptWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.ConceptWhereField;
            }
            set {
                if ((value == null)) {
                    this.ConceptWhereField = null;
                }
                else {
                    if ((this.ConceptWhereField == null)) {
                        this.ConceptWhereField = XTypedList<ConceptWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ConceptWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<ConceptWhereType>(this.ConceptWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<AgencyWhereType> AgencyWhere {
            get {
                if ((this.AgencyWhereField == null)) {
                    this.AgencyWhereField = new XTypedList<AgencyWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("AgencyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AgencyWhereField;
            }
            set {
                if ((value == null)) {
                    this.AgencyWhereField = null;
                }
                else {
                    if ((this.AgencyWhereField == null)) {
                        this.AgencyWhereField = XTypedList<AgencyWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AgencyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AgencyWhereType>(this.AgencyWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<DataProviderWhereType> DataProviderWhere {
            get {
                if ((this.DataProviderWhereField == null)) {
                    this.DataProviderWhereField = new XTypedList<DataProviderWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataProviderWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DataProviderWhereField;
            }
            set {
                if ((value == null)) {
                    this.DataProviderWhereField = null;
                }
                else {
                    if ((this.DataProviderWhereField == null)) {
                        this.DataProviderWhereField = XTypedList<DataProviderWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataProviderWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<DataProviderWhereType>(this.DataProviderWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<HierarchicalCodelistWhereType> HierarchicalCodelistWhere {
            get {
                if ((this.HierarchicalCodelistWhereField == null)) {
                    this.HierarchicalCodelistWhereField = new XTypedList<HierarchicalCodelistWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("HierarchicalCodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.HierarchicalCodelistWhereField;
            }
            set {
                if ((value == null)) {
                    this.HierarchicalCodelistWhereField = null;
                }
                else {
                    if ((this.HierarchicalCodelistWhereField == null)) {
                        this.HierarchicalCodelistWhereField = XTypedList<HierarchicalCodelistWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HierarchicalCodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<HierarchicalCodelistWhereType>(this.HierarchicalCodelistWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<ReportingTaxonomyWhereType> ReportingTaxonomyWhere {
            get {
                if ((this.ReportingTaxonomyWhereField == null)) {
                    this.ReportingTaxonomyWhereField = new XTypedList<ReportingTaxonomyWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReportingTaxonomyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.ReportingTaxonomyWhereField;
            }
            set {
                if ((value == null)) {
                    this.ReportingTaxonomyWhereField = null;
                }
                else {
                    if ((this.ReportingTaxonomyWhereField == null)) {
                        this.ReportingTaxonomyWhereField = XTypedList<ReportingTaxonomyWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReportingTaxonomyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<ReportingTaxonomyWhereType>(this.ReportingTaxonomyWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<DataflowWhereType> DataflowWhere {
            get {
                if ((this.DataflowWhereField == null)) {
                    this.DataflowWhereField = new XTypedList<DataflowWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataflowWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DataflowWhereField;
            }
            set {
                if ((value == null)) {
                    this.DataflowWhereField = null;
                }
                else {
                    if ((this.DataflowWhereField == null)) {
                        this.DataflowWhereField = XTypedList<DataflowWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataflowWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<DataflowWhereType>(this.DataflowWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<MetadataflowWhereType> MetadataflowWhere {
            get {
                if ((this.MetadataflowWhereField == null)) {
                    this.MetadataflowWhereField = new XTypedList<MetadataflowWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataflowWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataflowWhereField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowWhereField = null;
                }
                else {
                    if ((this.MetadataflowWhereField == null)) {
                        this.MetadataflowWhereField = XTypedList<MetadataflowWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataflowWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<MetadataflowWhereType>(this.MetadataflowWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<StructureSetWhereType> StructureSetWhere {
            get {
                if ((this.StructureSetWhereField == null)) {
                    this.StructureSetWhereField = new XTypedList<StructureSetWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("StructureSetWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.StructureSetWhereField;
            }
            set {
                if ((value == null)) {
                    this.StructureSetWhereField = null;
                }
                else {
                    if ((this.StructureSetWhereField == null)) {
                        this.StructureSetWhereField = XTypedList<StructureSetWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("StructureSetWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<StructureSetWhereType>(this.StructureSetWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<ProcessWhereType> ProcessWhere {
            get {
                if ((this.ProcessWhereField == null)) {
                    this.ProcessWhereField = new XTypedList<ProcessWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("ProcessWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.ProcessWhereField;
            }
            set {
                if ((value == null)) {
                    this.ProcessWhereField = null;
                }
                else {
                    if ((this.ProcessWhereField == null)) {
                        this.ProcessWhereField = XTypedList<ProcessWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProcessWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<ProcessWhereType>(this.ProcessWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<OrganisationSchemeWhereType> OrganisationSchemeWhere {
            get {
                if ((this.OrganisationSchemeWhereField == null)) {
                    this.OrganisationSchemeWhereField = new XTypedList<OrganisationSchemeWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("OrganisationSchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.OrganisationSchemeWhereField;
            }
            set {
                if ((value == null)) {
                    this.OrganisationSchemeWhereField = null;
                }
                else {
                    if ((this.OrganisationSchemeWhereField == null)) {
                        this.OrganisationSchemeWhereField = XTypedList<OrganisationSchemeWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OrganisationSchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<OrganisationSchemeWhereType>(this.OrganisationSchemeWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<ConceptSchemeWhereType> ConceptSchemeWhere {
            get {
                if ((this.ConceptSchemeWhereField == null)) {
                    this.ConceptSchemeWhereField = new XTypedList<ConceptSchemeWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("ConceptSchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.ConceptSchemeWhereField;
            }
            set {
                if ((value == null)) {
                    this.ConceptSchemeWhereField = null;
                }
                else {
                    if ((this.ConceptSchemeWhereField == null)) {
                        this.ConceptSchemeWhereField = XTypedList<ConceptSchemeWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ConceptSchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<ConceptSchemeWhereType>(this.ConceptSchemeWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<CategorySchemeWhereType> CategorySchemeWhere {
            get {
                if ((this.CategorySchemeWhereField == null)) {
                    this.CategorySchemeWhereField = new XTypedList<CategorySchemeWhereType>(this, LinqToXsdTypeManager.Instance, XName.Get("CategorySchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.CategorySchemeWhereField;
            }
            set {
                if ((value == null)) {
                    this.CategorySchemeWhereField = null;
                }
                else {
                    if ((this.CategorySchemeWhereField == null)) {
                        this.CategorySchemeWhereField = XTypedList<CategorySchemeWhereType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CategorySchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CategorySchemeWhereType>(this.CategorySchemeWhereField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> defaultLimit {
            get {
                XAttribute x = this.Attribute(XName.Get("defaultLimit", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("defaultLimit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(DataWhereType));
            localElementDictionary.Add(XName.Get("MetadataWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(MetadataWhereType));
            localElementDictionary.Add(XName.Get("KeyFamilyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(KeyFamilyWhereType));
            localElementDictionary.Add(XName.Get("MetadataStructureWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(MetadataStructureWhereType));
            localElementDictionary.Add(XName.Get("CodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CodelistWhereType));
            localElementDictionary.Add(XName.Get("ConceptWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(ConceptWhereType));
            localElementDictionary.Add(XName.Get("AgencyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AgencyWhereType));
            localElementDictionary.Add(XName.Get("DataProviderWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(DataProviderWhereType));
            localElementDictionary.Add(XName.Get("HierarchicalCodelistWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(HierarchicalCodelistWhereType));
            localElementDictionary.Add(XName.Get("ReportingTaxonomyWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(ReportingTaxonomyWhereType));
            localElementDictionary.Add(XName.Get("DataflowWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(DataflowWhereType));
            localElementDictionary.Add(XName.Get("MetadataflowWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(MetadataflowWhereType));
            localElementDictionary.Add(XName.Get("StructureSetWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(StructureSetWhereType));
            localElementDictionary.Add(XName.Get("ProcessWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(ProcessWhereType));
            localElementDictionary.Add(XName.Get("OrganisationSchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrganisationSchemeWhereType));
            localElementDictionary.Add(XName.Get("ConceptSchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(ConceptSchemeWhereType));
            localElementDictionary.Add(XName.Get("CategorySchemeWhere", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CategorySchemeWhereType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The DataWhere element representes a query for data. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
    /// </para>
    /// <para>
    /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
    /// </para>
    /// </summary>
    public partial class DataWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataWhereType(XElement xe) { return XTypedServices.ToXTypedElement<DataWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The DataWhere element representes a query for data. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public DataWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string DataSet {
            get {
                XElement x = this.GetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string KeyFamily {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public DimensionType Dimension {
            get {
                XElement x = this.GetElement(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((DimensionType)(x));
            }
            set {
                this.SetElement(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public AttributeType Attribute {
            get {
                XElement x = this.GetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((AttributeType)(x));
            }
            set {
                this.SetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public CodelistType Codelist {
            get {
                XElement x = this.GetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((CodelistType)(x));
            }
            set {
                this.SetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public TimeType Time {
            get {
                XElement x = this.GetElement(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((TimeType)(x));
            }
            set {
                this.SetElement(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public CategoryType Category {
            get {
                XElement x = this.GetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((CategoryType)(x));
            }
            set {
                this.SetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string Concept {
            get {
                XElement x = this.GetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string DataProvider {
            get {
                XElement x = this.GetElement(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string Dataflow {
            get {
                XElement x = this.GetElement(XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public OrType Or {
            get {
                XElement x = this.GetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((OrType)(x));
            }
            set {
                this.SetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet | KeyFamily | Dimension | Attribute | Codelist | Time | Category | Concept | DataProvider | Dataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public AndType And {
            get {
                XElement x = this.GetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((AndType)(x));
            }
            set {
                this.SetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AttributeType));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(TimeType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The MetadataWhere element representes a query for metadata. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
    /// </para>
    /// <para>
    /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
    /// </para>
    /// </summary>
    public partial class MetadataWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataWhereType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The MetadataWhere element representes a query for metadata. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public MetadataWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string MetadataSet {
            get {
                XElement x = this.GetElement(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string MetadataStructure {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public StructureComponentType StructureComponent {
            get {
                XElement x = this.GetElement(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((StructureComponentType)(x));
            }
            set {
                this.SetElement(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public AttributeType Attribute {
            get {
                XElement x = this.GetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((AttributeType)(x));
            }
            set {
                this.SetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public CodelistType Codelist {
            get {
                XElement x = this.GetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((CodelistType)(x));
            }
            set {
                this.SetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public TimeType Time {
            get {
                XElement x = this.GetElement(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((TimeType)(x));
            }
            set {
                this.SetElement(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public CategoryType Category {
            get {
                XElement x = this.GetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((CategoryType)(x));
            }
            set {
                this.SetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string Concept {
            get {
                XElement x = this.GetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string DataProvider {
            get {
                XElement x = this.GetElement(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string Metadataflow {
            get {
                XElement x = this.GetElement(XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public OrType Or {
            get {
                XElement x = this.GetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((OrType)(x));
            }
            set {
                this.SetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (MetadataSet | MetadataStructure | StructureComponent | Attribute | Codelist | Time | Category | Concept | DataProvider | Metadataflow | Version | Or | And)
        /// </para>
        /// </summary>
        public AndType And {
            get {
                XElement x = this.GetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((AndType)(x));
            }
            set {
                this.SetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(StructureComponentType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AttributeType));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(TimeType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  For the And element, each of its immediate child elements represent clauses all of which represent conditions which must be satisfied. If children are A, B, and C, then any legitimate response will meet conditions A, B, and C.  Values are the IDs of the referenced object.
    /// </para>
    /// <para>
    /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
    /// </para>
    /// </summary>
    public partial class AndType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> KeyFamilyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataStructureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DimensionType> DimensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StructureComponentType> StructureComponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AttributeType> AttributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistType> CodelistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TimeType> TimeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ConceptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AgencyIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataProviderField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataflowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataflowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> VersionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrType> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AndType> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AndType(XElement xe) { return XTypedServices.ToXTypedElement<AndType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AndType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        ///  For the And element, each of its immediate child elements represent clauses all of which represent conditions which must be satisfied. If children are A, B, and C, then any legitimate response will meet conditions A, B, and C.  Values are the IDs of the referenced object.
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public AndType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> DataSet {
            get {
                if ((this.DataSetField == null)) {
                    this.DataSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DataSetField;
            }
            set {
                if ((value == null)) {
                    this.DataSetField = null;
                }
                else {
                    if ((this.DataSetField == null)) {
                        this.DataSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> MetadataSet {
            get {
                if ((this.MetadataSetField == null)) {
                    this.MetadataSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataSetField;
            }
            set {
                if ((value == null)) {
                    this.MetadataSetField = null;
                }
                else {
                    if ((this.MetadataSetField == null)) {
                        this.MetadataSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> KeyFamily {
            get {
                if ((this.KeyFamilyField == null)) {
                    this.KeyFamilyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.KeyFamilyField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyField = null;
                }
                else {
                    if ((this.KeyFamilyField == null)) {
                        this.KeyFamilyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.KeyFamilyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> MetadataStructure {
            get {
                if ((this.MetadataStructureField == null)) {
                    this.MetadataStructureField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataStructureField;
            }
            set {
                if ((value == null)) {
                    this.MetadataStructureField = null;
                }
                else {
                    if ((this.MetadataStructureField == null)) {
                        this.MetadataStructureField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataStructureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<DimensionType> Dimension {
            get {
                if ((this.DimensionField == null)) {
                    this.DimensionField = new XTypedList<DimensionType>(this, LinqToXsdTypeManager.Instance, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DimensionField;
            }
            set {
                if ((value == null)) {
                    this.DimensionField = null;
                }
                else {
                    if ((this.DimensionField == null)) {
                        this.DimensionField = XTypedList<DimensionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<DimensionType>(this.DimensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<StructureComponentType> StructureComponent {
            get {
                if ((this.StructureComponentField == null)) {
                    this.StructureComponentField = new XTypedList<StructureComponentType>(this, LinqToXsdTypeManager.Instance, XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.StructureComponentField;
            }
            set {
                if ((value == null)) {
                    this.StructureComponentField = null;
                }
                else {
                    if ((this.StructureComponentField == null)) {
                        this.StructureComponentField = XTypedList<StructureComponentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<StructureComponentType>(this.StructureComponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<AttributeType> Attribute {
            get {
                if ((this.AttributeField == null)) {
                    this.AttributeField = new XTypedList<AttributeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AttributeField;
            }
            set {
                if ((value == null)) {
                    this.AttributeField = null;
                }
                else {
                    if ((this.AttributeField == null)) {
                        this.AttributeField = XTypedList<AttributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AttributeType>(this.AttributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<CodelistType> Codelist {
            get {
                if ((this.CodelistField == null)) {
                    this.CodelistField = new XTypedList<CodelistType>(this, LinqToXsdTypeManager.Instance, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.CodelistField;
            }
            set {
                if ((value == null)) {
                    this.CodelistField = null;
                }
                else {
                    if ((this.CodelistField == null)) {
                        this.CodelistField = XTypedList<CodelistType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CodelistType>(this.CodelistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<TimeType> Time {
            get {
                if ((this.TimeField == null)) {
                    this.TimeField = new XTypedList<TimeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.TimeField;
            }
            set {
                if ((value == null)) {
                    this.TimeField = null;
                }
                else {
                    if ((this.TimeField == null)) {
                        this.TimeField = XTypedList<TimeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<TimeType>(this.TimeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<CategoryType> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.CategoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Concept {
            get {
                if ((this.ConceptField == null)) {
                    this.ConceptField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.ConceptField;
            }
            set {
                if ((value == null)) {
                    this.ConceptField = null;
                }
                else {
                    if ((this.ConceptField == null)) {
                        this.ConceptField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ConceptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> AgencyID {
            get {
                if ((this.AgencyIDField == null)) {
                    this.AgencyIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AgencyIDField;
            }
            set {
                if ((value == null)) {
                    this.AgencyIDField = null;
                }
                else {
                    if ((this.AgencyIDField == null)) {
                        this.AgencyIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AgencyIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> DataProvider {
            get {
                if ((this.DataProviderField == null)) {
                    this.DataProviderField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DataProviderField;
            }
            set {
                if ((value == null)) {
                    this.DataProviderField = null;
                }
                else {
                    if ((this.DataProviderField == null)) {
                        this.DataProviderField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataProviderField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Dataflow {
            get {
                if ((this.DataflowField == null)) {
                    this.DataflowField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DataflowField;
            }
            set {
                if ((value == null)) {
                    this.DataflowField = null;
                }
                else {
                    if ((this.DataflowField == null)) {
                        this.DataflowField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataflowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Metadataflow {
            get {
                if ((this.MetadataflowField == null)) {
                    this.MetadataflowField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataflowField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowField = null;
                }
                else {
                    if ((this.MetadataflowField == null)) {
                        this.MetadataflowField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataflowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Version {
            get {
                if ((this.VersionField == null)) {
                    this.VersionField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.VersionField;
            }
            set {
                if ((value == null)) {
                    this.VersionField = null;
                }
                else {
                    if ((this.VersionField == null)) {
                        this.VersionField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.VersionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<OrType> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<OrType>(this, LinqToXsdTypeManager.Instance, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<OrType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<OrType>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<AndType> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<AndType>(this, LinqToXsdTypeManager.Instance, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<AndType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AndType>(this.AndField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AndType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AndType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(StructureComponentType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AttributeType));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(TimeType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The Or element's immediate children represent clauses in the query any one of which is sufficient to satisfy the query. If these children are A,  B, and C, then any result which meets condition A, or condition B, or condition C is a match for that query. Values are the IDs of the referenced object.
    /// </para>
    /// <para>
    /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
    /// </para>
    /// </summary>
    public partial class OrType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> KeyFamilyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataStructureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DimensionType> DimensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StructureComponentType> StructureComponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AttributeType> AttributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistType> CodelistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TimeType> TimeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ConceptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AgencyIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataProviderField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataflowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataflowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> VersionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrType> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AndType> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrType(XElement xe) { return XTypedServices.ToXTypedElement<OrType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The Or element's immediate children represent clauses in the query any one of which is sufficient to satisfy the query. If these children are A,  B, and C, then any result which meets condition A, or condition B, or condition C is a match for that query. Values are the IDs of the referenced object.
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public OrType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> DataSet {
            get {
                if ((this.DataSetField == null)) {
                    this.DataSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DataSetField;
            }
            set {
                if ((value == null)) {
                    this.DataSetField = null;
                }
                else {
                    if ((this.DataSetField == null)) {
                        this.DataSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> MetadataSet {
            get {
                if ((this.MetadataSetField == null)) {
                    this.MetadataSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataSetField;
            }
            set {
                if ((value == null)) {
                    this.MetadataSetField = null;
                }
                else {
                    if ((this.MetadataSetField == null)) {
                        this.MetadataSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> KeyFamily {
            get {
                if ((this.KeyFamilyField == null)) {
                    this.KeyFamilyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.KeyFamilyField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyField = null;
                }
                else {
                    if ((this.KeyFamilyField == null)) {
                        this.KeyFamilyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.KeyFamilyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> MetadataStructure {
            get {
                if ((this.MetadataStructureField == null)) {
                    this.MetadataStructureField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataStructureField;
            }
            set {
                if ((value == null)) {
                    this.MetadataStructureField = null;
                }
                else {
                    if ((this.MetadataStructureField == null)) {
                        this.MetadataStructureField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataStructureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<DimensionType> Dimension {
            get {
                if ((this.DimensionField == null)) {
                    this.DimensionField = new XTypedList<DimensionType>(this, LinqToXsdTypeManager.Instance, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DimensionField;
            }
            set {
                if ((value == null)) {
                    this.DimensionField = null;
                }
                else {
                    if ((this.DimensionField == null)) {
                        this.DimensionField = XTypedList<DimensionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<DimensionType>(this.DimensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<StructureComponentType> StructureComponent {
            get {
                if ((this.StructureComponentField == null)) {
                    this.StructureComponentField = new XTypedList<StructureComponentType>(this, LinqToXsdTypeManager.Instance, XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.StructureComponentField;
            }
            set {
                if ((value == null)) {
                    this.StructureComponentField = null;
                }
                else {
                    if ((this.StructureComponentField == null)) {
                        this.StructureComponentField = XTypedList<StructureComponentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<StructureComponentType>(this.StructureComponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<AttributeType> Attribute {
            get {
                if ((this.AttributeField == null)) {
                    this.AttributeField = new XTypedList<AttributeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AttributeField;
            }
            set {
                if ((value == null)) {
                    this.AttributeField = null;
                }
                else {
                    if ((this.AttributeField == null)) {
                        this.AttributeField = XTypedList<AttributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AttributeType>(this.AttributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<CodelistType> Codelist {
            get {
                if ((this.CodelistField == null)) {
                    this.CodelistField = new XTypedList<CodelistType>(this, LinqToXsdTypeManager.Instance, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.CodelistField;
            }
            set {
                if ((value == null)) {
                    this.CodelistField = null;
                }
                else {
                    if ((this.CodelistField == null)) {
                        this.CodelistField = XTypedList<CodelistType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CodelistType>(this.CodelistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<TimeType> Time {
            get {
                if ((this.TimeField == null)) {
                    this.TimeField = new XTypedList<TimeType>(this, LinqToXsdTypeManager.Instance, XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.TimeField;
            }
            set {
                if ((value == null)) {
                    this.TimeField = null;
                }
                else {
                    if ((this.TimeField == null)) {
                        this.TimeField = XTypedList<TimeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<TimeType>(this.TimeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<CategoryType> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.CategoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Concept {
            get {
                if ((this.ConceptField == null)) {
                    this.ConceptField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.ConceptField;
            }
            set {
                if ((value == null)) {
                    this.ConceptField = null;
                }
                else {
                    if ((this.ConceptField == null)) {
                        this.ConceptField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ConceptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> AgencyID {
            get {
                if ((this.AgencyIDField == null)) {
                    this.AgencyIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AgencyIDField;
            }
            set {
                if ((value == null)) {
                    this.AgencyIDField = null;
                }
                else {
                    if ((this.AgencyIDField == null)) {
                        this.AgencyIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AgencyIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> DataProvider {
            get {
                if ((this.DataProviderField == null)) {
                    this.DataProviderField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DataProviderField;
            }
            set {
                if ((value == null)) {
                    this.DataProviderField = null;
                }
                else {
                    if ((this.DataProviderField == null)) {
                        this.DataProviderField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataProviderField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Dataflow {
            get {
                if ((this.DataflowField == null)) {
                    this.DataflowField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DataflowField;
            }
            set {
                if ((value == null)) {
                    this.DataflowField = null;
                }
                else {
                    if ((this.DataflowField == null)) {
                        this.DataflowField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataflowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Metadataflow {
            get {
                if ((this.MetadataflowField == null)) {
                    this.MetadataflowField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataflowField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowField = null;
                }
                else {
                    if ((this.MetadataflowField == null)) {
                        this.MetadataflowField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataflowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<string> Version {
            get {
                if ((this.VersionField == null)) {
                    this.VersionField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.VersionField;
            }
            set {
                if ((value == null)) {
                    this.VersionField = null;
                }
                else {
                    if ((this.VersionField == null)) {
                        this.VersionField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.VersionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<OrType> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<OrType>(this, LinqToXsdTypeManager.Instance, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<OrType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<OrType>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSet*, MetadataSet*, KeyFamily*, MetadataStructure*, Dimension*, StructureComponent*, Attribute*, Codelist*, Time*, Category*, Concept*, AgencyID*, DataProvider*, Dataflow*, Metadataflow*, Version*, Or*, And*)
        /// </para>
        /// </summary>
        public IList<AndType> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<AndType>(this, LinqToXsdTypeManager.Instance, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<AndType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AndType>(this.AndField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(StructureComponentType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AttributeType));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(TimeType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProvider", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Metadataflow", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Dimension elements contain the  (single) value being searched on within the key of the data set. The id attribute holds the ID of the dimension. If the content is empty, then the query is for any dimension with the given name. If the name attribute is not supplied, then the query is for the given key value within any dimension.
    /// </para>
    /// </summary>
    public partial class DimensionType : XTypedElement, IXMetaData {
        
         public static explicit operator DimensionType(XElement xe) { return XTypedServices.ToXTypedElement<DimensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Dimension elements contain the  (single) value being searched on within the key of the data set. The id attribute holds the ID of the dimension. If the content is empty, then the query is for any dimension with the given name. If the name attribute is not supplied, then the query is for the given key value within any dimension.
        /// </para>
        /// </summary>
        public DimensionType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DimensionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DimensionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// StructureComponent elements contain the  (single) value being searched on within the key of data set, but this value can be either a code value or the alias assigned to a set of equivalent code values. The id attribute holds the ID of the dimension, attribute, or alias assigned to a component in a structure set. If the content is empty, then the query is for any component with the given name or alias. If the name attribute is not supplied, then the query is for the given code value or alias within any component or component alias.
    /// </para>
    /// </summary>
    public partial class StructureComponentType : XTypedElement, IXMetaData {
        
         public static explicit operator StructureComponentType(XElement xe) { return XTypedServices.ToXTypedElement<StructureComponentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// StructureComponent elements contain the  (single) value being searched on within the key of data set, but this value can be either a code value or the alias assigned to a set of equivalent code values. The id attribute holds the ID of the dimension, attribute, or alias assigned to a component in a structure set. If the content is empty, then the query is for any component with the given name or alias. If the name attribute is not supplied, then the query is for the given code value or alias within any component or component alias.
        /// </para>
        /// </summary>
        public StructureComponentType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructureComponentType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructureComponentType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Attribute elements contain the (single) value of an attribute being queried for. The id attribute contains the id of the attribute. The attachmentLevel attribute specifies the attachment level of the attribute. If the content of Attribute is empty, then the search is for the specified attribute (and attachment level). If the name attribute is not specified, then the search is on any attribute. If the attachmentLevel attribute is not specified, then the query is for an attribute at any attachment level, as the value defaults to "Any".
    /// </para>
    /// </summary>
    public partial class AttributeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string attachmentLevelDefaultValue = "Any";
        
         public static explicit operator AttributeType(XElement xe) { return XTypedServices.ToXTypedElement<AttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Attribute elements contain the (single) value of an attribute being queried for. The id attribute contains the id of the attribute. The attachmentLevel attribute specifies the attachment level of the attribute. If the content of Attribute is empty, then the search is for the specified attribute (and attachment level). If the name attribute is not specified, then the search is on any attribute. If the attachmentLevel attribute is not specified, then the query is for an attribute at any attachment level, as the value defaults to "Any".
        /// </para>
        /// </summary>
        public AttributeType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string attachmentLevel {
            get {
                XAttribute x = this.Attribute(XName.Get("attachmentLevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, attachmentLevelDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("attachmentLevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AttributeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttributeType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// This type supplies an enumeration of attachment levels corresponding to those in the SDMX Information Model, plus a value of "Any" where the search is wildcarded.
    /// </para>
    /// </summary>
    public sealed class AttachmentLevelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DataSet",
                        "Group",
                        "Series",
                        "Observation",
                        "Any"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AttachmentLevelType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The Codelist element allows queries to specify a (single) value found within a codelist as the element content, and the agency-qualified name of the codelist being queried for in the name attribute. If no content is supplied, then the query is for the named codelist. If the id attribute is left empty, then the value is searched for in any codelist.
    /// </para>
    /// </summary>
    public partial class CodelistType : XTypedElement, IXMetaData {
        
         public static explicit operator CodelistType(XElement xe) { return XTypedServices.ToXTypedElement<CodelistType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The Codelist element allows queries to specify a (single) value found within a codelist as the element content, and the agency-qualified name of the codelist being queried for in the name attribute. If no content is supplied, then the query is for the named codelist. If the id attribute is left empty, then the value is searched for in any codelist.
        /// </para>
        /// </summary>
        public CodelistType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodelistType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodelistType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The Category element allows for a search to be made on the values within a specific category, which is specified (in agency-qualified form) with the name attribute. If there is no element content, then the search is for the named Category; if the name is not supplied, then the category value supplied as content should be sought-for in all available categories.
    /// </para>
    /// </summary>
    public partial class CategoryType : XTypedElement, IXMetaData {
        
         public static explicit operator CategoryType(XElement xe) { return XTypedServices.ToXTypedElement<CategoryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The Category element allows for a search to be made on the values within a specific category, which is specified (in agency-qualified form) with the name attribute. If there is no element content, then the search is for the named Category; if the name is not supplied, then the category value supplied as content should be sought-for in all available categories.
        /// </para>
        /// </summary>
        public CategoryType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string agencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("agencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("agencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CategoryScheme {
            get {
                XAttribute x = this.Attribute(XName.Get("CategoryScheme", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CategoryScheme", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategoryType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategoryType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The KeyFamilyWhere element representes a query for a key family or key families. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
    /// </para>
    /// <para>
    /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
    /// </para>
    /// </summary>
    public partial class KeyFamilyWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator KeyFamilyWhereType(XElement xe) { return XTypedServices.ToXTypedElement<KeyFamilyWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeyFamilyWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The KeyFamilyWhere element representes a query for a key family or key families. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public KeyFamilyWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string KeyFamily {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public DimensionType Dimension {
            get {
                XElement x = this.GetElement(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((DimensionType)(x));
            }
            set {
                this.SetElement(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public AttributeType Attribute {
            get {
                XElement x = this.GetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((AttributeType)(x));
            }
            set {
                this.SetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public CodelistType Codelist {
            get {
                XElement x = this.GetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((CodelistType)(x));
            }
            set {
                this.SetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public CategoryType Category {
            get {
                XElement x = this.GetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((CategoryType)(x));
            }
            set {
                this.SetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string Concept {
            get {
                XElement x = this.GetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public OrType Or {
            get {
                XElement x = this.GetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((OrType)(x));
            }
            set {
                this.SetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | Dimension | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public AndType And {
            get {
                XElement x = this.GetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((AndType)(x));
            }
            set {
                this.SetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyFamilyWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeyFamilyWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AttributeType));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The MetadataStructureWhere element representes a query for a metadata structure or structures. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
    /// </para>
    /// <para>
    /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
    /// </para>
    /// </summary>
    public partial class MetadataStructureWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataStructureWhereType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataStructureWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataStructureWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The MetadataStructureWhere element representes a query for a metadata structure or structures. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public MetadataStructureWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string KeyFamily {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string MetadataStructure {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string StructureSet {
            get {
                XElement x = this.GetElement(XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public DimensionType Dimension {
            get {
                XElement x = this.GetElement(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((DimensionType)(x));
            }
            set {
                this.SetElement(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public StructureComponentType StructureComponent {
            get {
                XElement x = this.GetElement(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((StructureComponentType)(x));
            }
            set {
                this.SetElement(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public AttributeType Attribute {
            get {
                XElement x = this.GetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((AttributeType)(x));
            }
            set {
                this.SetElement(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public CodelistType Codelist {
            get {
                XElement x = this.GetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((CodelistType)(x));
            }
            set {
                this.SetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public CategoryType Category {
            get {
                XElement x = this.GetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((CategoryType)(x));
            }
            set {
                this.SetElement(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string Concept {
            get {
                XElement x = this.GetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public OrType Or {
            get {
                XElement x = this.GetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((OrType)(x));
            }
            set {
                this.SetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily | MetadataStructure | StructureSet | Dimension | StructureComponent | Attribute | Codelist | Category | Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public AndType And {
            get {
                XElement x = this.GetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((AndType)(x));
            }
            set {
                this.SetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataStructureWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataStructureWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Dimension", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(DimensionType));
            localElementDictionary.Add(XName.Get("StructureComponent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(StructureComponentType));
            localElementDictionary.Add(XName.Get("Attribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AttributeType));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The CodelistWhere element representes a query for a codelist or codelists. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
    /// </para>
    /// <para>
    /// Regular expression: (Codelist | AgencyID | Version | Or | And)
    /// </para>
    /// </summary>
    public partial class CodelistWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodelistWhereType(XElement xe) { return XTypedServices.ToXTypedElement<CodelistWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodelistWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The CodelistWhere element representes a query for a codelist or codelists. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public CodelistWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public CodelistType Codelist {
            get {
                XElement x = this.GetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((CodelistType)(x));
            }
            set {
                this.SetElement(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public OrType Or {
            get {
                XElement x = this.GetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((OrType)(x));
            }
            set {
                this.SetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Codelist | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public AndType And {
            get {
                XElement x = this.GetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((AndType)(x));
            }
            set {
                this.SetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodelistWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodelistWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The ConceptWhere element representes a query for a concept or concepts. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
    /// </para>
    /// <para>
    /// Regular expression: (Concept | AgencyID | Version | Or | And)
    /// </para>
    /// </summary>
    public partial class ConceptWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptWhereType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The ConceptWhere element representes a query for a concept or concepts. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
        /// </para>
        /// <para>
        /// Regular expression: (Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public ConceptWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string Concept {
            get {
                XElement x = this.GetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public OrType Or {
            get {
                XElement x = this.GetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((OrType)(x));
            }
            set {
                this.SetElement(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Concept | AgencyID | Version | Or | And)
        /// </para>
        /// </summary>
        public AndType And {
            get {
                XElement x = this.GetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return ((AndType)(x));
            }
            set {
                this.SetElement(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The AgencyWhere element representes a query for details for an Agency. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
    /// </para>
    /// <para>
    /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
    /// </para>
    /// </summary>
    public partial class AgencyWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> KeyFamilyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataStructureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> StructureSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistType> CodelistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ConceptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AgencyIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrType> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AndType> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AgencyWhereType(XElement xe) { return XTypedServices.ToXTypedElement<AgencyWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AgencyWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The AgencyWhere element representes a query for details for an Agency. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public AgencyWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> KeyFamily {
            get {
                if ((this.KeyFamilyField == null)) {
                    this.KeyFamilyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.KeyFamilyField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyField = null;
                }
                else {
                    if ((this.KeyFamilyField == null)) {
                        this.KeyFamilyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.KeyFamilyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> MetadataStructure {
            get {
                if ((this.MetadataStructureField == null)) {
                    this.MetadataStructureField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataStructureField;
            }
            set {
                if ((value == null)) {
                    this.MetadataStructureField = null;
                }
                else {
                    if ((this.MetadataStructureField == null)) {
                        this.MetadataStructureField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataStructureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> StructureSet {
            get {
                if ((this.StructureSetField == null)) {
                    this.StructureSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.StructureSetField;
            }
            set {
                if ((value == null)) {
                    this.StructureSetField = null;
                }
                else {
                    if ((this.StructureSetField == null)) {
                        this.StructureSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.StructureSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<CodelistType> Codelist {
            get {
                if ((this.CodelistField == null)) {
                    this.CodelistField = new XTypedList<CodelistType>(this, LinqToXsdTypeManager.Instance, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.CodelistField;
            }
            set {
                if ((value == null)) {
                    this.CodelistField = null;
                }
                else {
                    if ((this.CodelistField == null)) {
                        this.CodelistField = XTypedList<CodelistType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CodelistType>(this.CodelistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<CategoryType> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.CategoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> Concept {
            get {
                if ((this.ConceptField == null)) {
                    this.ConceptField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.ConceptField;
            }
            set {
                if ((value == null)) {
                    this.ConceptField = null;
                }
                else {
                    if ((this.ConceptField == null)) {
                        this.ConceptField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ConceptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> AgencyID {
            get {
                if ((this.AgencyIDField == null)) {
                    this.AgencyIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AgencyIDField;
            }
            set {
                if ((value == null)) {
                    this.AgencyIDField = null;
                }
                else {
                    if ((this.AgencyIDField == null)) {
                        this.AgencyIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AgencyIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<OrType> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<OrType>(this, LinqToXsdTypeManager.Instance, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<OrType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<OrType>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<AndType> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<AndType>(this, LinqToXsdTypeManager.Instance, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<AndType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AndType>(this.AndField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AgencyWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AgencyWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The DataProviderWhere element representes a query for details for a provider of data or metadata sets. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
    /// </para>
    /// <para>
    /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
    /// </para>
    /// </summary>
    public partial class DataProviderWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> KeyFamilyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataStructureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> StructureSetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistType> CodelistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ConceptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AgencyIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrType> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AndType> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataProviderWhereType(XElement xe) { return XTypedServices.ToXTypedElement<DataProviderWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataProviderWhereType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The DataProviderWhere element representes a query for details for a provider of data or metadata sets. It contains all of the clauses in that query, represented by its child elements. Values are the IDs of the referenced object.
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public DataProviderWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> DataSet {
            get {
                if ((this.DataSetField == null)) {
                    this.DataSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.DataSetField;
            }
            set {
                if ((value == null)) {
                    this.DataSetField = null;
                }
                else {
                    if ((this.DataSetField == null)) {
                        this.DataSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> MetadataSet {
            get {
                if ((this.MetadataSetField == null)) {
                    this.MetadataSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataSetField;
            }
            set {
                if ((value == null)) {
                    this.MetadataSetField = null;
                }
                else {
                    if ((this.MetadataSetField == null)) {
                        this.MetadataSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> KeyFamily {
            get {
                if ((this.KeyFamilyField == null)) {
                    this.KeyFamilyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.KeyFamilyField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyField = null;
                }
                else {
                    if ((this.KeyFamilyField == null)) {
                        this.KeyFamilyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.KeyFamilyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> MetadataStructure {
            get {
                if ((this.MetadataStructureField == null)) {
                    this.MetadataStructureField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.MetadataStructureField;
            }
            set {
                if ((value == null)) {
                    this.MetadataStructureField = null;
                }
                else {
                    if ((this.MetadataStructureField == null)) {
                        this.MetadataStructureField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataStructureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> StructureSet {
            get {
                if ((this.StructureSetField == null)) {
                    this.StructureSetField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.StructureSetField;
            }
            set {
                if ((value == null)) {
                    this.StructureSetField = null;
                }
                else {
                    if ((this.StructureSetField == null)) {
                        this.StructureSetField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.StructureSetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<CodelistType> Codelist {
            get {
                if ((this.CodelistField == null)) {
                    this.CodelistField = new XTypedList<CodelistType>(this, LinqToXsdTypeManager.Instance, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.CodelistField;
            }
            set {
                if ((value == null)) {
                    this.CodelistField = null;
                }
                else {
                    if ((this.CodelistField == null)) {
                        this.CodelistField = XTypedList<CodelistType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CodelistType>(this.CodelistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<CategoryType> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.CategoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> Concept {
            get {
                if ((this.ConceptField == null)) {
                    this.ConceptField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.ConceptField;
            }
            set {
                if ((value == null)) {
                    this.ConceptField = null;
                }
                else {
                    if ((this.ConceptField == null)) {
                        this.ConceptField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ConceptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<string> AgencyID {
            get {
                if ((this.AgencyIDField == null)) {
                    this.AgencyIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AgencyIDField;
            }
            set {
                if ((value == null)) {
                    this.AgencyIDField = null;
                }
                else {
                    if ((this.AgencyIDField == null)) {
                        this.AgencyIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AgencyIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<OrType> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<OrType>(this, LinqToXsdTypeManager.Instance, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<OrType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<OrType>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataSet* | MetadataSet* | KeyFamily* | MetadataStructure* | StructureSet* | Codelist* | Category* | Concept* | AgencyID* | Or* | And*)
        /// </para>
        /// </summary>
        public IList<AndType> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<AndType>(this, LinqToXsdTypeManager.Instance, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<AndType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                    }
                    else {
                        XTypedServices.SetList<AndType>(this.AndField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataProviderWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataProviderWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamily", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("StructureSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Codelist", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CodelistType));
            localElementDictionary.Add(XName.Get("Category", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(CategoryType));
            localElementDictionary.Add(XName.Get("Concept", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Or", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(OrType));
            localElementDictionary.Add(XName.Get("And", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(AndType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TimeType contains the time point or period for which results should be supplied. When StartTime and EndTime are used, these must be understood as inclusive.
    /// </para>
    /// <para>
    /// Regular expression: ((StartTime, EndTime?)|Time)
    /// </para>
    /// </summary>
    public partial class TimeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TimeType(XElement xe) { return XTypedServices.ToXTypedElement<TimeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TimeType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// TimeType contains the time point or period for which results should be supplied. When StartTime and EndTime are used, these must be understood as inclusive.
        /// </para>
        /// <para>
        /// Regular expression: ((StartTime, EndTime?)|Time)
        /// </para>
        /// </summary>
        public TimeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartTime, EndTime?)|Time)
        /// </para>
        /// </summary>
        public object StartTime {
            get {
                XElement x = this.GetElement(XName.Get("StartTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("StartTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, "StartTime", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartTime, EndTime?)|Time)
        /// </para>
        /// </summary>
        public object EndTime {
            get {
                XElement x = this.GetElement(XName.Get("EndTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("EndTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, "EndTime", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: ((StartTime, EndTime?)|Time)
        /// </para>
        /// </summary>
        public object Time {
            get {
                XElement x = this.GetElement(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetElementWithValidation(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, "Time", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TimeType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TimeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("StartTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(object));
            localElementDictionary.Add(XName.Get("EndTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(object));
            localElementDictionary.Add(XName.Get("Time", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(object));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The StructureSetWhere element represents a query for a structure set or structure sets. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
    /// </para>
    /// <para>
    /// Regular expression: (AgencyID?, ID?, Version?)
    /// </para>
    /// </summary>
    public partial class StructureSetWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StructureSetWhereType(XElement xe) { return XTypedServices.ToXTypedElement<StructureSetWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructureSetWhereType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The StructureSetWhere element represents a query for a structure set or structure sets. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public StructureSetWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructureSetWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructureSetWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The HierarchicalCodelistWhere element represents a query for a hierarchical codelist or codelists. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
    /// </para>
    /// <para>
    /// Regular expression: (AgencyID?, ID?, Version?)
    /// </para>
    /// </summary>
    public partial class HierarchicalCodelistWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HierarchicalCodelistWhereType(XElement xe) { return XTypedServices.ToXTypedElement<HierarchicalCodelistWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HierarchicalCodelistWhereType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The HierarchicalCodelistWhere element represents a query for a hierarchical codelist or codelists. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public HierarchicalCodelistWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HierarchicalCodelistWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HierarchicalCodelistWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The ReportingTaxonomyWhere element represents a query for a reporting taxonomy or taxonomies. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
    /// </para>
    /// <para>
    /// Regular expression: (AgencyID?, ID?, Version?)
    /// </para>
    /// </summary>
    public partial class ReportingTaxonomyWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReportingTaxonomyWhereType(XElement xe) { return XTypedServices.ToXTypedElement<ReportingTaxonomyWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReportingTaxonomyWhereType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The ReportingTaxonomyWhere element represents a query for a reporting taxonomy or taxonomies. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public ReportingTaxonomyWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReportingTaxonomyWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReportingTaxonomyWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The DataflowWhereType element represents a query for a dataflow or dataflows. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
    /// </para>
    /// <para>
    /// Regular expression: (AgencyID?, ID?, Version?)
    /// </para>
    /// </summary>
    public partial class DataflowWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataflowWhereType(XElement xe) { return XTypedServices.ToXTypedElement<DataflowWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataflowWhereType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The DataflowWhereType element represents a query for a dataflow or dataflows. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public DataflowWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataflowWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataflowWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The MetadataflowWhereType element represents a query for a metadataflow or metadataflows. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
    /// </para>
    /// <para>
    /// Regular expression: (AgencyID?, ID?, Version?)
    /// </para>
    /// </summary>
    public partial class MetadataflowWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataflowWhereType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataflowWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataflowWhereType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The MetadataflowWhereType element represents a query for a metadataflow or metadataflows. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public MetadataflowWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataflowWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataflowWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The ProcessWhere element represents a query for a process or processes. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
    /// </para>
    /// <para>
    /// Regular expression: (AgencyID?, ID?, Version?)
    /// </para>
    /// </summary>
    public partial class ProcessWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ProcessWhereType(XElement xe) { return XTypedServices.ToXTypedElement<ProcessWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProcessWhereType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The ProcessWhere element represents a query for a process or processes. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public ProcessWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProcessWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProcessWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The OrganisationSchemeWhere element represents a query for an organisation scheme or schemes. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
    /// </para>
    /// <para>
    /// Regular expression: (AgencyID?, ID?, Version?)
    /// </para>
    /// </summary>
    public partial class OrganisationSchemeWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrganisationSchemeWhereType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationSchemeWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationSchemeWhereType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The OrganisationSchemeWhere element represents a query for an organisation scheme or schemes. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public OrganisationSchemeWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrganisationSchemeWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationSchemeWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The ConceptSchemeWhere element represents a query for a concept scheme or schemes. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
    /// </para>
    /// <para>
    /// Regular expression: (AgencyID?, ID?, Version?)
    /// </para>
    /// </summary>
    public partial class ConceptSchemeWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptSchemeWhereType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptSchemeWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptSchemeWhereType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The ConceptSchemeWhere element represents a query for a concept scheme or schemes. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public ConceptSchemeWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptSchemeWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptSchemeWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The CategorySchemeWhere element represents a query for a category scheme or schemes. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
    /// </para>
    /// <para>
    /// Regular expression: (AgencyID?, ID?, Version?)
    /// </para>
    /// </summary>
    public partial class CategorySchemeWhereType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategorySchemeWhereType(XElement xe) { return XTypedServices.ToXTypedElement<CategorySchemeWhereType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategorySchemeWhereType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query")));
        }
        
        /// <summary>
        /// <para>
        /// The CategorySchemeWhere element represents a query for a category scheme or schemes. Like other maintainable objects, it must be queried for using information about its agency, ID, and/or version. Any field not supplied will be taken as matching all of that type.
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public CategorySchemeWhereType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string ID {
            get {
                XElement x = this.GetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID?, ID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategorySchemeWhereType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategorySchemeWhereType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("ID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The Query element is a top-level element for this namespace, which is referenced by the SDMX message envelope, or could be put inside another envelope, such as SOAP. It contains a query. The defaultLimit attribute is the suggested maximum response size in kilobytes.
    /// </para>
    /// </summary>
    public partial class Query : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private QueryType ContentField;
        
         public static explicit operator Query(XElement xe) { return XTypedServices.ToXTypedElement<Query, QueryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The Query element is a top-level element for this namespace, which is referenced by the SDMX message envelope, or could be put inside another envelope, such as SOAP. It contains a query. The defaultLimit attribute is the suggested maximum response size in kilobytes.
        /// </para>
        /// </summary>
        public Query() {
            SetInnerType(new QueryType());
        }
        
        /// <summary>
        /// <para>
        /// The Query element is a top-level element for this namespace, which is referenced by the SDMX message envelope, or could be put inside another envelope, such as SOAP. It contains a query. The defaultLimit attribute is the suggested maximum response size in kilobytes.
        /// </para>
        /// </summary>
        public Query(QueryType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public QueryType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<DataWhereType> DataWhere {
            get {
                return this.ContentField.DataWhere;
            }
            set {
                this.ContentField.DataWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<MetadataWhereType> MetadataWhere {
            get {
                return this.ContentField.MetadataWhere;
            }
            set {
                this.ContentField.MetadataWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<KeyFamilyWhereType> KeyFamilyWhere {
            get {
                return this.ContentField.KeyFamilyWhere;
            }
            set {
                this.ContentField.KeyFamilyWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<MetadataStructureWhereType> MetadataStructureWhere {
            get {
                return this.ContentField.MetadataStructureWhere;
            }
            set {
                this.ContentField.MetadataStructureWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<CodelistWhereType> CodelistWhere {
            get {
                return this.ContentField.CodelistWhere;
            }
            set {
                this.ContentField.CodelistWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<ConceptWhereType> ConceptWhere {
            get {
                return this.ContentField.ConceptWhere;
            }
            set {
                this.ContentField.ConceptWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<AgencyWhereType> AgencyWhere {
            get {
                return this.ContentField.AgencyWhere;
            }
            set {
                this.ContentField.AgencyWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<DataProviderWhereType> DataProviderWhere {
            get {
                return this.ContentField.DataProviderWhere;
            }
            set {
                this.ContentField.DataProviderWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<HierarchicalCodelistWhereType> HierarchicalCodelistWhere {
            get {
                return this.ContentField.HierarchicalCodelistWhere;
            }
            set {
                this.ContentField.HierarchicalCodelistWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<ReportingTaxonomyWhereType> ReportingTaxonomyWhere {
            get {
                return this.ContentField.ReportingTaxonomyWhere;
            }
            set {
                this.ContentField.ReportingTaxonomyWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<DataflowWhereType> DataflowWhere {
            get {
                return this.ContentField.DataflowWhere;
            }
            set {
                this.ContentField.DataflowWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<MetadataflowWhereType> MetadataflowWhere {
            get {
                return this.ContentField.MetadataflowWhere;
            }
            set {
                this.ContentField.MetadataflowWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<StructureSetWhereType> StructureSetWhere {
            get {
                return this.ContentField.StructureSetWhere;
            }
            set {
                this.ContentField.StructureSetWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<ProcessWhereType> ProcessWhere {
            get {
                return this.ContentField.ProcessWhere;
            }
            set {
                this.ContentField.ProcessWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<OrganisationSchemeWhereType> OrganisationSchemeWhere {
            get {
                return this.ContentField.OrganisationSchemeWhere;
            }
            set {
                this.ContentField.OrganisationSchemeWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<ConceptSchemeWhereType> ConceptSchemeWhere {
            get {
                return this.ContentField.ConceptSchemeWhere;
            }
            set {
                this.ContentField.ConceptSchemeWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataWhere*, MetadataWhere*, KeyFamilyWhere*, MetadataStructureWhere*, CodelistWhere*, ConceptWhere*, AgencyWhere*, DataProviderWhere*, HierarchicalCodelistWhere*, ReportingTaxonomyWhere*, DataflowWhere*, MetadataflowWhere*, StructureSetWhere*, ProcessWhere*, OrganisationSchemeWhere*, ConceptSchemeWhere*, CategorySchemeWhere*)
        /// </para>
        /// </summary>
        public IList<CategorySchemeWhereType> CategorySchemeWhere {
            get {
                return this.ContentField.CategorySchemeWhere;
            }
            set {
                this.ContentField.CategorySchemeWhere = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> defaultLimit {
            get {
                return this.ContentField.defaultLimit;
            }
            set {
                this.ContentField.defaultLimit = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Query", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Query Load(string xmlFile) {
            return XTypedServices.Load<Query, QueryType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Query Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Query, QueryType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Query Parse(string xml) {
            return XTypedServices.Parse<Query, QueryType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Query(((QueryType)(this.Content.Clone())));
        }
        
        private void SetInnerType(QueryType ContentField) {
            this.ContentField = ((QueryType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public Query Query {  get {return rootObject as Query; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Query root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// The SubmitSubscriptionRequest element is submitted to the registry to subscribe to registration and change events for specific registry resources.
    /// </para>
    /// <para>
    /// Regular expression: (Subscription+)
    /// </para>
    /// </summary>
    public partial class SubmitSubscriptionRequestType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SubscriptionType> SubscriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubmitSubscriptionRequestType(XElement xe) { return XTypedServices.ToXTypedElement<SubmitSubscriptionRequestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmitSubscriptionRequestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Subscription", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// The SubmitSubscriptionRequest element is submitted to the registry to subscribe to registration and change events for specific registry resources.
        /// </para>
        /// <para>
        /// Regular expression: (Subscription+)
        /// </para>
        /// </summary>
        public SubmitSubscriptionRequestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Subscription+)
        /// </para>
        /// </summary>
        public IList<SubscriptionType> Subscription {
            get {
                if ((this.SubscriptionField == null)) {
                    this.SubscriptionField = new XTypedList<SubscriptionType>(this, LinqToXsdTypeManager.Instance, XName.Get("Subscription", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.SubscriptionField;
            }
            set {
                if ((value == null)) {
                    this.SubscriptionField = null;
                }
                else {
                    if ((this.SubscriptionField == null)) {
                        this.SubscriptionField = XTypedList<SubscriptionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Subscription", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<SubscriptionType>(this.SubscriptionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubmitSubscriptionRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmitSubscriptionRequestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Subscription", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(SubscriptionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The SubmitSubscriptionResponse element contains information which describes the success or failure of a Subscription, providing any error messages in the event of failure. It also returns the registry URN of the subscription, and the subscriber-assigned ID.
    /// </para>
    /// <para>
    /// Regular expression: (SubscriptionURN?, SubscriberAssignedID?, SubscriptionStatus)
    /// </para>
    /// </summary>
    public partial class SubmitSubscriptionResponseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubmitSubscriptionResponseType(XElement xe) { return XTypedServices.ToXTypedElement<SubmitSubscriptionResponseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmitSubscriptionResponseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SubscriptionURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("SubscriberAssignedID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("SubscriptionStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// The SubmitSubscriptionResponse element contains information which describes the success or failure of a Subscription, providing any error messages in the event of failure. It also returns the registry URN of the subscription, and the subscriber-assigned ID.
        /// </para>
        /// <para>
        /// Regular expression: (SubscriptionURN?, SubscriberAssignedID?, SubscriptionStatus)
        /// </para>
        /// </summary>
        public SubmitSubscriptionResponseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SubscriptionURN?, SubscriberAssignedID?, SubscriptionStatus)
        /// </para>
        /// </summary>
        public System.Uri SubscriptionURN {
            get {
                XElement x = this.GetElement(XName.Get("SubscriptionURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("SubscriptionURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SubscriptionURN?, SubscriberAssignedID?, SubscriptionStatus)
        /// </para>
        /// </summary>
        public string SubscriberAssignedID {
            get {
                XElement x = this.GetElement(XName.Get("SubscriberAssignedID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SubscriberAssignedID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "SubscriberAssignedID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SubscriptionURN?, SubscriberAssignedID?, SubscriptionStatus)
        /// </para>
        /// </summary>
        public StatusMessageType SubscriptionStatus {
            get {
                XElement x = this.GetElement(XName.Get("SubscriptionStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StatusMessageType)(x));
            }
            set {
                this.SetElement(XName.Get("SubscriptionStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubmitSubscriptionResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmitSubscriptionResponseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SubscriptionURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("SubscriberAssignedID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("SubscriptionStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StatusMessageType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The NotifyRegistryEvent element is sent by the registry services to subscribers, to notify them of specific registration and change events. EventTime specifies the time of the triggering event. ObjectURN provides the URN of the object on which the event occurred. SubscriptionURN provides the registry/repository URN of the subscription. EventAction indicates the nature of the event - whether the action was an addition, a modification, or a deletion.
    /// </para>
    /// <para>
    /// Regular expression: (EventTime, ObjectURN, SubscriptionURN, EventAction, (StructuralEvent | ProvisioningEvent | RegistrationEvent))
    /// </para>
    /// </summary>
    public partial class NotifyRegistryEventType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator NotifyRegistryEventType(XElement xe) { return XTypedServices.ToXTypedElement<NotifyRegistryEventType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NotifyRegistryEventType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// The NotifyRegistryEvent element is sent by the registry services to subscribers, to notify them of specific registration and change events. EventTime specifies the time of the triggering event. ObjectURN provides the URN of the object on which the event occurred. SubscriptionURN provides the registry/repository URN of the subscription. EventAction indicates the nature of the event - whether the action was an addition, a modification, or a deletion.
        /// </para>
        /// <para>
        /// Regular expression: (EventTime, ObjectURN, SubscriptionURN, EventAction, (StructuralEvent | ProvisioningEvent | RegistrationEvent))
        /// </para>
        /// </summary>
        public NotifyRegistryEventType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EventTime, ObjectURN, SubscriptionURN, EventAction, (StructuralEvent | ProvisioningEvent | RegistrationEvent))
        /// </para>
        /// </summary>
        public System.DateTime EventTime {
            get {
                XElement x = this.GetElement(XName.Get("EventTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("EventTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EventTime, ObjectURN, SubscriptionURN, EventAction, (StructuralEvent | ProvisioningEvent | RegistrationEvent))
        /// </para>
        /// </summary>
        public System.Uri ObjectURN {
            get {
                XElement x = this.GetElement(XName.Get("ObjectURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("ObjectURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EventTime, ObjectURN, SubscriptionURN, EventAction, (StructuralEvent | ProvisioningEvent | RegistrationEvent))
        /// </para>
        /// </summary>
        public System.Uri SubscriptionURN {
            get {
                XElement x = this.GetElement(XName.Get("SubscriptionURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("SubscriptionURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EventTime, ObjectURN, SubscriptionURN, EventAction, (StructuralEvent | ProvisioningEvent | RegistrationEvent))
        /// </para>
        /// </summary>
        public string EventAction {
            get {
                XElement x = this.GetElement(XName.Get("EventAction", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("EventAction", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "EventAction", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ActionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (EventTime, ObjectURN, SubscriptionURN, EventAction, (StructuralEvent | ProvisioningEvent | RegistrationEvent))
        /// </para>
        /// </summary>
        public StructuralEventType StructuralEvent {
            get {
                XElement x = this.GetElement(XName.Get("StructuralEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StructuralEventType)(x));
            }
            set {
                this.SetElement(XName.Get("StructuralEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (EventTime, ObjectURN, SubscriptionURN, EventAction, (StructuralEvent | ProvisioningEvent | RegistrationEvent))
        /// </para>
        /// </summary>
        public ProvisioningEventType ProvisioningEvent {
            get {
                XElement x = this.GetElement(XName.Get("ProvisioningEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ProvisioningEventType)(x));
            }
            set {
                this.SetElement(XName.Get("ProvisioningEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (EventTime, ObjectURN, SubscriptionURN, EventAction, (StructuralEvent | ProvisioningEvent | RegistrationEvent))
        /// </para>
        /// </summary>
        public RegistrationEventType RegistrationEvent {
            get {
                XElement x = this.GetElement(XName.Get("RegistrationEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((RegistrationEventType)(x));
            }
            set {
                this.SetElement(XName.Get("RegistrationEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NotifyRegistryEventType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NotifyRegistryEventType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("EventTime", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("ObjectURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("SubscriptionURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("EventAction", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("StructuralEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StructuralEventType));
            localElementDictionary.Add(XName.Get("ProvisioningEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisioningEventType));
            localElementDictionary.Add(XName.Get("RegistrationEvent", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(RegistrationEventType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SubmitRegistrationRequest is sent to the registry by an agency or data/metadata provider to request registration for a data set or metadata set. The resource to be registered must be accessible to the registry services at an indicated URL, so that it can be processed by those services. This is the datasource, which may also have been specified for the data provider or provision agreement, in which case it need not appear here. Constraints describing the content and release calendar of the registered dataset (and, for metadata sets, the release calendar) may also be included.
    /// </para>
    /// <para>
    /// Regular expression: (Registration+)
    /// </para>
    /// </summary>
    public partial class SubmitRegistrationRequestType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RegistrationType> RegistrationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubmitRegistrationRequestType(XElement xe) { return XTypedServices.ToXTypedElement<SubmitRegistrationRequestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmitRegistrationRequestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Registration", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// SubmitRegistrationRequest is sent to the registry by an agency or data/metadata provider to request registration for a data set or metadata set. The resource to be registered must be accessible to the registry services at an indicated URL, so that it can be processed by those services. This is the datasource, which may also have been specified for the data provider or provision agreement, in which case it need not appear here. Constraints describing the content and release calendar of the registered dataset (and, for metadata sets, the release calendar) may also be included.
        /// </para>
        /// <para>
        /// Regular expression: (Registration+)
        /// </para>
        /// </summary>
        public SubmitRegistrationRequestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Registration+)
        /// </para>
        /// </summary>
        public IList<RegistrationType> Registration {
            get {
                if ((this.RegistrationField == null)) {
                    this.RegistrationField = new XTypedList<RegistrationType>(this, LinqToXsdTypeManager.Instance, XName.Get("Registration", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.RegistrationField;
            }
            set {
                if ((value == null)) {
                    this.RegistrationField = null;
                }
                else {
                    if ((this.RegistrationField == null)) {
                        this.RegistrationField = XTypedList<RegistrationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Registration", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<RegistrationType>(this.RegistrationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubmitRegistrationRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmitRegistrationRequestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Registration", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(RegistrationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// This document is sent to the agency or data/metadata provider in response to a registration request. It indicates the success or failure of the registration request, and contains any error messages generated by the registration service.
    /// </para>
    /// <para>
    /// Regular expression: (RegistrationStatus+)
    /// </para>
    /// </summary>
    public partial class SubmitRegistrationResponseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RegistrationStatusType> RegistrationStatusField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubmitRegistrationResponseType(XElement xe) { return XTypedServices.ToXTypedElement<SubmitRegistrationResponseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmitRegistrationResponseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RegistrationStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// This document is sent to the agency or data/metadata provider in response to a registration request. It indicates the success or failure of the registration request, and contains any error messages generated by the registration service.
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationStatus+)
        /// </para>
        /// </summary>
        public SubmitRegistrationResponseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationStatus+)
        /// </para>
        /// </summary>
        public IList<RegistrationStatusType> RegistrationStatus {
            get {
                if ((this.RegistrationStatusField == null)) {
                    this.RegistrationStatusField = new XTypedList<RegistrationStatusType>(this, LinqToXsdTypeManager.Instance, XName.Get("RegistrationStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.RegistrationStatusField;
            }
            set {
                if ((value == null)) {
                    this.RegistrationStatusField = null;
                }
                else {
                    if ((this.RegistrationStatusField == null)) {
                        this.RegistrationStatusField = XTypedList<RegistrationStatusType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RegistrationStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<RegistrationStatusType>(this.RegistrationStatusField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubmitRegistrationResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmitRegistrationResponseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RegistrationStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(RegistrationStatusType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The QueryRegistrationRequest is used to query the contents of a registry for data sets and metadata sets. The QueryRegistrationRequest specifies whether the result set should include metadata sets, data sets, or both with the QueryType element. The constraints which characterize the search - including reference period, are contained in teh Constraints within the child object references.
    /// </para>
    /// <para>
    /// Regular expression: (QueryType, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
    /// </para>
    /// </summary>
    public partial class QueryRegistrationRequestType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator QueryRegistrationRequestType(XElement xe) { return XTypedServices.ToXTypedElement<QueryRegistrationRequestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryRegistrationRequestType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// The QueryRegistrationRequest is used to query the contents of a registry for data sets and metadata sets. The QueryRegistrationRequest specifies whether the result set should include metadata sets, data sets, or both with the QueryType element. The constraints which characterize the search - including reference period, are contained in teh Constraints within the child object references.
        /// </para>
        /// <para>
        /// Regular expression: (QueryType, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public QueryRegistrationRequestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (QueryType, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public string QueryType {
            get {
                XElement x = this.GetElement(XName.Get("QueryType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("QueryType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "QueryType", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryTypeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (QueryType, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public ProvisionAgreementRefType ProvisionAgreementRef {
            get {
                XElement x = this.GetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ProvisionAgreementRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (QueryType, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public DataflowRefType DataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (QueryType, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public MetadataflowRefType MetadataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((MetadataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (QueryType, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public DataProviderRefType DataProviderRef {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataProviderRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryRegistrationRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryRegistrationRequestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("QueryType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisionAgreementRefType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataProviderRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The QueryRegistrationResponse is sent as a response document to anyone querying the contents of a registry. The results set contains a set of links to data and/or metadata If the result set is null, or there is some other problem with the query, then appropriate error messages and statuses will be returned.
    /// </para>
    /// <para>
    /// Regular expression: (QueryResult+)
    /// </para>
    /// </summary>
    public partial class QueryRegistrationResponseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QueryResultType> QueryResultField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QueryRegistrationResponseType(XElement xe) { return XTypedServices.ToXTypedElement<QueryRegistrationResponseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryRegistrationResponseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("QueryResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// The QueryRegistrationResponse is sent as a response document to anyone querying the contents of a registry. The results set contains a set of links to data and/or metadata If the result set is null, or there is some other problem with the query, then appropriate error messages and statuses will be returned.
        /// </para>
        /// <para>
        /// Regular expression: (QueryResult+)
        /// </para>
        /// </summary>
        public QueryRegistrationResponseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (QueryResult+)
        /// </para>
        /// </summary>
        public IList<QueryResultType> QueryResult {
            get {
                if ((this.QueryResultField == null)) {
                    this.QueryResultField = new XTypedList<QueryResultType>(this, LinqToXsdTypeManager.Instance, XName.Get("QueryResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.QueryResultField;
            }
            set {
                if ((value == null)) {
                    this.QueryResultField = null;
                }
                else {
                    if ((this.QueryResultField == null)) {
                        this.QueryResultField = XTypedList<QueryResultType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("QueryResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<QueryResultType>(this.QueryResultField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryRegistrationResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryRegistrationResponseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("QueryResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(QueryResultType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// SubmitStructureRequest is used to submit structure definitions - key families, metadata structures - to the repository. The structure resources (key families, agencies, concepts and concept schemes, codelists,etc.) to be submitted must be available as valid SDMX-ML Structure messages external to the registry, so that they can be retrieved by the repository submission service. A SubmitStructureResponse will be sent in response, and will indicate status and contain anyt relevant error information. StructureLocation holds the URL of the valid Structure Message. Alternately, the Structure element can contain the structural descriptions. The SubmittedStructureType contains a reference to one of the structural maintainable artefacts detailed in the Structure Message, which is to be submitted to the repository. It does not need to be used when the structures being submitted are included in the request message, or when all objects in the referenced SDMX-ML Structure message are to submitted.
    /// </para>
    /// <para>
    /// Regular expression: ((StructureLocation | Structure), SubmittedStructure*)
    /// </para>
    /// </summary>
    public partial class SubmitStructureRequestType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SubmittedStructureType> SubmittedStructureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SubmitStructureRequestType(XElement xe) { return XTypedServices.ToXTypedElement<SubmitStructureRequestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmitStructureRequestType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// SubmitStructureRequest is used to submit structure definitions - key families, metadata structures - to the repository. The structure resources (key families, agencies, concepts and concept schemes, codelists,etc.) to be submitted must be available as valid SDMX-ML Structure messages external to the registry, so that they can be retrieved by the repository submission service. A SubmitStructureResponse will be sent in response, and will indicate status and contain anyt relevant error information. StructureLocation holds the URL of the valid Structure Message. Alternately, the Structure element can contain the structural descriptions. The SubmittedStructureType contains a reference to one of the structural maintainable artefacts detailed in the Structure Message, which is to be submitted to the repository. It does not need to be used when the structures being submitted are included in the request message, or when all objects in the referenced SDMX-ML Structure message are to submitted.
        /// </para>
        /// <para>
        /// Regular expression: ((StructureLocation | Structure), SubmittedStructure*)
        /// </para>
        /// </summary>
        public SubmitStructureRequestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StructureLocation | Structure), SubmittedStructure*)
        /// </para>
        /// </summary>
        public System.Uri StructureLocation {
            get {
                XElement x = this.GetElement(XName.Get("StructureLocation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("StructureLocation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StructureLocation | Structure), SubmittedStructure*)
        /// </para>
        /// </summary>
        public StructureType Structure {
            get {
                XElement x = this.GetElement(XName.Get("Structure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StructureType)(x));
            }
            set {
                this.SetElement(XName.Get("Structure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((StructureLocation | Structure), SubmittedStructure*)
        /// </para>
        /// </summary>
        public IList<SubmittedStructureType> SubmittedStructure {
            get {
                if ((this.SubmittedStructureField == null)) {
                    this.SubmittedStructureField = new XTypedList<SubmittedStructureType>(this, LinqToXsdTypeManager.Instance, XName.Get("SubmittedStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.SubmittedStructureField;
            }
            set {
                if ((value == null)) {
                    this.SubmittedStructureField = null;
                }
                else {
                    if ((this.SubmittedStructureField == null)) {
                        this.SubmittedStructureField = XTypedList<SubmittedStructureType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SubmittedStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<SubmittedStructureType>(this.SubmittedStructureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubmitStructureRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmitStructureRequestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("StructureLocation", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("Structure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StructureType));
            localElementDictionary.Add(XName.Get("SubmittedStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(SubmittedStructureType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// SubmitStructureResponse is returned by the registry when a SubmitStructure is received. It indicates the status of the submission, and carries any error messages which are generated, if relevant. For each submitted structure, a SubmissionResult will be returned.
    /// </para>
    /// <para>
    /// Regular expression: (SubmissionResult+)
    /// </para>
    /// </summary>
    public partial class SubmitStructureResponseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SubmissionResultType> SubmissionResultField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubmitStructureResponseType(XElement xe) { return XTypedServices.ToXTypedElement<SubmitStructureResponseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmitStructureResponseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SubmissionResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// SubmitStructureResponse is returned by the registry when a SubmitStructure is received. It indicates the status of the submission, and carries any error messages which are generated, if relevant. For each submitted structure, a SubmissionResult will be returned.
        /// </para>
        /// <para>
        /// Regular expression: (SubmissionResult+)
        /// </para>
        /// </summary>
        public SubmitStructureResponseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SubmissionResult+)
        /// </para>
        /// </summary>
        public IList<SubmissionResultType> SubmissionResult {
            get {
                if ((this.SubmissionResultField == null)) {
                    this.SubmissionResultField = new XTypedList<SubmissionResultType>(this, LinqToXsdTypeManager.Instance, XName.Get("SubmissionResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.SubmissionResultField;
            }
            set {
                if ((value == null)) {
                    this.SubmissionResultField = null;
                }
                else {
                    if ((this.SubmissionResultField == null)) {
                        this.SubmissionResultField = XTypedList<SubmissionResultType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SubmissionResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<SubmissionResultType>(this.SubmissionResultField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubmitStructureResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmitStructureResponseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SubmissionResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(SubmissionResultType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// QueryStructureRequest is used to query the registry for any maintainable object within the repository. The response is a Structure message. In the reference elements to the queryable registry objects, a valid registry URN or a complete set of other child elements may be used to identify the objects desired in the result set. Any part of an element-based (that is, non-URN) identification of an object which is not provided will be understood as a wild-card value, referring to "all" possible values. The resolveReferences attribute is set to true if all dependent objects should also be returned as part of the result set. (For example, if you query for a key family and want to also have all codelists, concepts, and agencies, returned as well, resolveReferences should be set to true.)
    /// </para>
    /// <para>
    /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
    /// </para>
    /// </summary>
    public partial class QueryStructureRequestType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AgencyRefType> AgencyRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataProviderRefType> DataProviderRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataflowRefType> DataflowRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataflowRefType> MetadataflowRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodelistRefType> CodelistRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategorySchemeRefType> CategorySchemeRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConceptSchemeRefType> ConceptSchemeRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationSchemeRefType> OrganisationSchemeRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<KeyFamilyRefType> KeyFamilyRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataStructureRefType> MetadataStructureRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HierarchicalCodelistRefType> HierarchicalCodelistRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StructureSetRefType> StructureSetRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProcessRefType> ProcessRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReportingTaxonomyRefType> ReportingTaxonomyRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator QueryStructureRequestType(XElement xe) { return XTypedServices.ToXTypedElement<QueryStructureRequestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryStructureRequestType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// QueryStructureRequest is used to query the registry for any maintainable object within the repository. The response is a Structure message. In the reference elements to the queryable registry objects, a valid registry URN or a complete set of other child elements may be used to identify the objects desired in the result set. Any part of an element-based (that is, non-URN) identification of an object which is not provided will be understood as a wild-card value, referring to "all" possible values. The resolveReferences attribute is set to true if all dependent objects should also be returned as part of the result set. (For example, if you query for a key family and want to also have all codelists, concepts, and agencies, returned as well, resolveReferences should be set to true.)
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public QueryStructureRequestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<AgencyRefType> AgencyRef {
            get {
                if ((this.AgencyRefField == null)) {
                    this.AgencyRefField = new XTypedList<AgencyRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("AgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.AgencyRefField;
            }
            set {
                if ((value == null)) {
                    this.AgencyRefField = null;
                }
                else {
                    if ((this.AgencyRefField == null)) {
                        this.AgencyRefField = XTypedList<AgencyRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<AgencyRefType>(this.AgencyRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<DataProviderRefType> DataProviderRef {
            get {
                if ((this.DataProviderRefField == null)) {
                    this.DataProviderRefField = new XTypedList<DataProviderRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataProviderRefField;
            }
            set {
                if ((value == null)) {
                    this.DataProviderRefField = null;
                }
                else {
                    if ((this.DataProviderRefField == null)) {
                        this.DataProviderRefField = XTypedList<DataProviderRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<DataProviderRefType>(this.DataProviderRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<DataflowRefType> DataflowRef {
            get {
                if ((this.DataflowRefField == null)) {
                    this.DataflowRefField = new XTypedList<DataflowRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataflowRefField;
            }
            set {
                if ((value == null)) {
                    this.DataflowRefField = null;
                }
                else {
                    if ((this.DataflowRefField == null)) {
                        this.DataflowRefField = XTypedList<DataflowRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<DataflowRefType>(this.DataflowRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<MetadataflowRefType> MetadataflowRef {
            get {
                if ((this.MetadataflowRefField == null)) {
                    this.MetadataflowRefField = new XTypedList<MetadataflowRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.MetadataflowRefField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowRefField = null;
                }
                else {
                    if ((this.MetadataflowRefField == null)) {
                        this.MetadataflowRefField = XTypedList<MetadataflowRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<MetadataflowRefType>(this.MetadataflowRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<CodelistRefType> CodelistRef {
            get {
                if ((this.CodelistRefField == null)) {
                    this.CodelistRefField = new XTypedList<CodelistRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.CodelistRefField;
            }
            set {
                if ((value == null)) {
                    this.CodelistRefField = null;
                }
                else {
                    if ((this.CodelistRefField == null)) {
                        this.CodelistRefField = XTypedList<CodelistRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<CodelistRefType>(this.CodelistRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<CategorySchemeRefType> CategorySchemeRef {
            get {
                if ((this.CategorySchemeRefField == null)) {
                    this.CategorySchemeRefField = new XTypedList<CategorySchemeRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.CategorySchemeRefField;
            }
            set {
                if ((value == null)) {
                    this.CategorySchemeRefField = null;
                }
                else {
                    if ((this.CategorySchemeRefField == null)) {
                        this.CategorySchemeRefField = XTypedList<CategorySchemeRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<CategorySchemeRefType>(this.CategorySchemeRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<ConceptSchemeRefType> ConceptSchemeRef {
            get {
                if ((this.ConceptSchemeRefField == null)) {
                    this.ConceptSchemeRefField = new XTypedList<ConceptSchemeRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ConceptSchemeRefField;
            }
            set {
                if ((value == null)) {
                    this.ConceptSchemeRefField = null;
                }
                else {
                    if ((this.ConceptSchemeRefField == null)) {
                        this.ConceptSchemeRefField = XTypedList<ConceptSchemeRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<ConceptSchemeRefType>(this.ConceptSchemeRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<OrganisationSchemeRefType> OrganisationSchemeRef {
            get {
                if ((this.OrganisationSchemeRefField == null)) {
                    this.OrganisationSchemeRefField = new XTypedList<OrganisationSchemeRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.OrganisationSchemeRefField;
            }
            set {
                if ((value == null)) {
                    this.OrganisationSchemeRefField = null;
                }
                else {
                    if ((this.OrganisationSchemeRefField == null)) {
                        this.OrganisationSchemeRefField = XTypedList<OrganisationSchemeRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<OrganisationSchemeRefType>(this.OrganisationSchemeRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<KeyFamilyRefType> KeyFamilyRef {
            get {
                if ((this.KeyFamilyRefField == null)) {
                    this.KeyFamilyRefField = new XTypedList<KeyFamilyRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.KeyFamilyRefField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyRefField = null;
                }
                else {
                    if ((this.KeyFamilyRefField == null)) {
                        this.KeyFamilyRefField = XTypedList<KeyFamilyRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<KeyFamilyRefType>(this.KeyFamilyRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<MetadataStructureRefType> MetadataStructureRef {
            get {
                if ((this.MetadataStructureRefField == null)) {
                    this.MetadataStructureRefField = new XTypedList<MetadataStructureRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.MetadataStructureRefField;
            }
            set {
                if ((value == null)) {
                    this.MetadataStructureRefField = null;
                }
                else {
                    if ((this.MetadataStructureRefField == null)) {
                        this.MetadataStructureRefField = XTypedList<MetadataStructureRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<MetadataStructureRefType>(this.MetadataStructureRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<HierarchicalCodelistRefType> HierarchicalCodelistRef {
            get {
                if ((this.HierarchicalCodelistRefField == null)) {
                    this.HierarchicalCodelistRefField = new XTypedList<HierarchicalCodelistRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.HierarchicalCodelistRefField;
            }
            set {
                if ((value == null)) {
                    this.HierarchicalCodelistRefField = null;
                }
                else {
                    if ((this.HierarchicalCodelistRefField == null)) {
                        this.HierarchicalCodelistRefField = XTypedList<HierarchicalCodelistRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<HierarchicalCodelistRefType>(this.HierarchicalCodelistRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<StructureSetRefType> StructureSetRef {
            get {
                if ((this.StructureSetRefField == null)) {
                    this.StructureSetRefField = new XTypedList<StructureSetRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("StructureSetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.StructureSetRefField;
            }
            set {
                if ((value == null)) {
                    this.StructureSetRefField = null;
                }
                else {
                    if ((this.StructureSetRefField == null)) {
                        this.StructureSetRefField = XTypedList<StructureSetRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("StructureSetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<StructureSetRefType>(this.StructureSetRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<ProcessRefType> ProcessRef {
            get {
                if ((this.ProcessRefField == null)) {
                    this.ProcessRefField = new XTypedList<ProcessRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("ProcessRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ProcessRefField;
            }
            set {
                if ((value == null)) {
                    this.ProcessRefField = null;
                }
                else {
                    if ((this.ProcessRefField == null)) {
                        this.ProcessRefField = XTypedList<ProcessRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProcessRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<ProcessRefType>(this.ProcessRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (AgencyRef | DataProviderRef | DataflowRef | MetadataflowRef | CodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | HierarchicalCodelistRef | StructureSetRef | ProcessRef | ReportingTaxonomyRef)+
        /// </para>
        /// </summary>
        public IList<ReportingTaxonomyRefType> ReportingTaxonomyRef {
            get {
                if ((this.ReportingTaxonomyRefField == null)) {
                    this.ReportingTaxonomyRefField = new XTypedList<ReportingTaxonomyRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("ReportingTaxonomyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ReportingTaxonomyRefField;
            }
            set {
                if ((value == null)) {
                    this.ReportingTaxonomyRefField = null;
                }
                else {
                    if ((this.ReportingTaxonomyRefField == null)) {
                        this.ReportingTaxonomyRefField = XTypedList<ReportingTaxonomyRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReportingTaxonomyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<ReportingTaxonomyRefType>(this.ReportingTaxonomyRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public bool resolveReferences {
            get {
                XAttribute x = this.Attribute(XName.Get("resolveReferences", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("resolveReferences", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryStructureRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryStructureRequestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(AgencyRefType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataProviderRefType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(CodelistRefType));
            localElementDictionary.Add(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(CategorySchemeRefType));
            localElementDictionary.Add(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ConceptSchemeRefType));
            localElementDictionary.Add(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(OrganisationSchemeRefType));
            localElementDictionary.Add(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(KeyFamilyRefType));
            localElementDictionary.Add(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataStructureRefType));
            localElementDictionary.Add(XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(HierarchicalCodelistRefType));
            localElementDictionary.Add(XName.Get("StructureSetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StructureSetRefType));
            localElementDictionary.Add(XName.Get("ProcessRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProcessRefType));
            localElementDictionary.Add(XName.Get("ReportingTaxonomyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ReportingTaxonomyRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// QueryStructureResponse is sent in response to a QueryStructureRequest. It carries the status of the response, with any relevant error messages, and then also carries all information found in the rersult set.
    /// </para>
    /// <para>
    /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
    /// </para>
    /// </summary>
    public partial class QueryStructureResponseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QueryStructureResponseType(XElement xe) { return XTypedServices.ToXTypedElement<QueryStructureResponseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryStructureResponseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// QueryStructureResponse is sent in response to a QueryStructureRequest. It carries the status of the response, with any relevant error messages, and then also carries all information found in the rersult set.
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public QueryStructureResponseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public StatusMessageType StatusMessage {
            get {
                XElement x = this.GetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StatusMessageType)(x));
            }
            set {
                this.SetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType OrganisationSchemes {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType)(x));
            }
            set {
                this.SetElement(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType Dataflows {
            get {
                XElement x = this.GetElement(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType)(x));
            }
            set {
                this.SetElement(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType Metadataflows {
            get {
                XElement x = this.GetElement(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType)(x));
            }
            set {
                this.SetElement(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType CategorySchemes {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType)(x));
            }
            set {
                this.SetElement(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType CodeLists {
            get {
                XElement x = this.GetElement(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType)(x));
            }
            set {
                this.SetElement(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType HierarchicalCodelists {
            get {
                XElement x = this.GetElement(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType)(x));
            }
            set {
                this.SetElement(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType Concepts {
            get {
                XElement x = this.GetElement(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType)(x));
            }
            set {
                this.SetElement(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType MetadataStructureDefinitions {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType KeyFamilies {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType)(x));
            }
            set {
                this.SetElement(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType StructureSets {
            get {
                XElement x = this.GetElement(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType)(x));
            }
            set {
                this.SetElement(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType ReportingTaxonomies {
            get {
                XElement x = this.GetElement(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType)(x));
            }
            set {
                this.SetElement(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, ReportingTaxonomies?, Processes?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType Processes {
            get {
                XElement x = this.GetElement(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType)(x));
            }
            set {
                this.SetElement(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryStructureResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryStructureResponseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StatusMessageType));
            localElementDictionary.Add(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType));
            localElementDictionary.Add(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType));
            localElementDictionary.Add(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType));
            localElementDictionary.Add(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType));
            localElementDictionary.Add(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType));
            localElementDictionary.Add(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType));
            localElementDictionary.Add(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType));
            localElementDictionary.Add(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType));
            localElementDictionary.Add(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType));
            localElementDictionary.Add(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType));
            localElementDictionary.Add(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType));
            localElementDictionary.Add(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// This document is sent to the registry services to submit provisioning information. A provision agreement is typically sent, wghich has internal references to existing data rpvodiers and dataflows/metadataflows. These elements are also included as possible separate submissions, because it may be necessary to provide datasource and constraint information independent of the establishment of a provision agreement. 
    /// </para>
    /// <para>
    /// Regular expression: (ProvisionAgreement | DataProviderRef | DataflowRef | MetadatataflowRef)+
    /// </para>
    /// </summary>
    public partial class SubmitProvisioningRequestType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProvisionAgreementType> ProvisionAgreementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataProviderRefType> DataProviderRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataflowRefType> DataflowRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataflowRefType> MetadatataflowRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SubmitProvisioningRequestType(XElement xe) { return XTypedServices.ToXTypedElement<SubmitProvisioningRequestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmitProvisioningRequestType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// This document is sent to the registry services to submit provisioning information. A provision agreement is typically sent, wghich has internal references to existing data rpvodiers and dataflows/metadataflows. These elements are also included as possible separate submissions, because it may be necessary to provide datasource and constraint information independent of the establishment of a provision agreement. 
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement | DataProviderRef | DataflowRef | MetadatataflowRef)+
        /// </para>
        /// </summary>
        public SubmitProvisioningRequestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement | DataProviderRef | DataflowRef | MetadatataflowRef)+
        /// </para>
        /// </summary>
        public IList<ProvisionAgreementType> ProvisionAgreement {
            get {
                if ((this.ProvisionAgreementField == null)) {
                    this.ProvisionAgreementField = new XTypedList<ProvisionAgreementType>(this, LinqToXsdTypeManager.Instance, XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ProvisionAgreementField;
            }
            set {
                if ((value == null)) {
                    this.ProvisionAgreementField = null;
                }
                else {
                    if ((this.ProvisionAgreementField == null)) {
                        this.ProvisionAgreementField = XTypedList<ProvisionAgreementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<ProvisionAgreementType>(this.ProvisionAgreementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement | DataProviderRef | DataflowRef | MetadatataflowRef)+
        /// </para>
        /// </summary>
        public IList<DataProviderRefType> DataProviderRef {
            get {
                if ((this.DataProviderRefField == null)) {
                    this.DataProviderRefField = new XTypedList<DataProviderRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataProviderRefField;
            }
            set {
                if ((value == null)) {
                    this.DataProviderRefField = null;
                }
                else {
                    if ((this.DataProviderRefField == null)) {
                        this.DataProviderRefField = XTypedList<DataProviderRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<DataProviderRefType>(this.DataProviderRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement | DataProviderRef | DataflowRef | MetadatataflowRef)+
        /// </para>
        /// </summary>
        public IList<DataflowRefType> DataflowRef {
            get {
                if ((this.DataflowRefField == null)) {
                    this.DataflowRefField = new XTypedList<DataflowRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataflowRefField;
            }
            set {
                if ((value == null)) {
                    this.DataflowRefField = null;
                }
                else {
                    if ((this.DataflowRefField == null)) {
                        this.DataflowRefField = XTypedList<DataflowRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<DataflowRefType>(this.DataflowRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement | DataProviderRef | DataflowRef | MetadatataflowRef)+
        /// </para>
        /// </summary>
        public IList<MetadataflowRefType> MetadatataflowRef {
            get {
                if ((this.MetadatataflowRefField == null)) {
                    this.MetadatataflowRefField = new XTypedList<MetadataflowRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadatataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.MetadatataflowRefField;
            }
            set {
                if ((value == null)) {
                    this.MetadatataflowRefField = null;
                }
                else {
                    if ((this.MetadatataflowRefField == null)) {
                        this.MetadatataflowRefField = XTypedList<MetadataflowRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadatataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<MetadataflowRefType>(this.MetadatataflowRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubmitProvisioningRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmitProvisioningRequestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisionAgreementType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataProviderRefType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadatataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The ProvisioningResponse element is returned by the registry services in response to a provisioning request. It contains information about the status of the submitted provisioning information, and any relevant error messages in case of failure.
    /// </para>
    /// <para>
    /// Regular expression: (ProvisioningStatus+)
    /// </para>
    /// </summary>
    public partial class SubmitProvisioningResponseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProvisioningStatusType> ProvisioningStatusField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubmitProvisioningResponseType(XElement xe) { return XTypedServices.ToXTypedElement<SubmitProvisioningResponseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmitProvisioningResponseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ProvisioningStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// The ProvisioningResponse element is returned by the registry services in response to a provisioning request. It contains information about the status of the submitted provisioning information, and any relevant error messages in case of failure.
        /// </para>
        /// <para>
        /// Regular expression: (ProvisioningStatus+)
        /// </para>
        /// </summary>
        public SubmitProvisioningResponseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProvisioningStatus+)
        /// </para>
        /// </summary>
        public IList<ProvisioningStatusType> ProvisioningStatus {
            get {
                if ((this.ProvisioningStatusField == null)) {
                    this.ProvisioningStatusField = new XTypedList<ProvisioningStatusType>(this, LinqToXsdTypeManager.Instance, XName.Get("ProvisioningStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ProvisioningStatusField;
            }
            set {
                if ((value == null)) {
                    this.ProvisioningStatusField = null;
                }
                else {
                    if ((this.ProvisioningStatusField == null)) {
                        this.ProvisioningStatusField = XTypedList<ProvisioningStatusType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProvisioningStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<ProvisioningStatusType>(this.ProvisioningStatusField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubmitProvisioningResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmitProvisioningResponseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ProvisioningStatus", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisioningStatusType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// QueryProvisioningRequest is used to query the repository for provisioning metadata. The response is a QueryProvisioningResponse document, carrying either the result set of the query or relevant error messages. Note that whatever information is presented here, regarding provision agreements, data flow, metadataflow, or data providers, is taken to be the search criteria - the query is for all provision agreements which match the supplied criteria. If any of provision agreement, metadataflow, dataflow, or data provider are omitted, the search will apply to all values for those objects in the repository.
    /// </para>
    /// <para>
    /// Regular expression: (ProvisionAgreementRef?, DataflowRef?, MetadataflowRef?, DataProviderRef?)
    /// </para>
    /// </summary>
    public partial class QueryProvisioningRequestType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QueryProvisioningRequestType(XElement xe) { return XTypedServices.ToXTypedElement<QueryProvisioningRequestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryProvisioningRequestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// QueryProvisioningRequest is used to query the repository for provisioning metadata. The response is a QueryProvisioningResponse document, carrying either the result set of the query or relevant error messages. Note that whatever information is presented here, regarding provision agreements, data flow, metadataflow, or data providers, is taken to be the search criteria - the query is for all provision agreements which match the supplied criteria. If any of provision agreement, metadataflow, dataflow, or data provider are omitted, the search will apply to all values for those objects in the repository.
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementRef?, DataflowRef?, MetadataflowRef?, DataProviderRef?)
        /// </para>
        /// </summary>
        public QueryProvisioningRequestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementRef?, DataflowRef?, MetadataflowRef?, DataProviderRef?)
        /// </para>
        /// </summary>
        public ProvisionAgreementRefType ProvisionAgreementRef {
            get {
                XElement x = this.GetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ProvisionAgreementRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementRef?, DataflowRef?, MetadataflowRef?, DataProviderRef?)
        /// </para>
        /// </summary>
        public DataflowRefType DataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementRef?, DataflowRef?, MetadataflowRef?, DataProviderRef?)
        /// </para>
        /// </summary>
        public MetadataflowRefType MetadataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((MetadataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementRef?, DataflowRef?, MetadataflowRef?, DataProviderRef?)
        /// </para>
        /// </summary>
        public DataProviderRefType DataProviderRef {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataProviderRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryProvisioningRequestType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryProvisioningRequestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisionAgreementRefType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataProviderRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The QueryProvisioningResponse element is returned in response to queries regarding provisioning information. It carries either the provisioning information making up the result set, or relevant status messages containing errors or warnings, or both. The references to Dataflow, Metadataflow, and Data Provider are included in those cases where the  result set has these objects, but not associated with any Provisioning Agreement.
    /// </para>
    /// <para>
    /// Regular expression: (ProvisionAgreement*, DataflowRef*, MetadataflowRef*, DataProviderRef*, StatusMessage)
    /// </para>
    /// </summary>
    public partial class QueryProvisioningResponseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProvisionAgreementType> ProvisionAgreementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataflowRefType> DataflowRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MetadataflowRefType> MetadataflowRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataProviderRefType> DataProviderRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QueryProvisioningResponseType(XElement xe) { return XTypedServices.ToXTypedElement<QueryProvisioningResponseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryProvisioningResponseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// The QueryProvisioningResponse element is returned in response to queries regarding provisioning information. It carries either the provisioning information making up the result set, or relevant status messages containing errors or warnings, or both. The references to Dataflow, Metadataflow, and Data Provider are included in those cases where the  result set has these objects, but not associated with any Provisioning Agreement.
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement*, DataflowRef*, MetadataflowRef*, DataProviderRef*, StatusMessage)
        /// </para>
        /// </summary>
        public QueryProvisioningResponseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement*, DataflowRef*, MetadataflowRef*, DataProviderRef*, StatusMessage)
        /// </para>
        /// </summary>
        public IList<ProvisionAgreementType> ProvisionAgreement {
            get {
                if ((this.ProvisionAgreementField == null)) {
                    this.ProvisionAgreementField = new XTypedList<ProvisionAgreementType>(this, LinqToXsdTypeManager.Instance, XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ProvisionAgreementField;
            }
            set {
                if ((value == null)) {
                    this.ProvisionAgreementField = null;
                }
                else {
                    if ((this.ProvisionAgreementField == null)) {
                        this.ProvisionAgreementField = XTypedList<ProvisionAgreementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<ProvisionAgreementType>(this.ProvisionAgreementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement*, DataflowRef*, MetadataflowRef*, DataProviderRef*, StatusMessage)
        /// </para>
        /// </summary>
        public IList<DataflowRefType> DataflowRef {
            get {
                if ((this.DataflowRefField == null)) {
                    this.DataflowRefField = new XTypedList<DataflowRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataflowRefField;
            }
            set {
                if ((value == null)) {
                    this.DataflowRefField = null;
                }
                else {
                    if ((this.DataflowRefField == null)) {
                        this.DataflowRefField = XTypedList<DataflowRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<DataflowRefType>(this.DataflowRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement*, DataflowRef*, MetadataflowRef*, DataProviderRef*, StatusMessage)
        /// </para>
        /// </summary>
        public IList<MetadataflowRefType> MetadataflowRef {
            get {
                if ((this.MetadataflowRefField == null)) {
                    this.MetadataflowRefField = new XTypedList<MetadataflowRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.MetadataflowRefField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowRefField = null;
                }
                else {
                    if ((this.MetadataflowRefField == null)) {
                        this.MetadataflowRefField = XTypedList<MetadataflowRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<MetadataflowRefType>(this.MetadataflowRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement*, DataflowRef*, MetadataflowRef*, DataProviderRef*, StatusMessage)
        /// </para>
        /// </summary>
        public IList<DataProviderRefType> DataProviderRef {
            get {
                if ((this.DataProviderRefField == null)) {
                    this.DataProviderRefField = new XTypedList<DataProviderRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataProviderRefField;
            }
            set {
                if ((value == null)) {
                    this.DataProviderRefField = null;
                }
                else {
                    if ((this.DataProviderRefField == null)) {
                        this.DataProviderRefField = XTypedList<DataProviderRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<DataProviderRefType>(this.DataProviderRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreement*, DataflowRef*, MetadataflowRef*, DataProviderRef*, StatusMessage)
        /// </para>
        /// </summary>
        public StatusMessageType StatusMessage {
            get {
                XElement x = this.GetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StatusMessageType)(x));
            }
            set {
                this.SetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryProvisioningResponseType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryProvisioningResponseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisionAgreementType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataProviderRefType));
            localElementDictionary.Add(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StatusMessageType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Subscriptions submit a subscription for a registry or repository object.Action indicates what action is being taken by sending the request. RegistryURN is used to identify the subscription in the case of deletion or modification. NotificationMAilTo holds an e-mail address (the "mailto:" protocol); NotificationHTTP holds an http address to which notifications can be addressed as POSTs. SubscriberAssignedID allows the subscriber to specify an ID which will be returned as part of the notification for the subscribed events. Validity period sets a start and end date for the subscription, EventSelector indicates an event or events for the subscription.
    /// </para>
    /// <para>
    /// Regular expression: (Action, RegistryURN?, NotificationMailTo?, NotificationHTTP?, SubscriberAssignedID?, ValidityPeriod, EventSelector)
    /// </para>
    /// </summary>
    public partial class SubscriptionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubscriptionType(XElement xe) { return XTypedServices.ToXTypedElement<SubscriptionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubscriptionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Action", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("RegistryURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("NotificationMailTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("NotificationHTTP", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("SubscriberAssignedID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ValidityPeriod", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("EventSelector", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Subscriptions submit a subscription for a registry or repository object.Action indicates what action is being taken by sending the request. RegistryURN is used to identify the subscription in the case of deletion or modification. NotificationMAilTo holds an e-mail address (the "mailto:" protocol); NotificationHTTP holds an http address to which notifications can be addressed as POSTs. SubscriberAssignedID allows the subscriber to specify an ID which will be returned as part of the notification for the subscribed events. Validity period sets a start and end date for the subscription, EventSelector indicates an event or events for the subscription.
        /// </para>
        /// <para>
        /// Regular expression: (Action, RegistryURN?, NotificationMailTo?, NotificationHTTP?, SubscriberAssignedID?, ValidityPeriod, EventSelector)
        /// </para>
        /// </summary>
        public SubscriptionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Action, RegistryURN?, NotificationMailTo?, NotificationHTTP?, SubscriberAssignedID?, ValidityPeriod, EventSelector)
        /// </para>
        /// </summary>
        public string Action {
            get {
                XElement x = this.GetElement(XName.Get("Action", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Action", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "Action", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ActionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Action, RegistryURN?, NotificationMailTo?, NotificationHTTP?, SubscriberAssignedID?, ValidityPeriod, EventSelector)
        /// </para>
        /// </summary>
        public System.Uri RegistryURN {
            get {
                XElement x = this.GetElement(XName.Get("RegistryURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("RegistryURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Action, RegistryURN?, NotificationMailTo?, NotificationHTTP?, SubscriberAssignedID?, ValidityPeriod, EventSelector)
        /// </para>
        /// </summary>
        public System.Uri NotificationMailTo {
            get {
                XElement x = this.GetElement(XName.Get("NotificationMailTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("NotificationMailTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Action, RegistryURN?, NotificationMailTo?, NotificationHTTP?, SubscriberAssignedID?, ValidityPeriod, EventSelector)
        /// </para>
        /// </summary>
        public System.Uri NotificationHTTP {
            get {
                XElement x = this.GetElement(XName.Get("NotificationHTTP", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("NotificationHTTP", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Action, RegistryURN?, NotificationMailTo?, NotificationHTTP?, SubscriberAssignedID?, ValidityPeriod, EventSelector)
        /// </para>
        /// </summary>
        public string SubscriberAssignedID {
            get {
                XElement x = this.GetElement(XName.Get("SubscriberAssignedID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SubscriberAssignedID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "SubscriberAssignedID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Action, RegistryURN?, NotificationMailTo?, NotificationHTTP?, SubscriberAssignedID?, ValidityPeriod, EventSelector)
        /// </para>
        /// </summary>
        public ValidityPeriodType ValidityPeriod {
            get {
                XElement x = this.GetElement(XName.Get("ValidityPeriod", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ValidityPeriodType)(x));
            }
            set {
                this.SetElement(XName.Get("ValidityPeriod", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Action, RegistryURN?, NotificationMailTo?, NotificationHTTP?, SubscriberAssignedID?, ValidityPeriod, EventSelector)
        /// </para>
        /// </summary>
        public EventSelectorType EventSelector {
            get {
                XElement x = this.GetElement(XName.Get("EventSelector", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((EventSelectorType)(x));
            }
            set {
                this.SetElement(XName.Get("EventSelector", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubscriptionType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubscriptionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Action", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("RegistryURN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("NotificationMailTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("NotificationHTTP", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("SubscriberAssignedID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("ValidityPeriod", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ValidityPeriodType));
            localElementDictionary.Add(XName.Get("EventSelector", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(EventSelectorType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Specifies inclusive start and end-dates for the subscription period.
    /// </para>
    /// <para>
    /// Regular expression: (StartDate, EndDate)
    /// </para>
    /// </summary>
    public partial class ValidityPeriodType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ValidityPeriodType(XElement xe) { return XTypedServices.ToXTypedElement<ValidityPeriodType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ValidityPeriodType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("StartDate", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("EndDate", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Specifies inclusive start and end-dates for the subscription period.
        /// </para>
        /// <para>
        /// Regular expression: (StartDate, EndDate)
        /// </para>
        /// </summary>
        public ValidityPeriodType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StartDate, EndDate)
        /// </para>
        /// </summary>
        public System.DateTime StartDate {
            get {
                XElement x = this.GetElement(XName.Get("StartDate", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("StartDate", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StartDate, EndDate)
        /// </para>
        /// </summary>
        public System.DateTime EndDate {
            get {
                XElement x = this.GetElement(XName.Get("EndDate", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("EndDate", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ValidityPeriodType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValidityPeriodType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("StartDate", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("EndDate", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Allows subscribers to specify registry and repository events for which they wish to receive notifications.
    /// </para>
    /// <para>
    /// Regular expression: (StructuralRepositoryEvents?, ProvisioningRepositoryEvents?, DataRegistrationEvents?, MetadataRegistrationEvents?)
    /// </para>
    /// </summary>
    public partial class EventSelectorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator EventSelectorType(XElement xe) { return XTypedServices.ToXTypedElement<EventSelectorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EventSelectorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("StructuralRepositoryEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ProvisioningRepositoryEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataRegistrationEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataRegistrationEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Allows subscribers to specify registry and repository events for which they wish to receive notifications.
        /// </para>
        /// <para>
        /// Regular expression: (StructuralRepositoryEvents?, ProvisioningRepositoryEvents?, DataRegistrationEvents?, MetadataRegistrationEvents?)
        /// </para>
        /// </summary>
        public EventSelectorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StructuralRepositoryEvents?, ProvisioningRepositoryEvents?, DataRegistrationEvents?, MetadataRegistrationEvents?)
        /// </para>
        /// </summary>
        public StructuralRepositoryEventsType StructuralRepositoryEvents {
            get {
                XElement x = this.GetElement(XName.Get("StructuralRepositoryEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StructuralRepositoryEventsType)(x));
            }
            set {
                this.SetElement(XName.Get("StructuralRepositoryEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StructuralRepositoryEvents?, ProvisioningRepositoryEvents?, DataRegistrationEvents?, MetadataRegistrationEvents?)
        /// </para>
        /// </summary>
        public ProvisioningRepositoryEventsType ProvisioningRepositoryEvents {
            get {
                XElement x = this.GetElement(XName.Get("ProvisioningRepositoryEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ProvisioningRepositoryEventsType)(x));
            }
            set {
                this.SetElement(XName.Get("ProvisioningRepositoryEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StructuralRepositoryEvents?, ProvisioningRepositoryEvents?, DataRegistrationEvents?, MetadataRegistrationEvents?)
        /// </para>
        /// </summary>
        public DataRegistrationEventsType DataRegistrationEvents {
            get {
                XElement x = this.GetElement(XName.Get("DataRegistrationEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataRegistrationEventsType)(x));
            }
            set {
                this.SetElement(XName.Get("DataRegistrationEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StructuralRepositoryEvents?, ProvisioningRepositoryEvents?, DataRegistrationEvents?, MetadataRegistrationEvents?)
        /// </para>
        /// </summary>
        public MetadataRegistrationEventsType MetadataRegistrationEvents {
            get {
                XElement x = this.GetElement(XName.Get("MetadataRegistrationEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((MetadataRegistrationEventsType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataRegistrationEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("EventSelectorType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EventSelectorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("StructuralRepositoryEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StructuralRepositoryEventsType));
            localElementDictionary.Add(XName.Get("ProvisioningRepositoryEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisioningRepositoryEventsType));
            localElementDictionary.Add(XName.Get("DataRegistrationEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataRegistrationEventsType));
            localElementDictionary.Add(XName.Get("MetadataRegistrationEvents", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataRegistrationEventsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Contains details of the subscribed structural repository events. AgencyID specifies an agency for the object or objects indicated in the other ID fields. Note that the ID fields (including AgencyID) may hold a complete ID or Repository URN, but may also insert the "%" wildcard character, which represents 0 or more characters, in the ID string. If left empty, all objects will be matched within the other constraints (agency, object type) provided.
    /// </para>
    /// <para>
    /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
    /// </para>
    /// </summary>
    public partial class StructuralRepositoryEventsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AgencyIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AllEventsIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> KeyFamilyIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ConceptSchemeIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> CodeListIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataStructureIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> CategorySchemeIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataflowIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataflowIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> OrganisationSchemeIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> HierarchicalCodelistIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> StructureSetIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ReportingTaxonomyIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ProcessIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StructuralRepositoryEventsType(XElement xe) { return XTypedServices.ToXTypedElement<StructuralRepositoryEventsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructuralRepositoryEventsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CodeListID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("StructureSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ReportingTaxonomyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ProcessID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Contains details of the subscribed structural repository events. AgencyID specifies an agency for the object or objects indicated in the other ID fields. Note that the ID fields (including AgencyID) may hold a complete ID or Repository URN, but may also insert the "%" wildcard character, which represents 0 or more characters, in the ID string. If left empty, all objects will be matched within the other constraints (agency, object type) provided.
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public StructuralRepositoryEventsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> AgencyID {
            get {
                if ((this.AgencyIDField == null)) {
                    this.AgencyIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.AgencyIDField;
            }
            set {
                if ((value == null)) {
                    this.AgencyIDField = null;
                }
                else {
                    if ((this.AgencyIDField == null)) {
                        this.AgencyIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AgencyIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> AllEventsID {
            get {
                if ((this.AllEventsIDField == null)) {
                    this.AllEventsIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.AllEventsIDField;
            }
            set {
                if ((value == null)) {
                    this.AllEventsIDField = null;
                }
                else {
                    if ((this.AllEventsIDField == null)) {
                        this.AllEventsIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AllEventsIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> KeyFamilyID {
            get {
                if ((this.KeyFamilyIDField == null)) {
                    this.KeyFamilyIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.KeyFamilyIDField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyIDField = null;
                }
                else {
                    if ((this.KeyFamilyIDField == null)) {
                        this.KeyFamilyIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.KeyFamilyIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> ConceptSchemeID {
            get {
                if ((this.ConceptSchemeIDField == null)) {
                    this.ConceptSchemeIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ConceptSchemeIDField;
            }
            set {
                if ((value == null)) {
                    this.ConceptSchemeIDField = null;
                }
                else {
                    if ((this.ConceptSchemeIDField == null)) {
                        this.ConceptSchemeIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ConceptSchemeIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> CodeListID {
            get {
                if ((this.CodeListIDField == null)) {
                    this.CodeListIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CodeListID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.CodeListIDField;
            }
            set {
                if ((value == null)) {
                    this.CodeListIDField = null;
                }
                else {
                    if ((this.CodeListIDField == null)) {
                        this.CodeListIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CodeListID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.CodeListIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> MetadataStructureID {
            get {
                if ((this.MetadataStructureIDField == null)) {
                    this.MetadataStructureIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.MetadataStructureIDField;
            }
            set {
                if ((value == null)) {
                    this.MetadataStructureIDField = null;
                }
                else {
                    if ((this.MetadataStructureIDField == null)) {
                        this.MetadataStructureIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataStructureIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> CategorySchemeID {
            get {
                if ((this.CategorySchemeIDField == null)) {
                    this.CategorySchemeIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.CategorySchemeIDField;
            }
            set {
                if ((value == null)) {
                    this.CategorySchemeIDField = null;
                }
                else {
                    if ((this.CategorySchemeIDField == null)) {
                        this.CategorySchemeIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.CategorySchemeIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> DataflowID {
            get {
                if ((this.DataflowIDField == null)) {
                    this.DataflowIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataflowIDField;
            }
            set {
                if ((value == null)) {
                    this.DataflowIDField = null;
                }
                else {
                    if ((this.DataflowIDField == null)) {
                        this.DataflowIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataflowIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> MetadataflowID {
            get {
                if ((this.MetadataflowIDField == null)) {
                    this.MetadataflowIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.MetadataflowIDField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowIDField = null;
                }
                else {
                    if ((this.MetadataflowIDField == null)) {
                        this.MetadataflowIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataflowIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> OrganisationSchemeID {
            get {
                if ((this.OrganisationSchemeIDField == null)) {
                    this.OrganisationSchemeIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.OrganisationSchemeIDField;
            }
            set {
                if ((value == null)) {
                    this.OrganisationSchemeIDField = null;
                }
                else {
                    if ((this.OrganisationSchemeIDField == null)) {
                        this.OrganisationSchemeIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.OrganisationSchemeIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> HierarchicalCodelistID {
            get {
                if ((this.HierarchicalCodelistIDField == null)) {
                    this.HierarchicalCodelistIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.HierarchicalCodelistIDField;
            }
            set {
                if ((value == null)) {
                    this.HierarchicalCodelistIDField = null;
                }
                else {
                    if ((this.HierarchicalCodelistIDField == null)) {
                        this.HierarchicalCodelistIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.HierarchicalCodelistIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> StructureSetID {
            get {
                if ((this.StructureSetIDField == null)) {
                    this.StructureSetIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("StructureSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.StructureSetIDField;
            }
            set {
                if ((value == null)) {
                    this.StructureSetIDField = null;
                }
                else {
                    if ((this.StructureSetIDField == null)) {
                        this.StructureSetIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("StructureSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.StructureSetIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> ReportingTaxonomyID {
            get {
                if ((this.ReportingTaxonomyIDField == null)) {
                    this.ReportingTaxonomyIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ReportingTaxonomyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ReportingTaxonomyIDField;
            }
            set {
                if ((value == null)) {
                    this.ReportingTaxonomyIDField = null;
                }
                else {
                    if ((this.ReportingTaxonomyIDField == null)) {
                        this.ReportingTaxonomyIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ReportingTaxonomyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ReportingTaxonomyIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AgencyID*, AllEventsID*, KeyFamilyID*, ConceptSchemeID*, CodeListID*, MetadataStructureID*, CategorySchemeID*, DataflowID*, MetadataflowID*, OrganisationSchemeID*, HierarchicalCodelistID*, StructureSetID*, ReportingTaxonomyID*, ProcessID*)
        /// </para>
        /// </summary>
        public IList<string> ProcessID {
            get {
                if ((this.ProcessIDField == null)) {
                    this.ProcessIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ProcessID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ProcessIDField;
            }
            set {
                if ((value == null)) {
                    this.ProcessIDField = null;
                }
                else {
                    if ((this.ProcessIDField == null)) {
                        this.ProcessIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ProcessID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ProcessIDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructuralRepositoryEventsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructuralRepositoryEventsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("CodeListID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("StructureSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("ReportingTaxonomyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("ProcessID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Contains details of the subscribed provisioning repository events. Note that the ID fields may hold a complete ID or Repository URN, but may also insert the "%" wildcard character, which represents 0 or more characters, in the ID string. If left empty, all objects will be matched within the other constraints (agency, object type) provided.
    /// </para>
    /// <para>
    /// Regular expression: (ProvisionAgreementID*, DataProviderID*, DataflowID*, MetadataflowID*, AllEventsID*)
    /// </para>
    /// </summary>
    public partial class ProvisioningRepositoryEventsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ProvisionAgreementIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataProviderIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataflowIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataflowIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AllEventsIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ProvisioningRepositoryEventsType(XElement xe) { return XTypedServices.ToXTypedElement<ProvisioningRepositoryEventsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProvisioningRepositoryEventsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Contains details of the subscribed provisioning repository events. Note that the ID fields may hold a complete ID or Repository URN, but may also insert the "%" wildcard character, which represents 0 or more characters, in the ID string. If left empty, all objects will be matched within the other constraints (agency, object type) provided.
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementID*, DataProviderID*, DataflowID*, MetadataflowID*, AllEventsID*)
        /// </para>
        /// </summary>
        public ProvisioningRepositoryEventsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementID*, DataProviderID*, DataflowID*, MetadataflowID*, AllEventsID*)
        /// </para>
        /// </summary>
        public IList<string> ProvisionAgreementID {
            get {
                if ((this.ProvisionAgreementIDField == null)) {
                    this.ProvisionAgreementIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ProvisionAgreementIDField;
            }
            set {
                if ((value == null)) {
                    this.ProvisionAgreementIDField = null;
                }
                else {
                    if ((this.ProvisionAgreementIDField == null)) {
                        this.ProvisionAgreementIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ProvisionAgreementIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementID*, DataProviderID*, DataflowID*, MetadataflowID*, AllEventsID*)
        /// </para>
        /// </summary>
        public IList<string> DataProviderID {
            get {
                if ((this.DataProviderIDField == null)) {
                    this.DataProviderIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataProviderIDField;
            }
            set {
                if ((value == null)) {
                    this.DataProviderIDField = null;
                }
                else {
                    if ((this.DataProviderIDField == null)) {
                        this.DataProviderIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataProviderIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementID*, DataProviderID*, DataflowID*, MetadataflowID*, AllEventsID*)
        /// </para>
        /// </summary>
        public IList<string> DataflowID {
            get {
                if ((this.DataflowIDField == null)) {
                    this.DataflowIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataflowIDField;
            }
            set {
                if ((value == null)) {
                    this.DataflowIDField = null;
                }
                else {
                    if ((this.DataflowIDField == null)) {
                        this.DataflowIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataflowIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementID*, DataProviderID*, DataflowID*, MetadataflowID*, AllEventsID*)
        /// </para>
        /// </summary>
        public IList<string> MetadataflowID {
            get {
                if ((this.MetadataflowIDField == null)) {
                    this.MetadataflowIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.MetadataflowIDField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowIDField = null;
                }
                else {
                    if ((this.MetadataflowIDField == null)) {
                        this.MetadataflowIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataflowIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProvisionAgreementID*, DataProviderID*, DataflowID*, MetadataflowID*, AllEventsID*)
        /// </para>
        /// </summary>
        public IList<string> AllEventsID {
            get {
                if ((this.AllEventsIDField == null)) {
                    this.AllEventsIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.AllEventsIDField;
            }
            set {
                if ((value == null)) {
                    this.AllEventsIDField = null;
                }
                else {
                    if ((this.AllEventsIDField == null)) {
                        this.AllEventsIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AllEventsIDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProvisioningRepositoryEventsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProvisioningRepositoryEventsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Contains details of the subscribed data registry events. Note that the ID fields may hold a complete ID or Registry URN, but may also insert the "%" wildcard character, which represents 0 or more characters, in the ID string. If left empty, all objects will be matched within the other constraints (agency, object type) provided.
    /// </para>
    /// <para>
    /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, DataflowID*, KeyFamilyID*, CategoryID*, CategorySchemeID*, CategorySchemeAgencyID*)
    /// </para>
    /// </summary>
    public partial class DataRegistrationEventsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AllEventsIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataProviderIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ProvisionAgreementIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataflowIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> KeyFamilyIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> CategoryIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> CategorySchemeIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> CategorySchemeAgencyIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataRegistrationEventsType(XElement xe) { return XTypedServices.ToXTypedElement<DataRegistrationEventsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataRegistrationEventsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CategorySchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Contains details of the subscribed data registry events. Note that the ID fields may hold a complete ID or Registry URN, but may also insert the "%" wildcard character, which represents 0 or more characters, in the ID string. If left empty, all objects will be matched within the other constraints (agency, object type) provided.
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, DataflowID*, KeyFamilyID*, CategoryID*, CategorySchemeID*, CategorySchemeAgencyID*)
        /// </para>
        /// </summary>
        public DataRegistrationEventsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, DataflowID*, KeyFamilyID*, CategoryID*, CategorySchemeID*, CategorySchemeAgencyID*)
        /// </para>
        /// </summary>
        public IList<string> AllEventsID {
            get {
                if ((this.AllEventsIDField == null)) {
                    this.AllEventsIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.AllEventsIDField;
            }
            set {
                if ((value == null)) {
                    this.AllEventsIDField = null;
                }
                else {
                    if ((this.AllEventsIDField == null)) {
                        this.AllEventsIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AllEventsIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, DataflowID*, KeyFamilyID*, CategoryID*, CategorySchemeID*, CategorySchemeAgencyID*)
        /// </para>
        /// </summary>
        public IList<string> DataProviderID {
            get {
                if ((this.DataProviderIDField == null)) {
                    this.DataProviderIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataProviderIDField;
            }
            set {
                if ((value == null)) {
                    this.DataProviderIDField = null;
                }
                else {
                    if ((this.DataProviderIDField == null)) {
                        this.DataProviderIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataProviderIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, DataflowID*, KeyFamilyID*, CategoryID*, CategorySchemeID*, CategorySchemeAgencyID*)
        /// </para>
        /// </summary>
        public IList<string> ProvisionAgreementID {
            get {
                if ((this.ProvisionAgreementIDField == null)) {
                    this.ProvisionAgreementIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ProvisionAgreementIDField;
            }
            set {
                if ((value == null)) {
                    this.ProvisionAgreementIDField = null;
                }
                else {
                    if ((this.ProvisionAgreementIDField == null)) {
                        this.ProvisionAgreementIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ProvisionAgreementIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, DataflowID*, KeyFamilyID*, CategoryID*, CategorySchemeID*, CategorySchemeAgencyID*)
        /// </para>
        /// </summary>
        public IList<string> DataflowID {
            get {
                if ((this.DataflowIDField == null)) {
                    this.DataflowIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataflowIDField;
            }
            set {
                if ((value == null)) {
                    this.DataflowIDField = null;
                }
                else {
                    if ((this.DataflowIDField == null)) {
                        this.DataflowIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataflowIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, DataflowID*, KeyFamilyID*, CategoryID*, CategorySchemeID*, CategorySchemeAgencyID*)
        /// </para>
        /// </summary>
        public IList<string> KeyFamilyID {
            get {
                if ((this.KeyFamilyIDField == null)) {
                    this.KeyFamilyIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.KeyFamilyIDField;
            }
            set {
                if ((value == null)) {
                    this.KeyFamilyIDField = null;
                }
                else {
                    if ((this.KeyFamilyIDField == null)) {
                        this.KeyFamilyIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.KeyFamilyIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, DataflowID*, KeyFamilyID*, CategoryID*, CategorySchemeID*, CategorySchemeAgencyID*)
        /// </para>
        /// </summary>
        public IList<string> CategoryID {
            get {
                if ((this.CategoryIDField == null)) {
                    this.CategoryIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.CategoryIDField;
            }
            set {
                if ((value == null)) {
                    this.CategoryIDField = null;
                }
                else {
                    if ((this.CategoryIDField == null)) {
                        this.CategoryIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.CategoryIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, DataflowID*, KeyFamilyID*, CategoryID*, CategorySchemeID*, CategorySchemeAgencyID*)
        /// </para>
        /// </summary>
        public IList<string> CategorySchemeID {
            get {
                if ((this.CategorySchemeIDField == null)) {
                    this.CategorySchemeIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.CategorySchemeIDField;
            }
            set {
                if ((value == null)) {
                    this.CategorySchemeIDField = null;
                }
                else {
                    if ((this.CategorySchemeIDField == null)) {
                        this.CategorySchemeIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.CategorySchemeIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, DataflowID*, KeyFamilyID*, CategoryID*, CategorySchemeID*, CategorySchemeAgencyID*)
        /// </para>
        /// </summary>
        public IList<string> CategorySchemeAgencyID {
            get {
                if ((this.CategorySchemeAgencyIDField == null)) {
                    this.CategorySchemeAgencyIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CategorySchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.CategorySchemeAgencyIDField;
            }
            set {
                if ((value == null)) {
                    this.CategorySchemeAgencyIDField = null;
                }
                else {
                    if ((this.CategorySchemeAgencyIDField == null)) {
                        this.CategorySchemeAgencyIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CategorySchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.CategorySchemeAgencyIDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataRegistrationEventsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataRegistrationEventsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("CategorySchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Contains details of the subscribed metadadata registry events. Note that the ID fields may hold a complete ID or Registry URN, but may also insert the "%" wildcard character, which represents 0 or more characters, in the ID string. If left empty, all objects will be matched within the other constraints (agency, object type) provided.
    /// </para>
    /// <para>
    /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, MetadataflowID*, MetadatastructureID*, CategoryID*)
    /// </para>
    /// </summary>
    public partial class MetadataRegistrationEventsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AllEventsIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DataProviderIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ProvisionAgreementIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadataflowIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MetadatastructureIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> CategoryIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataRegistrationEventsType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataRegistrationEventsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataRegistrationEventsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadatastructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Contains details of the subscribed metadadata registry events. Note that the ID fields may hold a complete ID or Registry URN, but may also insert the "%" wildcard character, which represents 0 or more characters, in the ID string. If left empty, all objects will be matched within the other constraints (agency, object type) provided.
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, MetadataflowID*, MetadatastructureID*, CategoryID*)
        /// </para>
        /// </summary>
        public MetadataRegistrationEventsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, MetadataflowID*, MetadatastructureID*, CategoryID*)
        /// </para>
        /// </summary>
        public IList<string> AllEventsID {
            get {
                if ((this.AllEventsIDField == null)) {
                    this.AllEventsIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.AllEventsIDField;
            }
            set {
                if ((value == null)) {
                    this.AllEventsIDField = null;
                }
                else {
                    if ((this.AllEventsIDField == null)) {
                        this.AllEventsIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AllEventsIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, MetadataflowID*, MetadatastructureID*, CategoryID*)
        /// </para>
        /// </summary>
        public IList<string> DataProviderID {
            get {
                if ((this.DataProviderIDField == null)) {
                    this.DataProviderIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DataProviderIDField;
            }
            set {
                if ((value == null)) {
                    this.DataProviderIDField = null;
                }
                else {
                    if ((this.DataProviderIDField == null)) {
                        this.DataProviderIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DataProviderIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, MetadataflowID*, MetadatastructureID*, CategoryID*)
        /// </para>
        /// </summary>
        public IList<string> ProvisionAgreementID {
            get {
                if ((this.ProvisionAgreementIDField == null)) {
                    this.ProvisionAgreementIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.ProvisionAgreementIDField;
            }
            set {
                if ((value == null)) {
                    this.ProvisionAgreementIDField = null;
                }
                else {
                    if ((this.ProvisionAgreementIDField == null)) {
                        this.ProvisionAgreementIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ProvisionAgreementIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, MetadataflowID*, MetadatastructureID*, CategoryID*)
        /// </para>
        /// </summary>
        public IList<string> MetadataflowID {
            get {
                if ((this.MetadataflowIDField == null)) {
                    this.MetadataflowIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.MetadataflowIDField;
            }
            set {
                if ((value == null)) {
                    this.MetadataflowIDField = null;
                }
                else {
                    if ((this.MetadataflowIDField == null)) {
                        this.MetadataflowIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadataflowIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, MetadataflowID*, MetadatastructureID*, CategoryID*)
        /// </para>
        /// </summary>
        public IList<string> MetadatastructureID {
            get {
                if ((this.MetadatastructureIDField == null)) {
                    this.MetadatastructureIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("MetadatastructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.MetadatastructureIDField;
            }
            set {
                if ((value == null)) {
                    this.MetadatastructureIDField = null;
                }
                else {
                    if ((this.MetadatastructureIDField == null)) {
                        this.MetadatastructureIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("MetadatastructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MetadatastructureIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AllEventsID*, DataProviderID*, ProvisionAgreementID*, MetadataflowID*, MetadatastructureID*, CategoryID*)
        /// </para>
        /// </summary>
        public IList<string> CategoryID {
            get {
                if ((this.CategoryIDField == null)) {
                    this.CategoryIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.CategoryIDField;
            }
            set {
                if ((value == null)) {
                    this.CategoryIDField = null;
                }
                else {
                    if ((this.CategoryIDField == null)) {
                        this.CategoryIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.CategoryIDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataRegistrationEventsType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataRegistrationEventsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AllEventsID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("ProvisionAgreementID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadatastructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("CategoryID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// This provides the details of a structural repository event for the purposes of notification.
    /// </para>
    /// <para>
    /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
    /// </para>
    /// </summary>
    public partial class StructuralEventType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StructuralEventType(XElement xe) { return XTypedServices.ToXTypedElement<StructuralEventType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructuralEventType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// This provides the details of a structural repository event for the purposes of notification.
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public StructuralEventType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType OrganisationSchemes {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType)(x));
            }
            set {
                this.SetElement(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType Dataflows {
            get {
                XElement x = this.GetElement(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType)(x));
            }
            set {
                this.SetElement(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType Metadataflows {
            get {
                XElement x = this.GetElement(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType)(x));
            }
            set {
                this.SetElement(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType CategorySchemes {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType)(x));
            }
            set {
                this.SetElement(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType CodeLists {
            get {
                XElement x = this.GetElement(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType)(x));
            }
            set {
                this.SetElement(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType HierarchicalCodelists {
            get {
                XElement x = this.GetElement(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType)(x));
            }
            set {
                this.SetElement(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType Concepts {
            get {
                XElement x = this.GetElement(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType)(x));
            }
            set {
                this.SetElement(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType MetadataStructureDefinitions {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType KeyFamilies {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType)(x));
            }
            set {
                this.SetElement(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType StructureSets {
            get {
                XElement x = this.GetElement(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType)(x));
            }
            set {
                this.SetElement(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType Processes {
            get {
                XElement x = this.GetElement(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType)(x));
            }
            set {
                this.SetElement(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType ReportingTaxonomies {
            get {
                XElement x = this.GetElement(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType)(x));
            }
            set {
                this.SetElement(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructuralEventType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructuralEventType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType));
            localElementDictionary.Add(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType));
            localElementDictionary.Add(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType));
            localElementDictionary.Add(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType));
            localElementDictionary.Add(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType));
            localElementDictionary.Add(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType));
            localElementDictionary.Add(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType));
            localElementDictionary.Add(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType));
            localElementDictionary.Add(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType));
            localElementDictionary.Add(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType));
            localElementDictionary.Add(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType));
            localElementDictionary.Add(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// This provides the details of a provisioning event for the purposes of notification.
    /// </para>
    /// <para>
    /// Regular expression: (DataProviderRef?, DataflowRef?, MetadataflowRef?, ProvisionAgreement?)
    /// </para>
    /// </summary>
    public partial class ProvisioningEventType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ProvisioningEventType(XElement xe) { return XTypedServices.ToXTypedElement<ProvisioningEventType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProvisioningEventType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// This provides the details of a provisioning event for the purposes of notification.
        /// </para>
        /// <para>
        /// Regular expression: (DataProviderRef?, DataflowRef?, MetadataflowRef?, ProvisionAgreement?)
        /// </para>
        /// </summary>
        public ProvisioningEventType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DataProviderRef?, DataflowRef?, MetadataflowRef?, ProvisionAgreement?)
        /// </para>
        /// </summary>
        public DataProviderRefType DataProviderRef {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataProviderRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DataProviderRef?, DataflowRef?, MetadataflowRef?, ProvisionAgreement?)
        /// </para>
        /// </summary>
        public DataflowRefType DataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DataProviderRef?, DataflowRef?, MetadataflowRef?, ProvisionAgreement?)
        /// </para>
        /// </summary>
        public MetadataflowRefType MetadataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((MetadataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DataProviderRef?, DataflowRef?, MetadataflowRef?, ProvisionAgreement?)
        /// </para>
        /// </summary>
        public ProvisionAgreementType ProvisionAgreement {
            get {
                XElement x = this.GetElement(XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ProvisionAgreementType)(x));
            }
            set {
                this.SetElement(XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProvisioningEventType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProvisioningEventType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataProviderRefType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("ProvisionAgreement", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisionAgreementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// This provides the details of a data or metadata registration event for the purposes of notification.
    /// </para>
    /// <para>
    /// Regular expression: (Registration)
    /// </para>
    /// </summary>
    public partial class RegistrationEventType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RegistrationEventType(XElement xe) { return XTypedServices.ToXTypedElement<RegistrationEventType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RegistrationEventType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Registration", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// This provides the details of a data or metadata registration event for the purposes of notification.
        /// </para>
        /// <para>
        /// Regular expression: (Registration)
        /// </para>
        /// </summary>
        public RegistrationEventType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Registration)
        /// </para>
        /// </summary>
        public RegistrationType Registration {
            get {
                XElement x = this.GetElement(XName.Get("Registration", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((RegistrationType)(x));
            }
            set {
                this.SetElement(XName.Get("Registration", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RegistrationEventType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RegistrationEventType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Registration", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(RegistrationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Provision agreements contain a reference to a pre-existing data flow or metadata flow definition and a pre-existing data (or metadata) provider in the registry. They also must have the action attribute set, indicating whether this is an addition, a modification, or a deletion of a provision agreement. They may also supply boolean values which describe how the registry must behave: if indexTimeSeries is true, then the registry must index all time series when a data set is registered against this provision agreement; if indexDataSet is true, then the registry must index the range of actual (present) values for each dimension of the Dataset (as indicated in the dataset's key family); if indexReportingPeriod is true, then the registry must index the time period ranges for which data are present in the dataset(s) registered against the provision agreement. Note that the values for these attributes are not needed when a Delete action is indicated. As for all identifiable objects, provision agreements have Name and Description elements, which are repeatable to provide language-specific forms. These may be ommitted if the provision agreement already exists (as is the case for modification and deletion); descriptions are always optional. The id attribute holds the unique id of the provision agreement as derived (according to teh logical registry specifcation.) If specified, the uri attribute points to a location (typically a URL) where the provision agreement is described in a valid QueryProvisioningResponse message. The urn attribute holds the reserved registry URN assigned to the provision agreement - this must be included when the ProvisionAgreement structure is used in a response document of any type. The action  attribute must be specified when the provisionAgreement is used in a request document of any type.. Datasource is used to describe the data source associated with the provider agreement. Annotations may be provided in the Annotations element. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
    /// </para>
    /// <para>
    /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?)
    /// </para>
    /// </summary>
    public partial class ProvisionAgreementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> DescriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ProvisionAgreementType(XElement xe) { return XTypedServices.ToXTypedElement<ProvisionAgreementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProvisionAgreementType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Provision agreements contain a reference to a pre-existing data flow or metadata flow definition and a pre-existing data (or metadata) provider in the registry. They also must have the action attribute set, indicating whether this is an addition, a modification, or a deletion of a provision agreement. They may also supply boolean values which describe how the registry must behave: if indexTimeSeries is true, then the registry must index all time series when a data set is registered against this provision agreement; if indexDataSet is true, then the registry must index the range of actual (present) values for each dimension of the Dataset (as indicated in the dataset's key family); if indexReportingPeriod is true, then the registry must index the time period ranges for which data are present in the dataset(s) registered against the provision agreement. Note that the values for these attributes are not needed when a Delete action is indicated. As for all identifiable objects, provision agreements have Name and Description elements, which are repeatable to provide language-specific forms. These may be ommitted if the provision agreement already exists (as is the case for modification and deletion); descriptions are always optional. The id attribute holds the unique id of the provision agreement as derived (according to teh logical registry specifcation.) If specified, the uri attribute points to a location (typically a URL) where the provision agreement is described in a valid QueryProvisioningResponse message. The urn attribute holds the reserved registry URN assigned to the provision agreement - this must be included when the ProvisionAgreement structure is used in a response document of any type. The action  attribute must be specified when the provisionAgreement is used in a request document of any type.. Datasource is used to describe the data source associated with the provider agreement. Annotations may be provided in the Annotations element. The validFrom and validTo attributes provide inclusive dates for providing supplemental validity information about the version.
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?)
        /// </para>
        /// </summary>
        public ProvisionAgreementType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Name {
            get {
                if ((this.NameField == null)) {
                    this.NameField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.NameField;
            }
            set {
                if ((value == null)) {
                    this.NameField = null;
                }
                else {
                    if ((this.NameField == null)) {
                        this.NameField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.NameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> Description {
            get {
                if ((this.DescriptionField == null)) {
                    this.DescriptionField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.DescriptionField;
            }
            set {
                if ((value == null)) {
                    this.DescriptionField = null;
                }
                else {
                    if ((this.DescriptionField == null)) {
                        this.DescriptionField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.DescriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?)
        /// </para>
        /// </summary>
        public DataflowRefType DataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?)
        /// </para>
        /// </summary>
        public MetadataflowRefType MetadataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((MetadataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?)
        /// </para>
        /// </summary>
        public DataProviderRefType DataProviderRef {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataProviderRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?)
        /// </para>
        /// </summary>
        public QueryableDatasourceType Datasource {
            get {
                XElement x = this.GetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((QueryableDatasourceType)(x));
            }
            set {
                this.SetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType Constraint {
            get {
                XElement x = this.GetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType)(x));
            }
            set {
                this.SetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType Annotations {
            get {
                XElement x = this.GetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType)(x));
            }
            set {
                this.SetElement(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri uri {
            get {
                XAttribute x = this.Attribute(XName.Get("uri", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("uri", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri urn {
            get {
                XAttribute x = this.Attribute(XName.Get("urn", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                XAttribute x = this.Attribute(XName.Get("action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> indexTimeSeries {
            get {
                XAttribute x = this.Attribute(XName.Get("indexTimeSeries", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("indexTimeSeries", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> indexDataSet {
            get {
                XAttribute x = this.Attribute(XName.Get("indexDataSet", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("indexDataSet", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> indexReportingPeriod {
            get {
                XAttribute x = this.Attribute(XName.Get("indexReportingPeriod", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("indexReportingPeriod", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFrom {
            get {
                XAttribute x = this.Attribute(XName.Get("validFrom", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFrom", this, XName.Get("validFrom", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validTo {
            get {
                XAttribute x = this.Attribute(XName.Get("validTo", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validTo", this, XName.Get("validTo", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProvisionAgreementType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProvisionAgreementType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataProviderRefType));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(QueryableDatasourceType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Datasource specifies the properties of a data or metadata source. A SimpleDatasource requires only the URL of the data. A QueryableDatasource must be able to accept an SDMX-ML Query Message, and respond appropriately. Either or both may be specified.
    /// </para>
    /// <para>
    /// Regular expression: (SimpleDatasource?, QueryableDatasource?)
    /// </para>
    /// </summary>
    public partial class DatasourceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DatasourceType(XElement xe) { return XTypedServices.ToXTypedElement<DatasourceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DatasourceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SimpleDatasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("QueryableDatasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Datasource specifies the properties of a data or metadata source. A SimpleDatasource requires only the URL of the data. A QueryableDatasource must be able to accept an SDMX-ML Query Message, and respond appropriately. Either or both may be specified.
        /// </para>
        /// <para>
        /// Regular expression: (SimpleDatasource?, QueryableDatasource?)
        /// </para>
        /// </summary>
        public DatasourceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SimpleDatasource?, QueryableDatasource?)
        /// </para>
        /// </summary>
        public System.Uri SimpleDatasource {
            get {
                XElement x = this.GetElement(XName.Get("SimpleDatasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("SimpleDatasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SimpleDatasource?, QueryableDatasource?)
        /// </para>
        /// </summary>
        public QueryableDatasourceType QueryableDatasource {
            get {
                XElement x = this.GetElement(XName.Get("QueryableDatasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((QueryableDatasourceType)(x));
            }
            set {
                this.SetElement(XName.Get("QueryableDatasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DatasourceType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DatasourceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SimpleDatasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("QueryableDatasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(QueryableDatasourceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// If the data provider uses a single, queryable data source for all provision agreements contained in the ProvisionRequest element, then this element should be used to describe the queryable datasource. DataUrl contains the URL of the datasource, with WSDLUrl optionally providing the location of a WSDL instance on the internet which deascribes the queryable datasource. The attributes isRESTDatasource and isWebServiceDatasource indicate, if true, that the queryable datasource is accessible via the REST protocol and/or Web Services protocols, respectively.
    /// </para>
    /// <para>
    /// Regular expression: (DataUrl, WSDLUrl?)
    /// </para>
    /// </summary>
    public partial class QueryableDatasourceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QueryableDatasourceType(XElement xe) { return XTypedServices.ToXTypedElement<QueryableDatasourceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryableDatasourceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataUrl", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("WSDLUrl", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// If the data provider uses a single, queryable data source for all provision agreements contained in the ProvisionRequest element, then this element should be used to describe the queryable datasource. DataUrl contains the URL of the datasource, with WSDLUrl optionally providing the location of a WSDL instance on the internet which deascribes the queryable datasource. The attributes isRESTDatasource and isWebServiceDatasource indicate, if true, that the queryable datasource is accessible via the REST protocol and/or Web Services protocols, respectively.
        /// </para>
        /// <para>
        /// Regular expression: (DataUrl, WSDLUrl?)
        /// </para>
        /// </summary>
        public QueryableDatasourceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DataUrl, WSDLUrl?)
        /// </para>
        /// </summary>
        public System.Uri DataUrl {
            get {
                XElement x = this.GetElement(XName.Get("DataUrl", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataUrl", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DataUrl, WSDLUrl?)
        /// </para>
        /// </summary>
        public System.Uri WSDLUrl {
            get {
                XElement x = this.GetElement(XName.Get("WSDLUrl", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("WSDLUrl", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public bool isRESTDatasource {
            get {
                XAttribute x = this.Attribute(XName.Get("isRESTDatasource", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isRESTDatasource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public bool isWebServiceDatasource {
            get {
                XAttribute x = this.Attribute(XName.Get("isWebServiceDatasource", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isWebServiceDatasource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryableDatasourceType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryableDatasourceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataUrl", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("WSDLUrl", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// For each provision agreement, dataflow reference, metadataflow reference, or data provider reference submitted in a provisioning request, a provisioning status will be returned, providing a status and any warnings or errors.
    /// </para>
    /// <para>
    /// Regular expression: ((ProvisionAgreementRef | DataProviderRef | DataflowRef | MetadataflowRef), StatusMessage)
    /// </para>
    /// </summary>
    public partial class ProvisioningStatusType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ProvisioningStatusType(XElement xe) { return XTypedServices.ToXTypedElement<ProvisioningStatusType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProvisioningStatusType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// For each provision agreement, dataflow reference, metadataflow reference, or data provider reference submitted in a provisioning request, a provisioning status will be returned, providing a status and any warnings or errors.
        /// </para>
        /// <para>
        /// Regular expression: ((ProvisionAgreementRef | DataProviderRef | DataflowRef | MetadataflowRef), StatusMessage)
        /// </para>
        /// </summary>
        public ProvisioningStatusType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ProvisionAgreementRef | DataProviderRef | DataflowRef | MetadataflowRef), StatusMessage)
        /// </para>
        /// </summary>
        public ProvisionAgreementRefType ProvisionAgreementRef {
            get {
                XElement x = this.GetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ProvisionAgreementRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ProvisionAgreementRef | DataProviderRef | DataflowRef | MetadataflowRef), StatusMessage)
        /// </para>
        /// </summary>
        public DataProviderRefType DataProviderRef {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataProviderRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ProvisionAgreementRef | DataProviderRef | DataflowRef | MetadataflowRef), StatusMessage)
        /// </para>
        /// </summary>
        public DataflowRefType DataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ProvisionAgreementRef | DataProviderRef | DataflowRef | MetadataflowRef), StatusMessage)
        /// </para>
        /// </summary>
        public MetadataflowRefType MetadataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((MetadataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((ProvisionAgreementRef | DataProviderRef | DataflowRef | MetadataflowRef), StatusMessage)
        /// </para>
        /// </summary>
        public StatusMessageType StatusMessage {
            get {
                XElement x = this.GetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StatusMessageType)(x));
            }
            set {
                this.SetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProvisioningStatusType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProvisioningStatusType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisionAgreementRefType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataProviderRefType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StatusMessageType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Registration provides the information needed for data and reference metadata set registration. LastUpdated can provide a time stamp; ValidFrom and ValidTo allow for effectivity, so that data visibility from the registry can be controlled by the registrant. A Datasource must be supplied here if not already provided in the provision agreement. The data set or metadata set must be associated with a provision agreement,  a metadataflow, or a dataflow definition. If possible, the provision agreement should be specified. Only in cases where this is not possible should the dataflow or metadataflow be used.
    /// </para>
    /// <para>
    /// Regular expression: (LastUpdated?, ValidFrom?, ValidTo?, Action, Datasource?, (DataflowRef | MetadataflowRef | ProvisionAgreementRef))
    /// </para>
    /// </summary>
    public partial class RegistrationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator RegistrationType(XElement xe) { return XTypedServices.ToXTypedElement<RegistrationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RegistrationType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Registration provides the information needed for data and reference metadata set registration. LastUpdated can provide a time stamp; ValidFrom and ValidTo allow for effectivity, so that data visibility from the registry can be controlled by the registrant. A Datasource must be supplied here if not already provided in the provision agreement. The data set or metadata set must be associated with a provision agreement,  a metadataflow, or a dataflow definition. If possible, the provision agreement should be specified. Only in cases where this is not possible should the dataflow or metadataflow be used.
        /// </para>
        /// <para>
        /// Regular expression: (LastUpdated?, ValidFrom?, ValidTo?, Action, Datasource?, (DataflowRef | MetadataflowRef | ProvisionAgreementRef))
        /// </para>
        /// </summary>
        public RegistrationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastUpdated?, ValidFrom?, ValidTo?, Action, Datasource?, (DataflowRef | MetadataflowRef | ProvisionAgreementRef))
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> LastUpdated {
            get {
                XElement x = this.GetElement(XName.Get("LastUpdated", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("LastUpdated", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastUpdated?, ValidFrom?, ValidTo?, Action, Datasource?, (DataflowRef | MetadataflowRef | ProvisionAgreementRef))
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> ValidFrom {
            get {
                XElement x = this.GetElement(XName.Get("ValidFrom", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("ValidFrom", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastUpdated?, ValidFrom?, ValidTo?, Action, Datasource?, (DataflowRef | MetadataflowRef | ProvisionAgreementRef))
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> ValidTo {
            get {
                XElement x = this.GetElement(XName.Get("ValidTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("ValidTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LastUpdated?, ValidFrom?, ValidTo?, Action, Datasource?, (DataflowRef | MetadataflowRef | ProvisionAgreementRef))
        /// </para>
        /// </summary>
        public string Action {
            get {
                XElement x = this.GetElement(XName.Get("Action", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Action", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "Action", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ActionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastUpdated?, ValidFrom?, ValidTo?, Action, Datasource?, (DataflowRef | MetadataflowRef | ProvisionAgreementRef))
        /// </para>
        /// </summary>
        public DatasourceType Datasource {
            get {
                XElement x = this.GetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DatasourceType)(x));
            }
            set {
                this.SetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (LastUpdated?, ValidFrom?, ValidTo?, Action, Datasource?, (DataflowRef | MetadataflowRef | ProvisionAgreementRef))
        /// </para>
        /// </summary>
        public DataflowRefType DataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (LastUpdated?, ValidFrom?, ValidTo?, Action, Datasource?, (DataflowRef | MetadataflowRef | ProvisionAgreementRef))
        /// </para>
        /// </summary>
        public MetadataflowRefType MetadataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((MetadataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (LastUpdated?, ValidFrom?, ValidTo?, Action, Datasource?, (DataflowRef | MetadataflowRef | ProvisionAgreementRef))
        /// </para>
        /// </summary>
        public ProvisionAgreementRefType ProvisionAgreementRef {
            get {
                XElement x = this.GetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ProvisionAgreementRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RegistrationType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RegistrationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("LastUpdated", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("ValidFrom", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("ValidTo", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("Action", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DatasourceType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisionAgreementRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Each RegistrationStatus reports the status of a submitted data set or metadata set registration, and carries any error messages. If successful, the Datasource which has been registered is returned, and a reference to the provision agreement, dataflow, metadataflow, or data provider is returned.
    /// </para>
    /// <para>
    /// Regular expression: (StatusMessage, Datasource?, DataProviderRef?, DataflowRef?, MetadaflowRef?, ProvisionAgreementRef?)
    /// </para>
    /// </summary>
    public partial class RegistrationStatusType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RegistrationStatusType(XElement xe) { return XTypedServices.ToXTypedElement<RegistrationStatusType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RegistrationStatusType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadaflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Each RegistrationStatus reports the status of a submitted data set or metadata set registration, and carries any error messages. If successful, the Datasource which has been registered is returned, and a reference to the provision agreement, dataflow, metadataflow, or data provider is returned.
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, Datasource?, DataProviderRef?, DataflowRef?, MetadaflowRef?, ProvisionAgreementRef?)
        /// </para>
        /// </summary>
        public RegistrationStatusType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, Datasource?, DataProviderRef?, DataflowRef?, MetadaflowRef?, ProvisionAgreementRef?)
        /// </para>
        /// </summary>
        public StatusMessageType StatusMessage {
            get {
                XElement x = this.GetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StatusMessageType)(x));
            }
            set {
                this.SetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, Datasource?, DataProviderRef?, DataflowRef?, MetadaflowRef?, ProvisionAgreementRef?)
        /// </para>
        /// </summary>
        public DatasourceType Datasource {
            get {
                XElement x = this.GetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DatasourceType)(x));
            }
            set {
                this.SetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, Datasource?, DataProviderRef?, DataflowRef?, MetadaflowRef?, ProvisionAgreementRef?)
        /// </para>
        /// </summary>
        public DataProviderRefType DataProviderRef {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataProviderRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, Datasource?, DataProviderRef?, DataflowRef?, MetadaflowRef?, ProvisionAgreementRef?)
        /// </para>
        /// </summary>
        public DataflowRefType DataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, Datasource?, DataProviderRef?, DataflowRef?, MetadaflowRef?, ProvisionAgreementRef?)
        /// </para>
        /// </summary>
        public MetadataflowRefType MetadaflowRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadaflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((MetadataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadaflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StatusMessage, Datasource?, DataProviderRef?, DataflowRef?, MetadaflowRef?, ProvisionAgreementRef?)
        /// </para>
        /// </summary>
        public ProvisionAgreementRefType ProvisionAgreementRef {
            get {
                XElement x = this.GetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ProvisionAgreementRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RegistrationStatusType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RegistrationStatusType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StatusMessageType));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DatasourceType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataProviderRefType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadaflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisionAgreementRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// QueryResult contains the results of a specific registry query for a single datasource. If a successful result is a registered dataset, the DataResult element is used. If a successful result is a registered metadataset, the MetadataResult is used. If the query failed, then StatusMessage is included. The timeSeriesMatch attribute is true when the result is an exact match with the key found in the registry - that is, when the registered datasource provides a matching key. It is set to false when the datasource is registered with cube-region constraints, or in any other circumstance when it cannot be established that the sought-for keys have been exactly matched. This is always true when the resulting datasource is the source of a metadata set.
    /// </para>
    /// <para>
    /// Regular expression: (DataResult | MetadataResult | StatusMessage)
    /// </para>
    /// </summary>
    public partial class QueryResultType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QueryResultType(XElement xe) { return XTypedServices.ToXTypedElement<QueryResultType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QueryResultType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("DataResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// QueryResult contains the results of a specific registry query for a single datasource. If a successful result is a registered dataset, the DataResult element is used. If a successful result is a registered metadataset, the MetadataResult is used. If the query failed, then StatusMessage is included. The timeSeriesMatch attribute is true when the result is an exact match with the key found in the registry - that is, when the registered datasource provides a matching key. It is set to false when the datasource is registered with cube-region constraints, or in any other circumstance when it cannot be established that the sought-for keys have been exactly matched. This is always true when the resulting datasource is the source of a metadata set.
        /// </para>
        /// <para>
        /// Regular expression: (DataResult | MetadataResult | StatusMessage)
        /// </para>
        /// </summary>
        public QueryResultType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataResult | MetadataResult | StatusMessage)
        /// </para>
        /// </summary>
        public ResultType DataResult {
            get {
                XElement x = this.GetElement(XName.Get("DataResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ResultType)(x));
            }
            set {
                this.SetElement(XName.Get("DataResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataResult | MetadataResult | StatusMessage)
        /// </para>
        /// </summary>
        public ResultType MetadataResult {
            get {
                XElement x = this.GetElement(XName.Get("MetadataResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ResultType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataResult | MetadataResult | StatusMessage)
        /// </para>
        /// </summary>
        public StatusMessageType StatusMessage {
            get {
                XElement x = this.GetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StatusMessageType)(x));
            }
            set {
                this.SetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public bool timeSeriesMatch {
            get {
                XAttribute x = this.Attribute(XName.Get("timeSeriesMatch", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("timeSeriesMatch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryResultType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryResultType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ResultType));
            localElementDictionary.Add(XName.Get("MetadataResult", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ResultType));
            localElementDictionary.Add(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StatusMessageType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Result contains the information about either a data or metadata source, being returned as part of a QueryResult element. If the 
    /// </para>
    /// <para>
    /// Regular expression: (Datasource?, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
    /// </para>
    /// </summary>
    public partial class ResultType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ResultType(XElement xe) { return XTypedServices.ToXTypedElement<ResultType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResultType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Result contains the information about either a data or metadata source, being returned as part of a QueryResult element. If the 
        /// </para>
        /// <para>
        /// Regular expression: (Datasource?, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public ResultType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Datasource?, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public DatasourceType Datasource {
            get {
                XElement x = this.GetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DatasourceType)(x));
            }
            set {
                this.SetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Datasource?, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public ProvisionAgreementRefType ProvisionAgreementRef {
            get {
                XElement x = this.GetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ProvisionAgreementRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Datasource?, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public DataflowRefType DataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Datasource?, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public DataflowRefType MetadataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Datasource?, (ProvisionAgreementRef | DataflowRef | MetadataflowRef | DataProviderRef))
        /// </para>
        /// </summary>
        public DataProviderRefType DataProviderRef {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataProviderRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResultType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResultType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DatasourceType));
            localElementDictionary.Add(XName.Get("ProvisionAgreementRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProvisionAgreementRefType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataProviderRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Holds the structure information for submission to the structural repository.
    /// </para>
    /// <para>
    /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
    /// </para>
    /// </summary>
    public partial class StructureType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StructureType(XElement xe) { return XTypedServices.ToXTypedElement<StructureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Holds the structure information for submission to the structural repository.
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public StructureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType OrganisationSchemes {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType)(x));
            }
            set {
                this.SetElement(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType Dataflows {
            get {
                XElement x = this.GetElement(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType)(x));
            }
            set {
                this.SetElement(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType Metadataflows {
            get {
                XElement x = this.GetElement(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType)(x));
            }
            set {
                this.SetElement(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType CategorySchemes {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType)(x));
            }
            set {
                this.SetElement(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType CodeLists {
            get {
                XElement x = this.GetElement(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType)(x));
            }
            set {
                this.SetElement(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType HierarchicalCodelists {
            get {
                XElement x = this.GetElement(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType)(x));
            }
            set {
                this.SetElement(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType Concepts {
            get {
                XElement x = this.GetElement(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType)(x));
            }
            set {
                this.SetElement(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType MetadataStructureDefinitions {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType KeyFamilies {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType)(x));
            }
            set {
                this.SetElement(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType StructureSets {
            get {
                XElement x = this.GetElement(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType)(x));
            }
            set {
                this.SetElement(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType Processes {
            get {
                XElement x = this.GetElement(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType)(x));
            }
            set {
                this.SetElement(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrganisationSchemes?, Dataflows?, Metadataflows?, CategorySchemes?, CodeLists?, HierarchicalCodelists?, Concepts?, MetadataStructureDefinitions?, KeyFamilies?, StructureSets?, Processes?, ReportingTaxonomies?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType ReportingTaxonomies {
            get {
                XElement x = this.GetElement(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType)(x));
            }
            set {
                this.SetElement(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("OrganisationSchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.OrganisationSchemesType));
            localElementDictionary.Add(XName.Get("Dataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DataflowsType));
            localElementDictionary.Add(XName.Get("Metadataflows", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataflowsType));
            localElementDictionary.Add(XName.Get("CategorySchemes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CategorySchemesType));
            localElementDictionary.Add(XName.Get("CodeLists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CodeListsType));
            localElementDictionary.Add(XName.Get("HierarchicalCodelists", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.HierarchicalCodelistsType));
            localElementDictionary.Add(XName.Get("Concepts", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ConceptsType));
            localElementDictionary.Add(XName.Get("MetadataStructureDefinitions", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataStructureDefinitionsType));
            localElementDictionary.Add(XName.Get("KeyFamilies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.KeyFamiliesType));
            localElementDictionary.Add(XName.Get("StructureSets", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.StructureSetsType));
            localElementDictionary.Add(XName.Get("Processes", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ProcessesType));
            localElementDictionary.Add(XName.Get("ReportingTaxonomies", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.ReportingTaxonomiesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// SubmittedStructure holds a reference to a structural object to be stored in the repository. The externalDependencies attribute should be set to true if the repository is expected to use URLs in the structure Message to retrieve objects on which the stored object has dependencies. (Thus, if a key family is being submitted to the repository, and the structure message has URLKs which point to the locations of the codelists it uses, then the externalDependencies attribute should be set to true.) the action attribute specifies whether the Structure being submitted is intended to be added or deleted from the repository. The "modify" action is not applicable to final structures in the repository, and will produce an error condition, as these can be versioned but not modified.To submit a later version of a structure, the structure message should include the incremented version number. The externalDependencies and action attributes need not be specified in a response document. The isFinal attribute indicates whether the structure being submitted to the repository is final or not - this can also be specified on the structures themselves.
    /// </para>
    /// <para>
    /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
    /// </para>
    /// </summary>
    public partial class SubmittedStructureType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubmittedStructureType(XElement xe) { return XTypedServices.ToXTypedElement<SubmittedStructureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmittedStructureType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ProcessRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("StructureSetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ReportingTaxonomyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// SubmittedStructure holds a reference to a structural object to be stored in the repository. The externalDependencies attribute should be set to true if the repository is expected to use URLs in the structure Message to retrieve objects on which the stored object has dependencies. (Thus, if a key family is being submitted to the repository, and the structure message has URLKs which point to the locations of the codelists it uses, then the externalDependencies attribute should be set to true.) the action attribute specifies whether the Structure being submitted is intended to be added or deleted from the repository. The "modify" action is not applicable to final structures in the repository, and will produce an error condition, as these can be versioned but not modified.To submit a later version of a structure, the structure message should include the incremented version number. The externalDependencies and action attributes need not be specified in a response document. The isFinal attribute indicates whether the structure being submitted to the repository is final or not - this can also be specified on the structures themselves.
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public SubmittedStructureType() {
        }
        
        public SubmittedStructureType(DataflowRefType DataflowRef) {
            this.DataflowRef = DataflowRef;
        }
        
        public SubmittedStructureType(MetadataflowRefType MetadataflowRef) {
            this.MetadataflowRef = MetadataflowRef;
        }
        
        public SubmittedStructureType(CodelistRefType CodelistRef) {
            this.CodelistRef = CodelistRef;
        }
        
        public SubmittedStructureType(HierarchicalCodelistRefType HierarchicalCodelistRef) {
            this.HierarchicalCodelistRef = HierarchicalCodelistRef;
        }
        
        public SubmittedStructureType(CategorySchemeRefType CategorySchemeRef) {
            this.CategorySchemeRef = CategorySchemeRef;
        }
        
        public SubmittedStructureType(ConceptSchemeRefType ConceptSchemeRef) {
            this.ConceptSchemeRef = ConceptSchemeRef;
        }
        
        public SubmittedStructureType(OrganisationSchemeRefType OrganisationSchemeRef) {
            this.OrganisationSchemeRef = OrganisationSchemeRef;
        }
        
        public SubmittedStructureType(KeyFamilyRefType KeyFamilyRef) {
            this.KeyFamilyRef = KeyFamilyRef;
        }
        
        public SubmittedStructureType(MetadataStructureRefType MetadataStructureRef) {
            this.MetadataStructureRef = MetadataStructureRef;
        }
        
        public SubmittedStructureType(ProcessRefType ProcessRef) {
            this.ProcessRef = ProcessRef;
        }
        
        public SubmittedStructureType(StructureSetRefType StructureSetRef) {
            this.StructureSetRef = StructureSetRef;
        }
        
        public SubmittedStructureType(ReportingTaxonomyRefType ReportingTaxonomyRef) {
            this.ReportingTaxonomyRef = ReportingTaxonomyRef;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public DataflowRefType DataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public MetadataflowRefType MetadataflowRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((MetadataflowRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public CodelistRefType CodelistRef {
            get {
                XElement x = this.GetElement(XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((CodelistRefType)(x));
            }
            set {
                this.SetElement(XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public HierarchicalCodelistRefType HierarchicalCodelistRef {
            get {
                XElement x = this.GetElement(XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((HierarchicalCodelistRefType)(x));
            }
            set {
                this.SetElement(XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public CategorySchemeRefType CategorySchemeRef {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((CategorySchemeRefType)(x));
            }
            set {
                this.SetElement(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public ConceptSchemeRefType ConceptSchemeRef {
            get {
                XElement x = this.GetElement(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ConceptSchemeRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public OrganisationSchemeRefType OrganisationSchemeRef {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((OrganisationSchemeRefType)(x));
            }
            set {
                this.SetElement(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public KeyFamilyRefType KeyFamilyRef {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((KeyFamilyRefType)(x));
            }
            set {
                this.SetElement(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public MetadataStructureRefType MetadataStructureRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((MetadataStructureRefType)(x));
            }
            set {
                this.SetElement(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public ProcessRefType ProcessRef {
            get {
                XElement x = this.GetElement(XName.Get("ProcessRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ProcessRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ProcessRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public StructureSetRefType StructureSetRef {
            get {
                XElement x = this.GetElement(XName.Get("StructureSetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StructureSetRefType)(x));
            }
            set {
                this.SetElement(XName.Get("StructureSetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DataflowRef | MetadataflowRef | CodelistRef | HierarchicalCodelistRef | CategorySchemeRef | ConceptSchemeRef | OrganisationSchemeRef | KeyFamilyRef | MetadataStructureRef | ProcessRef | StructureSetRef | ReportingTaxonomyRef)
        /// </para>
        /// </summary>
        public ReportingTaxonomyRefType ReportingTaxonomyRef {
            get {
                XElement x = this.GetElement(XName.Get("ReportingTaxonomyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((ReportingTaxonomyRefType)(x));
            }
            set {
                this.SetElement(XName.Get("ReportingTaxonomyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> externalDependencies {
            get {
                XAttribute x = this.Attribute(XName.Get("externalDependencies", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("externalDependencies", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                XAttribute x = this.Attribute(XName.Get("action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> isFinal {
            get {
                XAttribute x = this.Attribute(XName.Get("isFinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("isFinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubmittedStructureType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmittedStructureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataflowRefType));
            localElementDictionary.Add(XName.Get("CodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(CodelistRefType));
            localElementDictionary.Add(XName.Get("HierarchicalCodelistRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(HierarchicalCodelistRefType));
            localElementDictionary.Add(XName.Get("CategorySchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(CategorySchemeRefType));
            localElementDictionary.Add(XName.Get("ConceptSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ConceptSchemeRefType));
            localElementDictionary.Add(XName.Get("OrganisationSchemeRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(OrganisationSchemeRefType));
            localElementDictionary.Add(XName.Get("KeyFamilyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(KeyFamilyRefType));
            localElementDictionary.Add(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(MetadataStructureRefType));
            localElementDictionary.Add(XName.Get("ProcessRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ProcessRefType));
            localElementDictionary.Add(XName.Get("StructureSetRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StructureSetRefType));
            localElementDictionary.Add(XName.Get("ReportingTaxonomyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(ReportingTaxonomyRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// For each Structure object submitted to the repository in a SubmitStructure, a SubmissionResult will be returned. It will identify the object submitted, report back the action requested, and convey the status and any error messages which are relevant to the submission.
    /// </para>
    /// <para>
    /// Regular expression: (SubmittedStructure, StatusMessage)
    /// </para>
    /// </summary>
    public partial class SubmissionResultType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubmissionResultType(XElement xe) { return XTypedServices.ToXTypedElement<SubmissionResultType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmissionResultType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SubmittedStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// For each Structure object submitted to the repository in a SubmitStructure, a SubmissionResult will be returned. It will identify the object submitted, report back the action requested, and convey the status and any error messages which are relevant to the submission.
        /// </para>
        /// <para>
        /// Regular expression: (SubmittedStructure, StatusMessage)
        /// </para>
        /// </summary>
        public SubmissionResultType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SubmittedStructure, StatusMessage)
        /// </para>
        /// </summary>
        public SubmittedStructureType SubmittedStructure {
            get {
                XElement x = this.GetElement(XName.Get("SubmittedStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((SubmittedStructureType)(x));
            }
            set {
                this.SetElement(XName.Get("SubmittedStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SubmittedStructure, StatusMessage)
        /// </para>
        /// </summary>
        public StatusMessageType StatusMessage {
            get {
                XElement x = this.GetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((StatusMessageType)(x));
            }
            set {
                this.SetElement(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubmissionResultType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmissionResultType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SubmittedStructure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(SubmittedStructureType));
            localElementDictionary.Add(XName.Get("StatusMessage", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(StatusMessageType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ProvisionAgreementRef allows for the identification of a provision agreement. At a minimum, either the URN element - holding a valid registry URN - or the set of OragnisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, DataflowAgencyID, and DataflowID must be specified. When used in a response document of any type, the URN must always be provided. Datasource can be used to specify a datasource for the provision agreement. Constraint can be used to express constraints associated with the provision agreement.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
    /// </para>
    /// </summary>
    public partial class ProvisionAgreementRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ProvisionAgreementRefType(XElement xe) { return XTypedServices.ToXTypedElement<ProvisionAgreementRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProvisionAgreementRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// ProvisionAgreementRef allows for the identification of a provision agreement. At a minimum, either the URN element - holding a valid registry URN - or the set of OragnisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, DataflowAgencyID, and DataflowID must be specified. When used in a response document of any type, the URN must always be provided. Datasource can be used to specify a datasource for the provision agreement. Constraint can be used to express constraints associated with the provision agreement.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public ProvisionAgreementRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "OrganisationSchemeAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "OrganisationSchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string DataProviderID {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "DataProviderID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string DataProviderVersion {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataProviderVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string DataflowAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("DataflowAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataflowAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "DataflowAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string DataflowID {
            get {
                XElement x = this.GetElement(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "DataflowID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string DataflowVersion {
            get {
                XElement x = this.GetElement(XName.Get("DataflowVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("DataflowVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public DatasourceType Datasource {
            get {
                XElement x = this.GetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DatasourceType)(x));
            }
            set {
                this.SetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType Constraint {
            get {
                XElement x = this.GetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType)(x));
            }
            set {
                this.SetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProvisionAgreementRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProvisionAgreementRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DatasourceType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The MetadataflowRef type structures a reference to a metadataflow definition. This requires that ID are provided for a pre-existing Agency and Metadataflow Definition in the registry. The Version element may be used to specify the version of the indicated dataflow. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific URN as an alternate means of identification. When used in a response document of any type, the URN must always be provided. At a minimum, either the URN element or AgencyID, MetadataflowID, and (optionally) version must be supplied. Datasource may be used to specify a datasource. Constraint can be used to provide constraints associated with the metadataflow.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?, Datasource?, Constraint?)
    /// </para>
    /// </summary>
    public partial class MetadataflowRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataflowRefType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataflowRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataflowRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// The MetadataflowRef type structures a reference to a metadataflow definition. This requires that ID are provided for a pre-existing Agency and Metadataflow Definition in the registry. The Version element may be used to specify the version of the indicated dataflow. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific URN as an alternate means of identification. When used in a response document of any type, the URN must always be provided. At a minimum, either the URN element or AgencyID, MetadataflowID, and (optionally) version must be supplied. Datasource may be used to specify a datasource. Constraint can be used to provide constraints associated with the metadataflow.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public MetadataflowRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string MetadataflowID {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "MetadataflowID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public DatasourceType Datasource {
            get {
                XElement x = this.GetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DatasourceType)(x));
            }
            set {
                this.SetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType Constraint {
            get {
                XElement x = this.GetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType)(x));
            }
            set {
                this.SetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataflowRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataflowRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DatasourceType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The DataflowRef type structures a reference to a dataflow definition. This requires that ID are provided for a pre-existing Agency and Dataflow Definition in the registry. The Version element may be used to specify the version of the indicated dataflow. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific URN as an alternate means of identification. At a minimum, either the URN element or AgencyID, DataflowID, and (optionally) version must be supplied. When used in a response document of any type, the URN must always be provided. Datasource may be used to specify a datasource. Constraints can be used to specify constraints associated with the dataflow.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?)
    /// </para>
    /// </summary>
    public partial class DataflowRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataflowRefType(XElement xe) { return XTypedServices.ToXTypedElement<DataflowRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataflowRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// The DataflowRef type structures a reference to a dataflow definition. This requires that ID are provided for a pre-existing Agency and Dataflow Definition in the registry. The Version element may be used to specify the version of the indicated dataflow. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific URN as an alternate means of identification. At a minimum, either the URN element or AgencyID, DataflowID, and (optionally) version must be supplied. When used in a response document of any type, the URN must always be provided. Datasource may be used to specify a datasource. Constraints can be used to specify constraints associated with the dataflow.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public DataflowRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string DataflowID {
            get {
                XElement x = this.GetElement(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "DataflowID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public DatasourceType Datasource {
            get {
                XElement x = this.GetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DatasourceType)(x));
            }
            set {
                this.SetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType Constraint {
            get {
                XElement x = this.GetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType)(x));
            }
            set {
                this.SetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataflowRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataflowRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DatasourceType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The DataProviderRef type structures a reference to a data provider. This requires that IDs be provided for an organisation scheme, its maintenance agency, and the data prov ider as identified in the referenced organisation scheme. The Version element may be used to specify the version of the indicated data provider. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific urn as an alternate means of identification. At a minimum, either the URN element or OrgansisationSchemeID, OrganisationSchemeAgencyID, DataProviderID, and (optionally) Version must be supplied. When used in a response document of any type, the URN must always be provided. Datasource may be used to specify a datasource. Constraints can be used to specify constraints associated with the data provider.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?)
    /// </para>
    /// </summary>
    public partial class DataProviderRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataProviderRefType(XElement xe) { return XTypedServices.ToXTypedElement<DataProviderRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataProviderRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// The DataProviderRef type structures a reference to a data provider. This requires that IDs be provided for an organisation scheme, its maintenance agency, and the data prov ider as identified in the referenced organisation scheme. The Version element may be used to specify the version of the indicated data provider. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific urn as an alternate means of identification. At a minimum, either the URN element or OrgansisationSchemeID, OrganisationSchemeAgencyID, DataProviderID, and (optionally) Version must be supplied. When used in a response document of any type, the URN must always be provided. Datasource may be used to specify a datasource. Constraints can be used to specify constraints associated with the data provider.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public DataProviderRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "OrganisationSchemeAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "OrganisationSchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string DataProviderID {
            get {
                XElement x = this.GetElement(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "DataProviderID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public DatasourceType Datasource {
            get {
                XElement x = this.GetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((DatasourceType)(x));
            }
            set {
                this.SetElement(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?)
        /// </para>
        /// </summary>
        public Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType Constraint {
            get {
                XElement x = this.GetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return ((Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType)(x));
            }
            set {
                this.SetElement(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataProviderRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataProviderRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(DatasourceType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The AgencyRef type structures a reference to an Agency. This requires that IDs be provided for an organisation scheme, its maintenance agency, and the agency as identified in the referenced organisation scheme. The Version element may be used to specify the version of the indicated agency. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific urn as an alternate means of identification. At a minimum, either the URN element or OrgansisationSchemeID, OrganisationSchemeAgencyID, AgencyID, and (optionally) Version must be supplied. When used in a response document of any type, the URN must always be provided. 
    /// </para>
    /// <para>
    /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, AgencyID, Version?)
    /// </para>
    /// </summary>
    public partial class AgencyRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AgencyRefType(XElement xe) { return XTypedServices.ToXTypedElement<AgencyRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AgencyRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// The AgencyRef type structures a reference to an Agency. This requires that IDs be provided for an organisation scheme, its maintenance agency, and the agency as identified in the referenced organisation scheme. The Version element may be used to specify the version of the indicated agency. If absent, the most recent version is assumed. The URN element is used to provide the registry-specific urn as an alternate means of identification. At a minimum, either the URN element or OrgansisationSchemeID, OrganisationSchemeAgencyID, AgencyID, and (optionally) Version must be supplied. When used in a response document of any type, the URN must always be provided. 
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, AgencyID, Version?)
        /// </para>
        /// </summary>
        public AgencyRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, AgencyID, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, AgencyID, Version?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "OrganisationSchemeAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, AgencyID, Version?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "OrganisationSchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, AgencyID, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, AgencyID, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AgencyRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AgencyRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyFamilyRef allows for references to specific codelists. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?)
    /// </para>
    /// </summary>
    public partial class CodelistRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodelistRefType(XElement xe) { return XTypedServices.ToXTypedElement<CodelistRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodelistRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// KeyFamilyRef allows for references to specific codelists. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?)
        /// </para>
        /// </summary>
        public CodelistRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?)
        /// </para>
        /// </summary>
        public string CodelistID {
            get {
                XElement x = this.GetElement(XName.Get("CodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "CodelistID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CodelistID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodelistRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodelistRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("CodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CategorySchemeRef allows for references to specific category schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
    /// </para>
    /// </summary>
    public partial class CategorySchemeRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategorySchemeRefType(XElement xe) { return XTypedServices.ToXTypedElement<CategorySchemeRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategorySchemeRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// CategorySchemeRef allows for references to specific category schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
        /// </para>
        /// </summary>
        public CategorySchemeRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
        /// </para>
        /// </summary>
        public string CategorySchemeID {
            get {
                XElement x = this.GetElement(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "CategorySchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, CategorySchemeID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategorySchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategorySchemeRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("CategorySchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ConceptSchemeRef allows for references to specific concept schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
    /// </para>
    /// </summary>
    public partial class ConceptSchemeRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConceptSchemeRefType(XElement xe) { return XTypedServices.ToXTypedElement<ConceptSchemeRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConceptSchemeRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// ConceptSchemeRef allows for references to specific concept schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
        /// </para>
        /// </summary>
        public ConceptSchemeRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string ConceptSchemeID {
            get {
                XElement x = this.GetElement(XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "ConceptSchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ConceptSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConceptSchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConceptSchemeRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("ConceptSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// OrganisationSchemeRef allows for references to specific organisation schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
    /// </para>
    /// </summary>
    public partial class OrganisationSchemeRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrganisationSchemeRefType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationSchemeRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationSchemeRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// OrganisationSchemeRef allows for references to specific organisation schemes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
        /// </para>
        /// </summary>
        public OrganisationSchemeRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string OrganisationSchemeID {
            get {
                XElement x = this.GetElement(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "OrganisationSchemeID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, OrganisationSchemeID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrganisationSchemeRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationSchemeRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// KeyFamilyRef allows for references to specific key families (data structure definitions). At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, KeyFamilyID?, Version?)
    /// </para>
    /// </summary>
    public partial class KeyFamilyRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator KeyFamilyRefType(XElement xe) { return XTypedServices.ToXTypedElement<KeyFamilyRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeyFamilyRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// KeyFamilyRef allows for references to specific key families (data structure definitions). At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, KeyFamilyID?, Version?)
        /// </para>
        /// </summary>
        public KeyFamilyRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, KeyFamilyID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, KeyFamilyID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, KeyFamilyID?, Version?)
        /// </para>
        /// </summary>
        public string KeyFamilyID {
            get {
                XElement x = this.GetElement(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "KeyFamilyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, KeyFamilyID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeyFamilyRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeyFamilyRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("KeyFamilyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MetadataStructureRef allows for references to specific metadata structure definitions. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, MetadataStructureID?, Version?)
    /// </para>
    /// </summary>
    public partial class MetadataStructureRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataStructureRefType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataStructureRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataStructureRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// MetadataStructureRef allows for references to specific metadata structure definitions. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataStructureID?, Version?)
        /// </para>
        /// </summary>
        public MetadataStructureRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataStructureID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataStructureID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataStructureID?, Version?)
        /// </para>
        /// </summary>
        public string MetadataStructureID {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "MetadataStructureID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, MetadataStructureID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataStructureRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataStructureRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructureID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// HierarchicalCodelistRef allows for references to specific hierarchical codelists. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
    /// </para>
    /// </summary>
    public partial class HierarchicalCodelistRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HierarchicalCodelistRefType(XElement xe) { return XTypedServices.ToXTypedElement<HierarchicalCodelistRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HierarchicalCodelistRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// HierarchicalCodelistRef allows for references to specific hierarchical codelists. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
        /// </para>
        /// </summary>
        public HierarchicalCodelistRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
        /// </para>
        /// </summary>
        public string HierarchicalCodelistID {
            get {
                XElement x = this.GetElement(XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "HierarchicalCodelistID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, HierarchicalCodelistID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HierarchicalCodelistRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HierarchicalCodelistRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("HierarchicalCodelistID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// StructureSetRef allows for references to specific structure sets. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, StructureSetID?, Version?)
    /// </para>
    /// </summary>
    public partial class StructureSetRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StructureSetRefType(XElement xe) { return XTypedServices.ToXTypedElement<StructureSetRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructureSetRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("StructureSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// StructureSetRef allows for references to specific structure sets. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, StructureSetID?, Version?)
        /// </para>
        /// </summary>
        public StructureSetRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, StructureSetID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, StructureSetID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, StructureSetID?, Version?)
        /// </para>
        /// </summary>
        public string StructureSetID {
            get {
                XElement x = this.GetElement(XName.Get("StructureSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("StructureSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "StructureSetID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, StructureSetID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StructureSetRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructureSetRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("StructureSetID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ProcessRef allows for references to specific processes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, ProcessID?, Version?)
    /// </para>
    /// </summary>
    public partial class ProcessRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ProcessRefType(XElement xe) { return XTypedServices.ToXTypedElement<ProcessRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProcessRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ProcessID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// ProcessRef allows for references to specific processes. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ProcessID?, Version?)
        /// </para>
        /// </summary>
        public ProcessRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ProcessID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ProcessID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ProcessID?, Version?)
        /// </para>
        /// </summary>
        public string ProcessID {
            get {
                XElement x = this.GetElement(XName.Get("ProcessID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ProcessID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "ProcessID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ProcessID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProcessRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProcessRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("ProcessID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ReportingTaxonomyRef allows for references to specific reporting taxonomies. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
    /// </para>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, ReportingTaxonomyID?, Version?)
    /// </para>
    /// </summary>
    public partial class ReportingTaxonomyRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReportingTaxonomyRefType(XElement xe) { return XTypedServices.ToXTypedElement<ReportingTaxonomyRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReportingTaxonomyRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("ReportingTaxonomyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// ReportingTaxonomyRef allows for references to specific reporting taxonomies. At a minimum, either the URN - which contains a valid Registry/Repository URN - or the rest of the child elements must be supplied. When used in a response document of any type, the URN must always be provided.
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ReportingTaxonomyID?, Version?)
        /// </para>
        /// </summary>
        public ReportingTaxonomyRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ReportingTaxonomyID?, Version?)
        /// </para>
        /// </summary>
        public System.Uri URN {
            get {
                XElement x = this.GetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ReportingTaxonomyID?, Version?)
        /// </para>
        /// </summary>
        public string AgencyID {
            get {
                XElement x = this.GetElement(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "AgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ReportingTaxonomyID?, Version?)
        /// </para>
        /// </summary>
        public string ReportingTaxonomyID {
            get {
                XElement x = this.GetElement(XName.Get("ReportingTaxonomyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ReportingTaxonomyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, "ReportingTaxonomyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, ReportingTaxonomyID?, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReportingTaxonomyRefType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReportingTaxonomyRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("ReportingTaxonomyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// This carries the text of error messages and/or warnings in response to queries or requests. The Status attribute carries the staus of the query or request.
    /// </para>
    /// <para>
    /// Regular expression: (MessageText*)
    /// </para>
    /// </summary>
    public partial class StatusMessageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> MessageTextField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StatusMessageType(XElement xe) { return XTypedServices.ToXTypedElement<StatusMessageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StatusMessageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageText", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")));
        }
        
        /// <summary>
        /// <para>
        /// This carries the text of error messages and/or warnings in response to queries or requests. The Status attribute carries the staus of the query or request.
        /// </para>
        /// <para>
        /// Regular expression: (MessageText*)
        /// </para>
        /// </summary>
        public StatusMessageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MessageText*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType> MessageText {
            get {
                if ((this.MessageTextField == null)) {
                    this.MessageTextField = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this, LinqToXsdTypeManager.Instance, XName.Get("MessageText", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                }
                return this.MessageTextField;
            }
            set {
                if ((value == null)) {
                    this.MessageTextField = null;
                }
                else {
                    if ((this.MessageTextField == null)) {
                        this.MessageTextField = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MessageText", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType>(this.MessageTextField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string status {
            get {
                XAttribute x = this.Attribute(XName.Get("status", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StatusMessageType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StatusMessageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MessageText", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ConstraintType provides an enumeration of values of the types of constraints.
    /// </para>
    /// </summary>
    public sealed class ConstraintTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Content",
                        "Attachment"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ConstraintTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// StatusType provides an enumeration of values that detail the status of queries or requests.
    /// </para>
    /// </summary>
    public sealed class StatusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Success",
                        "Warning",
                        "Failure"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private StatusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// QueryType provides an enumeration of values which specify the objects in the result-set for a registry query.
    /// </para>
    /// </summary>
    public sealed class QueryTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DataSets",
                        "MetadataSets",
                        "AllSets"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private QueryTypeType() {
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.metadatareport {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// MetadataReportType defines the structure of a metadata structure definition-specific Metadata Report. This consists of a MetadataStructureRef which holds the ID fo the metadata structure, and MetadataStructureAgencyRef, which holds the ID of the maintraenance agency of the metadata structure, and Version, which provides the version number of the referenced metadata structure definition. If not provided, version is assumed to be "1.0". This type is designed to be extended to hold the metadata-structure-sepcific fields needed to validate a specific metadata report.
    ///	
    /// </para>
    /// <para>
    /// Regular expression: (MetadataStructureRef, MetadataStructureAgencyRef, Version?)
    /// </para>
    /// </summary>
    public partial class MetadataSetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataSetType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataSetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport")), new NamedContentModelEntity(XName.Get("MetadataStructureAgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport")));
        }
        
        /// <summary>
        /// <para>
        /// MetadataReportType defines the structure of a metadata structure definition-specific Metadata Report. This consists of a MetadataStructureRef which holds the ID fo the metadata structure, and MetadataStructureAgencyRef, which holds the ID of the maintraenance agency of the metadata structure, and Version, which provides the version number of the referenced metadata structure definition. If not provided, version is assumed to be "1.0". This type is designed to be extended to hold the metadata-structure-sepcific fields needed to validate a specific metadata report.
        ///	
        /// </para>
        /// <para>
        /// Regular expression: (MetadataStructureRef, MetadataStructureAgencyRef, Version?)
        /// </para>
        /// </summary>
        public MetadataSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MetadataStructureRef, MetadataStructureAgencyRef, Version?)
        /// </para>
        /// </summary>
        public string MetadataStructureRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), value, "MetadataStructureRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MetadataStructureRef, MetadataStructureAgencyRef, Version?)
        /// </para>
        /// </summary>
        public string MetadataStructureAgencyRef {
            get {
                XElement x = this.GetElement(XName.Get("MetadataStructureAgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataStructureAgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), value, "MetadataStructureAgencyRef", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MetadataStructureRef, MetadataStructureAgencyRef, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                XElement x = this.GetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri MetadataStructureURI {
            get {
                XAttribute x = this.Attribute(XName.Get("MetadataStructureURI", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MetadataStructureURI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                XAttribute x = this.Attribute(XName.Get("datasetID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("datasetID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeAgencyId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeAgencyId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderSchemeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderSchemeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataProviderID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataProviderID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowAgencyID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowAgencyID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                XAttribute x = this.Attribute(XName.Get("dataflowID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("dataflowID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                XAttribute x = this.Attribute(XName.Get("action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingBeginDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingBeginDate", this, XName.Get("reportingBeginDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                XAttribute x = this.Attribute(XName.Get("reportingEndDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "reportingEndDate", this, XName.Get("reportingEndDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validFromDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validFromDate", this, XName.Get("validFromDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                XAttribute x = this.Attribute(XName.Get("validToDate", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "validToDate", this, XName.Get("validToDate", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationYear", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("publicationYear", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                XAttribute x = this.Attribute(XName.Get("publicationPeriod", ""));
                return XTypedServices.ParseUnionValue(x, global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "publicationPeriod", this, XName.Get("publicationPeriod", ""), global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TimePeriodType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataSetType", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataSetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MetadataStructureRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataStructureAgencyRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MetadataReportType defines the structure of a metadata structure definition-specific Metadata Report. This consists of a MetadataStructureRef which holds the ID fo the metadata structure, and MetadataStructureAgencyRef, which holds the ID of the maintraenance agency of the metadata structure, and Version, which provides the version number of the referenced metadata structure definition. If not provided, version is assumed to be "1.0". This type is designed to be extended to hold the metadata-structure-sepcific fields needed to validate a specific metadata report.
    ///	
    /// </para>
    /// </summary>
    public partial class MetadataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MetadataSetType ContentField;
        
         public static explicit operator MetadataSet(XElement xe) { return XTypedServices.ToXTypedElement<MetadataSet, MetadataSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// MetadataReportType defines the structure of a metadata structure definition-specific Metadata Report. This consists of a MetadataStructureRef which holds the ID fo the metadata structure, and MetadataStructureAgencyRef, which holds the ID of the maintraenance agency of the metadata structure, and Version, which provides the version number of the referenced metadata structure definition. If not provided, version is assumed to be "1.0". This type is designed to be extended to hold the metadata-structure-sepcific fields needed to validate a specific metadata report.
        ///	
        /// </para>
        /// </summary>
        public MetadataSet() {
            SetInnerType(new MetadataSetType());
        }
        
        /// <summary>
        /// <para>
        /// MetadataReportType defines the structure of a metadata structure definition-specific Metadata Report. This consists of a MetadataStructureRef which holds the ID fo the metadata structure, and MetadataStructureAgencyRef, which holds the ID of the maintraenance agency of the metadata structure, and Version, which provides the version number of the referenced metadata structure definition. If not provided, version is assumed to be "1.0". This type is designed to be extended to hold the metadata-structure-sepcific fields needed to validate a specific metadata report.
        ///	
        /// </para>
        /// </summary>
        public MetadataSet(MetadataSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public MetadataSetType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MetadataStructureRef, MetadataStructureAgencyRef, Version?)
        /// </para>
        /// </summary>
        public string MetadataStructureRef {
            get {
                return this.ContentField.MetadataStructureRef;
            }
            set {
                this.ContentField.MetadataStructureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MetadataStructureRef, MetadataStructureAgencyRef, Version?)
        /// </para>
        /// </summary>
        public string MetadataStructureAgencyRef {
            get {
                return this.ContentField.MetadataStructureAgencyRef;
            }
            set {
                this.ContentField.MetadataStructureAgencyRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MetadataStructureRef, MetadataStructureAgencyRef, Version?)
        /// </para>
        /// </summary>
        public string Version {
            get {
                return this.ContentField.Version;
            }
            set {
                this.ContentField.Version = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Uri MetadataStructureURI {
            get {
                return this.ContentField.MetadataStructureURI;
            }
            set {
                this.ContentField.MetadataStructureURI = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string datasetID {
            get {
                return this.ContentField.datasetID;
            }
            set {
                this.ContentField.datasetID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeAgencyId {
            get {
                return this.ContentField.dataProviderSchemeAgencyId;
            }
            set {
                this.ContentField.dataProviderSchemeAgencyId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderSchemeId {
            get {
                return this.ContentField.dataProviderSchemeId;
            }
            set {
                this.ContentField.dataProviderSchemeId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataProviderID {
            get {
                return this.ContentField.dataProviderID;
            }
            set {
                this.ContentField.dataProviderID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowAgencyID {
            get {
                return this.ContentField.dataflowAgencyID;
            }
            set {
                this.ContentField.dataflowAgencyID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string dataflowID {
            get {
                return this.ContentField.dataflowID;
            }
            set {
                this.ContentField.dataflowID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string action {
            get {
                return this.ContentField.action;
            }
            set {
                this.ContentField.action = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingBeginDate {
            get {
                return this.ContentField.reportingBeginDate;
            }
            set {
                this.ContentField.reportingBeginDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object reportingEndDate {
            get {
                return this.ContentField.reportingEndDate;
            }
            set {
                this.ContentField.reportingEndDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validFromDate {
            get {
                return this.ContentField.validFromDate;
            }
            set {
                this.ContentField.validFromDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object validToDate {
            get {
                return this.ContentField.validToDate;
            }
            set {
                this.ContentField.validToDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> publicationYear {
            get {
                return this.ContentField.publicationYear;
            }
            set {
                this.ContentField.publicationYear = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public object publicationPeriod {
            get {
                return this.ContentField.publicationPeriod;
            }
            set {
                this.ContentField.publicationPeriod = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataSet", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/metadatareport");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MetadataSet Load(string xmlFile) {
            return XTypedServices.Load<MetadataSet, MetadataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MetadataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MetadataSet, MetadataSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MetadataSet Parse(string xml) {
            return XTypedServices.Parse<MetadataSet, MetadataSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MetadataSet(((MetadataSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(MetadataSetType ContentField) {
            this.ContentField = ((MetadataSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public MetadataSet MetadataSet {  get {return rootObject as MetadataSet; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(MetadataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.common {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Key, Key1*)
    /// </para>
    /// </summary>
    public partial class KeySetType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.KeySetType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.KeyType> Key1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator KeySetType(XElement xe) { return XTypedServices.ToXTypedElement<KeySetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeySetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Key", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common")), new NamedContentModelEntity(XName.Get("Key", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/common")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Key, Key1*)
        /// </para>
        /// </summary>
        public KeySetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Key, Key1*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.KeyType> Key1 {
            get {
                if ((this.Key1Field == null)) {
                    this.Key1Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.KeyType>(this, LinqToXsdTypeManager.Instance, XName.Get("Key", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/common"));
                }
                return this.Key1Field;
            }
            set {
                if ((value == null)) {
                    this.Key1Field = null;
                }
                else {
                    if ((this.Key1Field == null)) {
                        this.Key1Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.KeyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Key", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/common"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.KeyType>(this.Key1Field, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("KeySetType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/common");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeySetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Key", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.KeyType));
            localElementDictionary.Add(XName.Get("Key", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/common"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.KeyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.registry {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?, Constraint1*)
    /// </para>
    /// </summary>
    public partial class ProvisionAgreementType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ProvisionAgreementType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType> Constraint1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ProvisionAgreementType(XElement xe) { return XTypedServices.ToXTypedElement<ProvisionAgreementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProvisionAgreementType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?, Constraint1*)
        /// </para>
        /// </summary>
        public ProvisionAgreementType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name*, Description*, (DataflowRef | MetadataflowRef), DataProviderRef, Datasource?, Constraint?, Annotations?, Constraint1*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType> Constraint1 {
            get {
                if ((this.Constraint1Field == null)) {
                    this.Constraint1Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>(this, LinqToXsdTypeManager.Instance, XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                }
                return this.Constraint1Field;
            }
            set {
                if ((value == null)) {
                    this.Constraint1Field = null;
                }
                else {
                    if ((this.Constraint1Field == null)) {
                        this.Constraint1Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>(this.Constraint1Field, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProvisionAgreementType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProvisionAgreementType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("Description", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.TextType));
            localElementDictionary.Add(XName.Get("DataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DataflowRefType));
            localElementDictionary.Add(XName.Get("MetadataflowRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.MetadataflowRefType));
            localElementDictionary.Add(XName.Get("DataProviderRef", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DataProviderRefType));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.QueryableDatasourceType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?, MetadataflowAgencyID?, MetadataflowID?, MetadataflowVersion?, Constraint1*)
    /// </para>
    /// </summary>
    public partial class ProvisionAgreementRefType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.ProvisionAgreementRefType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType> Constraint1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ProvisionAgreementRefType(XElement xe) { return XTypedServices.ToXTypedElement<ProvisionAgreementRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProvisionAgreementRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("MetadataflowAgencyID", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry")), new NamedContentModelEntity(XName.Get("MetadataflowID", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry")), new NamedContentModelEntity(XName.Get("MetadataflowVersion", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?, MetadataflowAgencyID?, MetadataflowID?, MetadataflowVersion?, Constraint1*)
        /// </para>
        /// </summary>
        public ProvisionAgreementRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?, MetadataflowAgencyID?, MetadataflowID?, MetadataflowVersion?, Constraint1*)
        /// </para>
        /// </summary>
        public string MetadataflowAgencyID {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowAgencyID", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataflowAgencyID", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), value, "MetadataflowAgencyID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?, MetadataflowAgencyID?, MetadataflowID?, MetadataflowVersion?, Constraint1*)
        /// </para>
        /// </summary>
        public string MetadataflowID {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowID", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MetadataflowID", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), value, "MetadataflowID", global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.IDType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?, MetadataflowAgencyID?, MetadataflowID?, MetadataflowVersion?, Constraint1*)
        /// </para>
        /// </summary>
        public string MetadataflowVersion {
            get {
                XElement x = this.GetElement(XName.Get("MetadataflowVersion", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("MetadataflowVersion", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID?, OrganisationSchemeID?, DataProviderID?, DataProviderVersion?, DataflowAgencyID?, DataflowID?, DataflowVersion?, Datasource?, Constraint?, MetadataflowAgencyID?, MetadataflowID?, MetadataflowVersion?, Constraint1*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType> Constraint1 {
            get {
                if ((this.Constraint1Field == null)) {
                    this.Constraint1Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>(this, LinqToXsdTypeManager.Instance, XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                }
                return this.Constraint1Field;
            }
            set {
                if ((value == null)) {
                    this.Constraint1Field = null;
                }
                else {
                    if ((this.Constraint1Field == null)) {
                        this.Constraint1Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>(this.Constraint1Field, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProvisionAgreementRefType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProvisionAgreementRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowVersion", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DatasourceType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
            localElementDictionary.Add(XName.Get("MetadataflowAgencyID", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataflowID", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("MetadataflowVersion", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?, Constraint1*)
    /// </para>
    /// </summary>
    public partial class DataflowRefType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DataflowRefType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType> Constraint1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataflowRefType(XElement xe) { return XTypedServices.ToXTypedElement<DataflowRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataflowRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?, Constraint1*)
        /// </para>
        /// </summary>
        public DataflowRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (URN?, AgencyID?, DataflowID?, Version?, Datasource?, Constraint?, Constraint1*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType> Constraint1 {
            get {
                if ((this.Constraint1Field == null)) {
                    this.Constraint1Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>(this, LinqToXsdTypeManager.Instance, XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                }
                return this.Constraint1Field;
            }
            set {
                if ((value == null)) {
                    this.Constraint1Field = null;
                }
                else {
                    if ((this.Constraint1Field == null)) {
                        this.Constraint1Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>(this.Constraint1Field, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataflowRefType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataflowRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("AgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataflowID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DatasourceType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?, Constraint1*)
    /// </para>
    /// </summary>
    public partial class DataProviderRefType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DataProviderRefType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType> Constraint1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataProviderRefType(XElement xe) { return XTypedServices.ToXTypedElement<DataProviderRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataProviderRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry")), new NamedContentModelEntity(XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?, Constraint1*)
        /// </para>
        /// </summary>
        public DataProviderRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (URN?, OrganisationSchemeAgencyID, OrganisationSchemeID, DataProviderID, Version?, Datasource?, Constraint?, Constraint1*)
        /// </para>
        /// </summary>
        public IList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType> Constraint1 {
            get {
                if ((this.Constraint1Field == null)) {
                    this.Constraint1Field = new XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>(this, LinqToXsdTypeManager.Instance, XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                }
                return this.Constraint1Field;
            }
            set {
                if ((value == null)) {
                    this.Constraint1Field = null;
                }
                else {
                    if ((this.Constraint1Field == null)) {
                        this.Constraint1Field = XTypedList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"));
                    }
                    else {
                        XTypedServices.SetList<Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType>(this.Constraint1Field, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataProviderRefType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataProviderRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("URN", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(System.Uri));
            localElementDictionary.Add(XName.Get("OrganisationSchemeAgencyID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("OrganisationSchemeID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("DataProviderID", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Version", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(string));
            localElementDictionary.Add(XName.Get("Datasource", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.registry.DatasourceType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
            localElementDictionary.Add(XName.Get("Constraint", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/registry"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.ConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
}
namespace Org.Sdmx.Resources.SdmxMl.Schemas.V20.extension.structure {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Org.Sdmx.Resources.SdmxMl.Schemas.V20.compact;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class PrimaryMeasureType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.PrimaryMeasureType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PrimaryMeasureType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryMeasureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PrimaryMeasureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public PrimaryMeasureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PrimaryMeasureType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PrimaryMeasureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MetadataAttribute*, TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class MetadataAttributeType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataAttributeType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MetadataAttributeType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataAttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataAttributeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MetadataAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MetadataAttribute*, TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public MetadataAttributeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string representationSchemeVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("representationSchemeVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("representationSchemeVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MetadataAttributeType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataAttributeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MetadataAttribute", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.MetadataAttributeType));
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class DimensionType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.DimensionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DimensionType(XElement xe) { return XTypedServices.ToXTypedElement<DimensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DimensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public DimensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DimensionType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DimensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class TimeDimensionType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TimeDimensionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TimeDimensionType(XElement xe) { return XTypedServices.ToXTypedElement<TimeDimensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TimeDimensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public TimeDimensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TimeDimensionType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TimeDimensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
    /// </para>
    /// </summary>
    public partial class AttributeType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.AttributeType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AttributeType(XElement xe) { return XTypedServices.ToXTypedElement<AttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AttributeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AttachmentGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("AttachmentMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TextFormat?, AttachmentGroup*, AttachmentMeasure*, Annotations?)
        /// </para>
        /// </summary>
        public AttributeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AttributeType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttributeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TextFormatType));
            localElementDictionary.Add(XName.Get("AttachmentGroup", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("AttachmentMeasure", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(string));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TextFormat?, Annotations?)
    /// </para>
    /// </summary>
    public partial class CrossSectionalMeasureType : global::Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.CrossSectionalMeasureType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CrossSectionalMeasureType(XElement xe) { return XTypedServices.ToXTypedElement<CrossSectionalMeasureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CrossSectionalMeasureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")), new NamedContentModelEntity(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TextFormat?, Annotations?)
        /// </para>
        /// </summary>
        public CrossSectionalMeasureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string conceptSchemeVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("conceptSchemeVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conceptSchemeVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CrossSectionalMeasureType", "http://www.metadatatechnology.com/standards/sdmx/schemas/v2_0/extension/structure" +
                        "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrossSectionalMeasureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TextFormat", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.structure.TextFormatType));
            localElementDictionary.Add(XName.Get("Annotations", "http://www.SDMX.org/resources/SDMXML/schemas/v2_0/structure"), typeof(Org.Sdmx.Resources.SdmxMl.Schemas.V20.common.AnnotationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
}
