// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 11/10/2012 5:50 μμ    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.Structureparser.Builder.BaseObjects.Impl {
    using System.Collections.Generic;

    using Org.Apache.Log4j;
	using Org.Sdmxsource.Sdmx.Api.Manager.Retrieval;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Datastructure;
	using Org.Sdmxsource.Sdmx.Api.Model.Superbeans;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Datastructure;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.BaseObjects.Datastructure;
	using Org.Sdmxsource.Sdmx.Util.Objects.Container;
	using Org.Springframework.Objects.Factory.Annotation;
	using Org.Springframework.Stereotype;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Build a project specific DataStructure model object from a KeyFamilyType IXML 
	/// </summary>
	///
	public class DataStructureSuperBeanBuilder : 
			StructureBuilderImpl<IDataStructureObjectBase, IDataStructureObject> {
		private static readonly log4net.ILog LOG = log4net.LogManager
				.GetLogger(typeof(SuperBeansBuilderImpl));
	
		private AttributeSuperBeanBuilder attributeSuperBeanBuilder;
		private DimensionSuperBeanBuilder dimensionSuperBeanBuilder;
		private PrimaryMeasureSuperBeanBuilder primaryMeasureSuperBeanBuilder;
	
		/// <summary>
		/// Build the DataStructure from an KeyFamilyType XML Bean
		/// </summary>
		///
		/// <param name="KeyFamilyType">the bean to build the DataStructure from</param>
		public override IDataStructureObjectBase Build(IDataStructureObject buildFrom,
				ISdmxRetrievalManager retrievalManager, SuperBeans existingBeans) {
			if (existingBeans == null) {
				existingBeans = new SuperBeansImpl();
			}
			LOG.Debug("Build IKeyFamilyObjectBase ISuper");
			IList<IAttributeObjectBase> attributes = new List<IAttributeObjectBase>();
			IList<IDimensionObjectBase> dimensions = new List<IDimensionObjectBase>();
	
			/* foreach */
			foreach (IDimension currentDimension  in  buildFrom.Dimensions) {
				LOG.Debug("Build Dimension: " + currentDimension.Urn);
				ILOG.J2CsMapping.Collections.Collections.Add(dimensions,dimensionSuperBeanBuilder.Build(currentDimension,
									retrievalManager, existingBeans));
			}
			/* foreach */
			foreach (IAttribute currentAttribute  in  buildFrom.Attributes) {
				LOG.Debug("Build Attribute: " + currentAttribute.Urn);
				ILOG.J2CsMapping.Collections.Collections.Add(attributes,attributeSuperBeanBuilder.Build(currentAttribute,
									retrievalManager, existingBeans));
			}
			IPrimaryMeasureObjectBase primaryMeasure = null;
			if (buildFrom.PrimaryMeasure != null) {
				LOG.Debug("Build Measure: "
						+ buildFrom.PrimaryMeasure.Urn);
				primaryMeasure = primaryMeasureSuperBeanBuilder.Build(
						buildFrom.PrimaryMeasure, retrievalManager,
						existingBeans);
			}
			return new DataStructureObjectBaseCore(buildFrom, dimensions,
					attributes, primaryMeasure);
		}
	}
}
