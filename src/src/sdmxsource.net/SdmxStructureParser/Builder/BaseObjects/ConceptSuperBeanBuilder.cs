// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 11/10/2012 5:50 μμ    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.Structureparser.Builder.BaseObjects.Impl {
	
	using Org.Apache.Log4j;
	using Org.Sdmxsource.Sdmx.Api.Exception;
	using Org.Sdmxsource.Sdmx.Api.Manager.Retrieval;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Codelist;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Conceptscheme;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Reference;
	using Org.Sdmxsource.Sdmx.Api.Model.Superbeans;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Codelist;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Conceptscheme;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.BaseObjects.Conceptscheme;
	using Org.Sdmxsource.Sdmx.Structureretrieval.Manager;
	using Org.Sdmxsource.Sdmx.Util.Objects.Container;
	using Org.Springframework.Objects.Factory.Annotation;
	using Org.Springframework.Stereotype;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class ConceptSuperBeanBuilder : 
			StructureBuilderImpl<IConceptObjectBase, IConceptObject> {
		private static readonly log4net.ILog LOG = log4net.LogManager
				.GetLogger(typeof(ComponentSuperBeanBuilder));
	
		private CodelistSuperBeanBuilder codelistSuperBeanBuilder;
	
		public override IConceptObjectBase Build(IConceptObject buildFrom,
				ISdmxRetrievalManager retrievalManager, SuperBeans existingBeans) {
			if (existingBeans == null) {
				existingBeans = new SuperBeansImpl();
			}
			ISdmxBaseObjectRetrievalManager superBeanRetrievalManager = new InMemoryISdmxBaseObjectRetrievalManager(
					existingBeans);
	
			ICodelistObjectBase codelistSuperBean = null;
			if (buildFrom.CoreRepresentation != null
					&& buildFrom.CoreRepresentation.RepresentationRef != null) {
				IMaintainableRefObject codelistRef = buildFrom.CoreRepresentation
						.RepresentationRef.MaintainableReference;
	
				LOG.Debug("get codelist super bean : " + codelistRef);
	
				codelistSuperBean = superBeanRetrievalManager
						.IGetCodelistObjectBase(codelistRef);
				if (codelistSuperBean == null) {
					LOG.Debug("no existing super bean found build new : "
							+ codelistRef);
					ICodelistObject codelist = retrievalManager
							.GetCodelist(codelistRef);
	
					if (codelist == null) {
						throw new ReferenceException(buildFrom
								.CoreRepresentation.RepresentationRef);
					}
	
					codelistSuperBean = codelistSuperBeanBuilder.Build(codelist);
	
					LOG.Debug("codelist super bean built");
					existingBeans.AddCodelist(codelistSuperBean);
				}
			}
			return new ConceptObjectBaseCore(buildFrom, codelistSuperBean);
		}
	
		
		public CodelistSuperBeanBuilder CodelistSuperBeanBuilder {
		  set {
				this.codelistSuperBeanBuilder = value;
			}
		}
		
	}
}
