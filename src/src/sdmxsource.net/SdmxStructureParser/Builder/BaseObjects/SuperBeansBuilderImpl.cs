// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 11/10/2012 5:50 μμ    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.Structureparser.Builder.BaseObjects.Impl {
	
	using Org.Apache.Log4j;
	using Org.Sdmxsource.Sdmx.Api.Builder;
	using Org.Sdmxsource.Sdmx.Api.Exception;
	using Org.Sdmxsource.Sdmx.Api.Manager.Retrieval;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Categoryscheme;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Codelist;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Conceptscheme;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Datastructure;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Process;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Registry;
	using Org.Sdmxsource.Sdmx.Api.Model.Superbeans;
	using Org.Sdmxsource.Sdmx.Structureretrieval.Manager;
	using Org.Sdmxsource.Sdmx.Util.Objects.Container;
	using Org.Springframework.Objects.Factory.Annotation;
	using Org.Springframework.Stereotype;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class SuperBeansBuilderImpl : SuperBeansBuilder {
		private static readonly log4net.ILog LOG = log4net.LogManager
				.GetLogger(typeof(SuperBeansBuilderImpl));
	
		private CategorySchemeSuperBeanBuilder categorySchemeSuperBeanBuilder;
		private CodelistSuperBeanBuilder codelistSuperBeanBuilder;
		private ConceptSchemeSuperBeanBuilder conceptSchemeSuperBeanBuilder;
		private DataflowSuperBeanBuilder dataflowSuperBeanBuilder;
		private DataStructureSuperBeanBuilder dataStructureSuperBeanBuilder;
		private HierarchicalCodelistSuperBeanBuilder hierarchicalCodelistSuperBeanBuilder;
		private ProvisionSuperBeanBuilder provisionSuperBeanBuilder;
		private ProcessSuperBeanBuilder processSuperBeanBuilder;
		private RegistrationSuperBeanBuilder registrationSuperBeanBuilder;
	
		public virtual SuperBeans Build(ISdmxObjects buildFrom) {
			return this.Build(buildFrom, null, new InMemoryRetrievalManager(
					buildFrom));
		}
	
		public virtual SuperBeans Build(ISdmxObjects buildFrom, SuperBeans existingBeans,
				ISdmxRetrievalManager retrievalManager) {
			LOG.Debug("Build Superbeans: Create LocalRetrievalManager");
	
			if (existingBeans == null) {
				existingBeans = new SuperBeansImpl();
			}
	
			/* foreach */
			foreach (ICategorySchemeObject currentBean  in  buildFrom.CategorySchemes) {
				LOG.Debug("Build ISuper: " + currentBean.Urn);
				existingBeans.AddCategoryScheme(categorySchemeSuperBeanBuilder
						.Build(currentBean));
			}
			/* foreach */
			foreach (ICodelistObject currentBean0  in  buildFrom.Codelists) {
				LOG.Debug("Build ISuper: " + currentBean0.Urn);
				existingBeans.AddCodelist(codelistSuperBeanBuilder
						.Build(currentBean0));
			}
			/* foreach */
			foreach (IConceptSchemeObject currentBean1  in  buildFrom.ConceptSchemes) {
				LOG.Debug("Build ISuper: " + currentBean1.Urn);
				existingBeans.AddConceptScheme(conceptSchemeSuperBeanBuilder.Build(
						currentBean1, retrievalManager, existingBeans));
			}
			/* foreach */
			foreach (IDataflowObject currentBean2  in  buildFrom.Dataflows) {
				LOG.Debug("Build ISuper: " + currentBean2.Urn);
				existingBeans.AddDataflow(dataflowSuperBeanBuilder.Build(
						currentBean2, retrievalManager, existingBeans));
			}
			/* foreach */
			foreach (IDataStructureObject currentBean3  in  buildFrom.DataStructures) {
				LOG.Debug("Build ISuper: " + currentBean3.Urn);
				existingBeans.AddDataStructure(dataStructureSuperBeanBuilder.Build(
						currentBean3, retrievalManager, existingBeans));
			}
			/* foreach */
			foreach (IHierarchicalCodelistObject currentBean4  in  buildFrom
					.HierarchicalCodelists) {
				LOG.Debug("Build ISuper: " + currentBean4.Urn);
				existingBeans
						.AddHierarchicalCodelist(hierarchicalCodelistSuperBeanBuilder
								.Build(currentBean4, retrievalManager));
			}
			/* foreach */
			foreach (IProvisionAgreementObject currentBean5  in  buildFrom
					.ProvisionAgreements) {
				LOG.Debug("Build ISuper: " + currentBean5.Urn);
				existingBeans.AddProvision(provisionSuperBeanBuilder.Build(
						currentBean5, retrievalManager, existingBeans));
			}
			/* foreach */
			foreach (IProcessObject currentBean6  in  buildFrom.Processes) {
				LOG.Debug("Build ISuper: " + currentBean6.Urn);
				existingBeans.AddProcess(processSuperBeanBuilder.Build(currentBean6,
						retrievalManager));
			}
			/* foreach */
			foreach (IRegistrationObject currentBean7  in  buildFrom.Registrations) {
				LOG.Debug("Build ISuper: " + currentBean7.Urn);
				existingBeans.AddRegistration(registrationSuperBeanBuilder.Build(
						currentBean7, retrievalManager, existingBeans));
			}
			return existingBeans;
		}
	}
}
