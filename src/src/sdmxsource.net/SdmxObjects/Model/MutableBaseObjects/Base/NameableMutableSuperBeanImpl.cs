// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 5/10/2012 7:21 μμ    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.SdmxObjects.Model.MutableBaseObjects.Base {
	
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Base;
	using Org.Sdmxsource.Sdmx.Api.Model.Mutable.Base;
	using Org.Sdmxsource.Sdmx.Api.Model.MutableBaseObjects.Base;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Base;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.Mutable.Base;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	[Serializable]
	public class NameableMutableObjectBaseCore : IdentifiableMutableObjectBaseCore, INameableMutableObjectBase {
		private const long serialVersionUID = 1L;
		private IList<ITextTypeWrapperMutableObject> _descriptions;
		private IList<ITextTypeWrapperMutableObject> names;
	
		public NameableMutableObjectBaseCore(INameableObjectBase identifiable) : base(identifiable) {
			this._descriptions = new List<ITextTypeWrapperMutableObject>();
			this.names = new List<ITextTypeWrapperMutableObject>();
			//HACK This is a hack
			if (identifiable.Descriptions != null) {
				foreach (CultureInfo locale  in  identifiable.Descriptions.Keys) {
					ITextTypeWrapperMutableObject Im = new TextTypeWrapperMutableCore();
					Im.Locale = locale.TwoLetterISOLanguageName;
					Im.Locale = identifiable.Descriptions[locale];
					_descriptions.Add(Im);
				}
			}
			if (identifiable.Names != null) {
				/* foreach */
				foreach (CultureInfo locale  in  identifiable.Names.Keys) {
					ITextTypeWrapperMutableObject mBean1 = new TextTypeWrapperMutableCore();
					mBean1.Locale = locale.TwoLetterISOLanguageName;
				    mBean1.Value = identifiable.Names[locale];
					names.Add(mBean1);
				}
			}
		}
	
		public NameableMutableObjectBaseCore(INameableObject identifiable) : base(identifiable) {
			this._descriptions = new List<ITextTypeWrapperMutableObject>();
			this.names = new List<ITextTypeWrapperMutableObject>();
			if (identifiable.Description != null) {
				foreach (ITextTypeWrapper currentTextType  in  identifiable
						.Descriptions) {
					_descriptions.Add(new TextTypeWrapperMutableCore(currentTextType));
				}
			}
			if (identifiable.Name != null) {
				foreach (ITextTypeWrapper currentTextType0  in  identifiable.Names) {
					names.Add(new TextTypeWrapperMutableCore(currentTextType0));
				}
			}
		}
	
		public NameableMutableObjectBaseCore() {
			this._descriptions = new List<ITextTypeWrapperMutableObject>();
			this.names = new List<ITextTypeWrapperMutableObject>();
	
		}
	
		
		public string Name {
		  get {
				if (names != null && names.Count > 0) {
					return names[0].Value;
				}
				return null;
			}
		}
		
	
		
		public virtual IList<ITextTypeWrapperMutableObject> Descriptions {
		  get {
				return _descriptions;
			}
		  set {
				this._descriptions = value;
			}
		}
		
	
		
		public virtual IList<ITextTypeWrapperMutableObject> Names {
		  get {
				return names;
			}
		  set {
				this.names = value;
			}
		}
		
	
	}
}
