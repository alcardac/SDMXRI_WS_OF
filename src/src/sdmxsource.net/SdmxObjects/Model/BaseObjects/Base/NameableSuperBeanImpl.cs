// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 5/10/2012 7:21 μμ    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.SdmxObjects.Model.BaseObjects.Base {
	
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Base;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Base;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
    using System.Linq;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	[Serializable]
	public abstract class NameableObjectBaseCore : IdentifiableObjectBaseCore
		, INameableObjectBase {
	
		private const long serialVersionUID = 1L;
	
		private readonly IDictionary<CultureInfo, String> _descriptions;
		private readonly IDictionary<CultureInfo, String> _names;
	
		public NameableObjectBaseCore(INameableObject identifiable) : base(identifiable) {
			_names = Org.Sdmxsource.Sdmx.Util.Objects.LocaleUtil.BuildLocalMap(identifiable.Names);
			_descriptions = Org.Sdmxsource.Sdmx.Util.Objects.LocaleUtil.BuildLocalMap(identifiable.Descriptions);
		}
	
		
		public virtual IDictionary<CultureInfo,String> Descriptions {
		  get {
				return new Dictionary<CultureInfo, String>(_descriptions);
			}
		}
		
	
		
		public virtual IDictionary<CultureInfo,String> Names {
		  get {
				return new Dictionary<CultureInfo, String>(_names);
			}
		}
		
	
		/* (non-Javadoc)
		 * @see org.sdmxsource.dataweb.external.model.Identifiable#getDesciption(java.util.Locale)
		 */
		public virtual string GetDescription(CultureInfo loc) {
			string returnStr = this._descriptions[loc];
			if (returnStr == null && this._descriptions.Count > 0) {
				return this._descriptions.Values.First();
			}
			return returnStr;
		}
	
		
		public virtual String Description {
		  get {
				if (_descriptions == null || _descriptions.Count == 0) {
					return null;
				}
				String returnStr = Org.Sdmxsource.Sdmx.Util.Objects.LocaleUtil.GetStringByDefaultLocale(_descriptions);
				if (returnStr == null && this._descriptions.Count > 0) {
					return this._descriptions.Values.First();
				}
				return returnStr;
			}
		}
		
	
		/* (non-Javadoc)
		 * @see org.sdmxsource.dataweb.external.model.Identifiable#getName(java.util.Locale)
		 */
		public virtual String GetName(CultureInfo loc) {
			return this._names[loc];
		}
	
		
		public virtual String Name {
		  get { //TODO This should probably be better!
				if (_names == null || _names.Count == 0) {
					return null;
				}
				String returnStr = Org.Sdmxsource.Sdmx.Util.Objects.LocaleUtil.GetStringByDefaultLocale(_names);
				if (returnStr == null) {
					return this._names.Values.First();
				}
				return returnStr;
			}
		}
		
	}
}
