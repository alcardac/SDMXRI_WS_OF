// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 5/10/2012 7:21 μμ    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///

using Org.Sdmxsource.Sdmx.Util.Objects;

namespace Org.Sdmxsource.Sdmx.SdmxObjects.Model.BaseObjects.Base {
	
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Codelist;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Reference;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Codelist;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	[Serializable]
	public class CodeRefObjectBaseCore : IdentifiableObjectBaseCore, 
			IHierarchicalCodeObjectBase {
		private const long serialVersionUID = 328066827956232466L;
		private ICode Icode;
		private readonly IList<IHierarchicalCodeObjectBase> _codeRefs;
	
		public CodeRefObjectBaseCore(IHierarchy Ihierarchy,
				IHierarchicalCode codeRef, IList<ICodelistObject> codelists) : base(codeRef) {
			Icode = IGetCode(Ihierarchy, codeRef, codelists);
			if (codeRef.CodeRefs != null) {
				_codeRefs = new List<IHierarchicalCodeObjectBase>();
				/* foreach */
				foreach (IHierarchicalCode currentCodeRef  in  codeRef.CodeRefs)
					_codeRefs.Add(new CodeRefObjectBaseCore(Ihierarchy,
											currentCodeRef, codelists));
			}
		}
	
		private ICode IGetCode(IHierarchy Ihierarchy,
				IHierarchicalCode codeRef, IList<ICodelistObject> codelists) {
			IStructureReference sRef = null;
			if (codeRef.CodeReference != null) {
				sRef = codeRef.CodeReference;
			} else {
				IHierarchicalCodelistObject hcl = Ihierarchy
						.MaintainableParent;
				ICodelistRef codelistRef = GetCodelistRef(hcl.CodelistRef,
						codeRef.CodelistAliasRef);
				sRef = codelistRef.CodelistReference;
			}
			ICodelistObject codelist = (ICodelistObject)MaintainableUtil.ResolveReference(codelists, sRef);
			if (codelist == null) {
				throw new ArgumentException("Codelist "
						+ sRef.MaintainableUrn + " Not found");
			}
			return GetCode(codelist, sRef.ChildReference.Id);
		}
	
		private ICode GetCode(ICodelistObject codelist, String codeId) {
			/* foreach */
			foreach (ICode currentCode  in  codelist.Items) {
				if (currentCode.Id.Equals(codeId)) {
					return currentCode;
				}
			}
			throw new ArgumentException("Code " + codeId
					+ " Not found in codelist : " + codelist.Urn);
		}
	
		private ICodelistRef GetCodelistRef(IList<ICodelistRef> codelistRefs,
				String codelistaliasRef) {
			/* foreach */
			foreach (ICodelistRef codelistref  in  codelistRefs) {
				if (codelistref.Alias.Equals(codelistaliasRef)) {
					return codelistref;
				}
			}
			throw new ArgumentException(
					"Codelist Ref Not found with Alias : " + codelistaliasRef);
		}
	
		
		public virtual ICode Code {
		  get {
				return Icode;
			}
		}
		
	
		
		public virtual IList<IHierarchicalCodeObjectBase> CodeRefs {
		  get {
				if (_codeRefs == null) {
					return null;
				}
				return new List<IHierarchicalCodeObjectBase>(_codeRefs);
			}
		}
		
	}
}
