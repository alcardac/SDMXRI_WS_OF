// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 5/10/2012 7:21 μμ    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.SdmxObjects.Model.BaseObjects.Metadata {
	
	using Org.Sdmxsource.Sdmx.Api.Exception;
	using Org.Sdmxsource.Sdmx.Api.Manager.Retrieval;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Base;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Codelist;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Conceptscheme;
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Metadatastructure;
	using Org.Sdmxsource.Sdmx.Api.Model.Metadata;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Metadata;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.BaseObjects.Base;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	[Serializable]
	public class ReportedAttributeObjectBaseCore : ObjectBaseCore,  IReportedAttributeBase 
    {
		private const long serialVersionUID = -1884960818440120857L;
        private IList<IReportedAttributeBase> reportedAttributes;
		private IReportedAttribute builtFrom;
		private IConceptObject concept;
		private ICodelistObject codelist;
	
		public ReportedAttributeObjectBaseCore(
				IMetadataAttribute correspondingMA,
				IReportedAttribute builtFrom,
				IIdentifiableRetrievalManager retrievalManager) : base(builtFrom) {
                    this.reportedAttributes = new List<IReportedAttributeBase>();
			this.builtFrom = builtFrom;
			concept = retrievalManager.GetIdentifiableObject<IConceptObject>(
					correspondingMA.ConceptRef, typeof(IConceptObject));
			if (correspondingMA.HasCodedRepresentation()) {
                this.codelist = retrievalManager.GetIdentifiableObject<ICodelistObject>(
						correspondingMA.Representation.RepresentationRef,
						typeof(ICodelistObject));
			}
			if (builtFrom.ReportedAttributes != null) {
				/* foreach */
				foreach (IReportedAttribute reportedAttribute  in  builtFrom
						.ReportedAttributes) {
					IMetadataAttribute metadataAttribute = GetMetadataAttributeForRepotedAttribtue(
							reportedAttribute, correspondingMA.MetadataAttributes);
					reportedAttributes.Add(new ReportedAttributeObjectBaseCore(metadataAttribute, reportedAttribute, retrievalManager));
				}
			}
		}
	
		private IMetadataAttribute GetMetadataAttributeForRepotedAttribtue(
				IReportedAttribute reportedAttribute,
				IList<IMetadataAttribute> mAttributeBeans) {
			/* foreach */
			foreach (IMetadataAttribute currentMAttribtue  in  mAttributeBeans) {
				if (currentMAttribtue.Id.Equals(reportedAttribute.Id)) {
					return currentMAttribtue;
				}
			}
			throw new ReferenceException(
					"Can not find reference to metadata attribute with id "
							+ reportedAttribute.Id);
		}
	
		
		public virtual IConceptObject Concept {
		  get {
				return concept;
			}
		}
		
	
		
		public virtual ICodelistObject Codelist {
		  get {
				return codelist;
			}
		}
		
	
		public virtual bool HasCodedRepresentation() {
			return this.codelist != null;
		}
	
		
		public virtual String Id {
		  get {
				return builtFrom.Id;
			}
		}
		
	
		
		public virtual String SimpleValue {
		  get {
				return builtFrom.SimpleValue;
			}
		}
		
	
		
		public virtual IList<ITextTypeWrapper> MetadataText {
		  get {
				return builtFrom.MetadataText;
			}
		}
		
	
		
		public virtual bool Presentational {
		  get {
				return builtFrom.Presentational;
			}
		}
		
	
		public virtual bool HasSimpleValue() {
			return builtFrom.HasSimpleValue();
		}
	
		
		public virtual IList<IReportedAttributeBase> ReportedAttributes {
		  get {
              return new List<IReportedAttributeBase>(reportedAttributes);
			}
		}
		
	
		
		public ISdmxObject BuiltFrom {
		  get {
				return builtFrom;
			}
		}
		
	}
}
