/*******************************************************************************
 * Copyright (c) 2012 Metadata Technology Ltd.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 * 
 * This file is part of the SDMX Component Library.
 * 
 * The SDMX Component Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The SDMX Component Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
 * 
 * Contributors:
 *     Metadata Technology - initial API and implementation
 ******************************************************************************/
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 5/10/2012 7:21 μμ    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------

using Org.Sdmxsource.Sdmx.Api.Model.Objects.Datastructure;
using log4net;

namespace Org.Sdmxsource.Sdmx.SdmxObjects.Model.BaseObjects.Codelist {
	
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Codelist;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Codelist;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.BaseObjects.Base;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	[Serializable]
	public class CodelistObjectBaseCore : MaintainableObjectBaseCore, 
			ICodelistObjectBase {
        private static readonly ILog LOG = LogManager.GetLogger(typeof(CodelistObjectBaseCore));
		private const long serialVersionUID = 1L;
	
		private readonly IList<ICodeObjectBase> _codes;
		private readonly IDictionary<String, ICodeObjectBase> _codeValueMap;
		private readonly ICodelistObject _codelist;
	
		public CodelistObjectBaseCore(ICodelistObject codelist) : base(codelist) {
			this._codes = new List<ICodeObjectBase>();
			this._codeValueMap = new Dictionary<String, ICodeObjectBase>();
			LOG.Debug("Create Codelist Super Bean");
			this._codelist = codelist;
			IList<ICode> allCodes = codelist.Items;
			if (allCodes != null) {
				IDictionary<ICode, IList<ICode>> codeChildMap = new Dictionary<ICode, IList<ICode>>();
	
				LOG.Debug("Create code Child Map");
				/* foreach */
				foreach (ICode currentCode  in  allCodes) {
					if (Org.Sdmxsource.Util.ObjectUtil.ValidString(currentCode.ParentCode)) {
						ICode parent = codelist.GetCodeById(currentCode
								.ParentCode);
	
						//Add the child to the parent to the key, and the child to the value
						IList<ICode> children = codeChildMap[parent];
						if (children == null) {
							children = new List<ICode>();
							codeChildMap.Add(parent, children);
						}
						children.Add(currentCode);
					}
				}
				LOG.Debug("Map Created");
	
				/* foreach */
				foreach (ICode currentCode0  in  allCodes) {
					if (!Org.Sdmxsource.Util.ObjectUtil.ValidString(currentCode0.ParentCode)) {
						LOG.Debug("Create Top Level Code Super Bean: "
								+ currentCode0.Id);
						ICodeObjectBase code = new CodeObjectBaseCore(this,
								currentCode0, codeChildMap, null);
						LOG.Debug("Create Top Level Code Super Bean Created: "
								+ currentCode0.Id);
						_codes.Add(code);
					}
				}
				LOG.Debug("Code Super Beans Created");
			}
			BuildCodeValueMap(_codes);
		}
	
		
		public virtual IList<ICodeObjectBase> Codes {
		  get {
				return new List<ICodeObjectBase>(_codes);
			}
		}
		
	
		public virtual ICodeObjectBase GetCodeByValue(String valueren) {
			return _codeValueMap[valueren];
		}
	
		
		public ICodelistObject BuiltFrom {
		  get {
				return _codelist;
			}
		}
		
	
		private void BuildCodeValueMap(IList<ICodeObjectBase> codes0) {
			/* foreach */
			foreach (ICodeObjectBase currentCode  in  codes0) {
				if (currentCode.HasChildren()) {
					BuildCodeValueMap(currentCode.Children);
				}
				_codeValueMap.Add(currentCode.Id, currentCode);
			}
		}
	}
}
