// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.2011051901     
// 5/10/2012 7:21 μμ    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (c) 2012 Metadata Technology Ltd.
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the GNU Public License v3.0
/// which accompanies this distribution, and is available at
/// http://www.gnu.org/licenses/gpl.html
/// This file is part of the SDMX Component Library.
/// The SDMX Component Library is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// The SDMX Component Library is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// You should have received a copy of the GNU General Public License
/// along with The SDMX Component Library If not, see <http://www.gnu.org/licenses/>.
/// Contributors:
/// Metadata Technology - initial API and implementation
/// </summary>
///
namespace Org.Sdmxsource.Sdmx.SdmxObjects.Model.BaseObjects.Process {
	
	using Org.Sdmxsource.Sdmx.Api.Model.Objects.Process;
	using Org.Sdmxsource.Sdmx.Api.Model.BaseObjects.Process;
	using Org.Sdmxsource.Sdmx.SdmxObjects.Model.BaseObjects.Base;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	[Serializable]
	public class ProcessStepObjectBaseCore : NameableObjectBaseCore, 
			IProcessStepObjectBase {
	
		private const long serialVersionUID = 4815826565240989163L;

	    private readonly IProcessStepObject _processStep;
	    private readonly IList<IInputOutputObjectBase> _inputs;
	    private readonly IList<IInputOutputObjectBase> _outputs;
	    private readonly IComputationObject _computation;
	    private readonly IList<ITransition> _transitions;
	    private readonly IList<IProcessStepObjectBase> _processSteps;
	
		public ProcessStepObjectBaseCore(IProcessStepObject processStep,
				IList<IInputOutputObjectBase> inputs,
				IList<IInputOutputObjectBase> outputs, IComputationObject computation,
				IList<ITransition> transitions,
				IList<IProcessStepObjectBase> processSteps) : base(processStep) {
	
			this._processStep = processStep;
			this._inputs = inputs;
			this._outputs = outputs;
			this._computation = computation;
			this._transitions = transitions;
			this._processSteps = processSteps;
		}
	
		
		public virtual IProcessStepObject ProcessStep {
		  get {
				return this._processStep;
			}
		}
		
	
		
		public virtual IList<IInputOutputObjectBase> Input {
		  get {
				return new List<IInputOutputObjectBase>(this._inputs);
			}
		}
		
	
		
		public virtual IList<IInputOutputObjectBase> Output {
		  get {
				return new List<IInputOutputObjectBase>(this._outputs);
			}
		}
		
	
		
		public virtual IComputationObject Computation {
		  get {
				return this._computation;
			}
		}
		
	
		
		public virtual IList<ITransition> Transitions {
		  get {
				return new List<ITransition>(this._transitions);
			}
		}
		
	
		
		public virtual IList<IProcessStepObjectBase> ProcessSteps {
		  get {
				return new List<IProcessStepObjectBase>(this._processSteps);
			}
		}
		
	}
}
